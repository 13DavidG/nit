/* This C header file is generated by NIT to compile modules and programs that requires virtualtype. */
#ifndef virtualtype_sep
#define virtualtype_sep
#include "type_formal._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_MMTypeProperty[];

extern const classtable_elt_t VFT_MMVirtualType[];
extern const char *LOCATE_virtualtype;
extern const int SFT_virtualtype[];
#define CALL_virtualtype___MMGlobalProperty___is_virtual_type(recv) ((virtualtype___MMGlobalProperty___is_virtual_type_t)CALL((recv), (SFT_virtualtype[0] + 0)))
#define ID_MMTypeProperty (SFT_virtualtype[1])
#define COLOR_MMTypeProperty (SFT_virtualtype[2])
#define ATTR_virtualtype___MMTypeProperty____stypes_cache(recv) ATTR(recv, (SFT_virtualtype[3] + 0))
#define INIT_TABLE_POS_MMTypeProperty (SFT_virtualtype[4] + 0)
#define CALL_virtualtype___MMTypeProperty___stype_for(recv) ((virtualtype___MMTypeProperty___stype_for_t)CALL((recv), (SFT_virtualtype[4] + 1)))
#define CALL_virtualtype___MMTypeProperty___real_stype_for(recv) ((virtualtype___MMTypeProperty___real_stype_for_t)CALL((recv), (SFT_virtualtype[4] + 2)))
#define ID_MMVirtualType (SFT_virtualtype[5])
#define COLOR_MMVirtualType (SFT_virtualtype[6])
#define ATTR_virtualtype___MMVirtualType____property(recv) ATTR(recv, (SFT_virtualtype[7] + 0))
#define ATTR_virtualtype___MMVirtualType____recv(recv) ATTR(recv, (SFT_virtualtype[7] + 1))
#define INIT_TABLE_POS_MMVirtualType (SFT_virtualtype[8] + 0)
#define CALL_virtualtype___MMVirtualType___property(recv) ((virtualtype___MMVirtualType___property_t)CALL((recv), (SFT_virtualtype[8] + 1)))
#define CALL_virtualtype___MMVirtualType___recv(recv) ((virtualtype___MMVirtualType___recv_t)CALL((recv), (SFT_virtualtype[8] + 2)))
#define CALL_virtualtype___MMVirtualType___init(recv) ((virtualtype___MMVirtualType___init_t)CALL((recv), (SFT_virtualtype[8] + 3)))
#define CALL_virtualtype___MMLocalClass___virtual_type(recv) ((virtualtype___MMLocalClass___virtual_type_t)CALL((recv), (SFT_virtualtype[9] + 0)))
#define CALL_virtualtype___MMLocalClass___select_virtual_type(recv) ((virtualtype___MMLocalClass___select_virtual_type_t)CALL((recv), (SFT_virtualtype[9] + 1)))
static const char * const LOCATE_virtualtype___MMGlobalProperty___is_virtual_type = "virtualtype::MMGlobalProperty::is_virtual_type";
val_t virtualtype___MMGlobalProperty___is_virtual_type(val_t p0);
typedef val_t (*virtualtype___MMGlobalProperty___is_virtual_type_t)(val_t p0);
val_t NEW_MMGlobalProperty_abstractmetamodel___MMGlobalProperty___init(val_t p0);
static const char * const LOCATE_virtualtype___MMTypeProperty___stype_for = "virtualtype::MMTypeProperty::stype_for";
val_t virtualtype___MMTypeProperty___stype_for(val_t p0, val_t p1);
typedef val_t (*virtualtype___MMTypeProperty___stype_for_t)(val_t p0, val_t p1);
static const char * const LOCATE_virtualtype___MMTypeProperty___real_stype_for = "virtualtype::MMTypeProperty::real_stype_for";
val_t virtualtype___MMTypeProperty___real_stype_for(val_t p0, val_t p1);
typedef val_t (*virtualtype___MMTypeProperty___real_stype_for_t)(val_t p0, val_t p1);
val_t NEW_MMTypeProperty_abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
static const char * const LOCATE_virtualtype___MMVirtualType___property = "virtualtype::MMVirtualType::property";
val_t virtualtype___MMVirtualType___property(val_t p0);
typedef val_t (*virtualtype___MMVirtualType___property_t)(val_t p0);
static const char * const LOCATE_virtualtype___MMVirtualType___recv = "virtualtype::MMVirtualType::recv";
val_t virtualtype___MMVirtualType___recv(val_t p0);
typedef val_t (*virtualtype___MMVirtualType___recv_t)(val_t p0);
static const char * const LOCATE_virtualtype___MMVirtualType___init = "virtualtype::MMVirtualType::init";
void virtualtype___MMVirtualType___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*virtualtype___MMVirtualType___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_MMVirtualType_virtualtype___MMVirtualType___init(val_t p0, val_t p1);
static const char * const LOCATE_virtualtype___MMVirtualType___mmmodule = "virtualtype::MMVirtualType::(static_type::MMType::mmmodule)";
val_t virtualtype___MMVirtualType___mmmodule(val_t p0);
typedef val_t (*virtualtype___MMVirtualType___mmmodule_t)(val_t p0);
static const char * const LOCATE_virtualtype___MMVirtualType___for_module = "virtualtype::MMVirtualType::(static_type::MMType::for_module)";
val_t virtualtype___MMVirtualType___for_module(val_t p0, val_t p1);
typedef val_t (*virtualtype___MMVirtualType___for_module_t)(val_t p0, val_t p1);
static const char * const LOCATE_virtualtype___MMVirtualType___not_for_self = "virtualtype::MMVirtualType::(static_type::MMType::not_for_self)";
val_t virtualtype___MMVirtualType___not_for_self(val_t p0);
typedef val_t (*virtualtype___MMVirtualType___not_for_self_t)(val_t p0);
static const char * const LOCATE_virtualtype___MMVirtualType___adapt_to = "virtualtype::MMVirtualType::(static_type::MMType::adapt_to)";
val_t virtualtype___MMVirtualType___adapt_to(val_t p0, val_t p1);
typedef val_t (*virtualtype___MMVirtualType___adapt_to_t)(val_t p0, val_t p1);
static const char * const LOCATE_virtualtype___MMLocalClass___virtual_type = "virtualtype::MMLocalClass::virtual_type";
val_t virtualtype___MMLocalClass___virtual_type(val_t p0, val_t p1);
typedef val_t (*virtualtype___MMLocalClass___virtual_type_t)(val_t p0, val_t p1);
static const char * const LOCATE_virtualtype___MMLocalClass___select_virtual_type = "virtualtype::MMLocalClass::select_virtual_type";
val_t virtualtype___MMLocalClass___select_virtual_type(val_t p0, val_t p1);
typedef val_t (*virtualtype___MMLocalClass___select_virtual_type_t)(val_t p0, val_t p1);
val_t NEW_MMLocalClass_abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1, val_t p2);
#endif
