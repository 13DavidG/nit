/* This C header file is generated by NIT to compile modules and programs that requires virtualtype. */
#ifndef virtualtype_2_sep
#define virtualtype_2_sep
#include "type_formal._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_MMTypeProperty[];

extern const classtable_elt_t VFT_MMVirtualType[];
#define LOCATE_virtualtype "./metamodel//virtualtype.nit"
extern const int SFT_virtualtype[];
#define COLOR_virtualtype___MMGlobalProperty___is_virtual_type SFT_virtualtype[0]
#define ID_MMTypeProperty SFT_virtualtype[1]
#define COLOR_MMTypeProperty SFT_virtualtype[2]
#define COLOR_virtualtype___MMTypeProperty____stypes_cache SFT_virtualtype[3]
#define INIT_TABLE_POS_MMTypeProperty SFT_virtualtype[4]
#define COLOR_virtualtype___MMTypeProperty___stype_for SFT_virtualtype[5]
#define COLOR_virtualtype___MMTypeProperty___real_stype_for SFT_virtualtype[6]
#define ID_MMVirtualType SFT_virtualtype[7]
#define COLOR_MMVirtualType SFT_virtualtype[8]
#define COLOR_virtualtype___MMVirtualType____property SFT_virtualtype[9]
#define COLOR_virtualtype___MMVirtualType____recv SFT_virtualtype[10]
#define INIT_TABLE_POS_MMVirtualType SFT_virtualtype[11]
#define COLOR_virtualtype___MMVirtualType___property SFT_virtualtype[12]
#define COLOR_virtualtype___MMVirtualType___recv SFT_virtualtype[13]
#define COLOR_virtualtype___MMVirtualType___init SFT_virtualtype[14]
#define COLOR_virtualtype___MMLocalClass___virtual_type SFT_virtualtype[15]
#define COLOR_virtualtype___MMLocalClass___select_virtual_type SFT_virtualtype[16]
typedef val_t (* virtualtype___MMGlobalProperty___is_virtual_type_t)(val_t  self);
val_t virtualtype___MMGlobalProperty___is_virtual_type(val_t  self);
#define LOCATE_virtualtype___MMGlobalProperty___is_virtual_type "virtualtype::MMGlobalProperty::is_virtual_type"
typedef val_t (* virtualtype___MMTypeProperty___stype_for_t)(val_t  self, val_t  param0);
val_t virtualtype___MMTypeProperty___stype_for(val_t  self, val_t  param0);
#define LOCATE_virtualtype___MMTypeProperty___stype_for "virtualtype::MMTypeProperty::stype_for"
#define ATTR_virtualtype___MMTypeProperty____stypes_cache(recv) ATTR(recv, COLOR_virtualtype___MMTypeProperty____stypes_cache)
typedef val_t (* virtualtype___MMTypeProperty___real_stype_for_t)(val_t  self, val_t  param0);
val_t virtualtype___MMTypeProperty___real_stype_for(val_t  self, val_t  param0);
#define LOCATE_virtualtype___MMTypeProperty___real_stype_for "virtualtype::MMTypeProperty::real_stype_for"
#define ATTR_virtualtype___MMVirtualType____property(recv) ATTR(recv, COLOR_virtualtype___MMVirtualType____property)
typedef val_t (* virtualtype___MMVirtualType___property_t)(val_t  self);
val_t virtualtype___MMVirtualType___property(val_t  self);
#define LOCATE_virtualtype___MMVirtualType___property "virtualtype::MMVirtualType::property"
#define ATTR_virtualtype___MMVirtualType____recv(recv) ATTR(recv, COLOR_virtualtype___MMVirtualType____recv)
typedef val_t (* virtualtype___MMVirtualType___recv_t)(val_t  self);
val_t virtualtype___MMVirtualType___recv(val_t  self);
#define LOCATE_virtualtype___MMVirtualType___recv "virtualtype::MMVirtualType::recv"
typedef void (* virtualtype___MMVirtualType___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void virtualtype___MMVirtualType___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
val_t NEW_virtualtype___MMVirtualType___init(val_t  param0, val_t  param1);
#define LOCATE_virtualtype___MMVirtualType___init "virtualtype::MMVirtualType::init"
typedef val_t (* virtualtype___MMVirtualType___module_t)(val_t  self);
val_t virtualtype___MMVirtualType___module(val_t  self);
#define LOCATE_virtualtype___MMVirtualType___module "virtualtype::MMVirtualType::(static_type::MMType::module)"
typedef val_t (* virtualtype___MMVirtualType___for_module_t)(val_t  self, val_t  param0);
val_t virtualtype___MMVirtualType___for_module(val_t  self, val_t  param0);
#define LOCATE_virtualtype___MMVirtualType___for_module "virtualtype::MMVirtualType::(static_type::MMType::for_module)"
typedef val_t (* virtualtype___MMVirtualType___not_for_self_t)(val_t  self);
val_t virtualtype___MMVirtualType___not_for_self(val_t  self);
#define LOCATE_virtualtype___MMVirtualType___not_for_self "virtualtype::MMVirtualType::(static_type::MMType::not_for_self)"
typedef val_t (* virtualtype___MMVirtualType___adapt_to_t)(val_t  self, val_t  param0);
val_t virtualtype___MMVirtualType___adapt_to(val_t  self, val_t  param0);
#define LOCATE_virtualtype___MMVirtualType___adapt_to "virtualtype::MMVirtualType::(static_type::MMType::adapt_to)"
typedef val_t (* virtualtype___MMLocalClass___virtual_type_t)(val_t  self, val_t  param0);
val_t virtualtype___MMLocalClass___virtual_type(val_t  self, val_t  param0);
#define LOCATE_virtualtype___MMLocalClass___virtual_type "virtualtype::MMLocalClass::virtual_type"
typedef val_t (* virtualtype___MMLocalClass___select_virtual_type_t)(val_t  self, val_t  param0);
val_t virtualtype___MMLocalClass___select_virtual_type(val_t  self, val_t  param0);
#define LOCATE_virtualtype___MMLocalClass___select_virtual_type "virtualtype::MMLocalClass::select_virtual_type"
#endif
