/* This C header file is generated by NIT to compile modules and programs that requires mmloader. */
#ifndef mmloader_sep
#define mmloader_sep
#include "metamodel._sep.h"
#include "opts._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_ToolContext[];

extern const classtable_elt_t VFT_ModuleLoader[];
extern const char *LOCATE_mmloader;
extern const int SFT_mmloader[];
#define ID_ToolContext (SFT_mmloader[0])
#define COLOR_ToolContext (SFT_mmloader[1])
#define ATTR_mmloader___ToolContext____error_count(recv) ATTR(recv, (SFT_mmloader[2] + 0))
#define ATTR_mmloader___ToolContext____warning_count(recv) ATTR(recv, (SFT_mmloader[2] + 1))
#define ATTR_mmloader___ToolContext____paths(recv) ATTR(recv, (SFT_mmloader[2] + 2))
#define ATTR_mmloader___ToolContext____loaders(recv) ATTR(recv, (SFT_mmloader[2] + 3))
#define ATTR_mmloader___ToolContext____option_context(recv) ATTR(recv, (SFT_mmloader[2] + 4))
#define ATTR_mmloader___ToolContext____opt_warn(recv) ATTR(recv, (SFT_mmloader[2] + 5))
#define ATTR_mmloader___ToolContext____opt_path(recv) ATTR(recv, (SFT_mmloader[2] + 6))
#define ATTR_mmloader___ToolContext____opt_log(recv) ATTR(recv, (SFT_mmloader[2] + 7))
#define ATTR_mmloader___ToolContext____opt_only_metamodel(recv) ATTR(recv, (SFT_mmloader[2] + 8))
#define ATTR_mmloader___ToolContext____opt_only_parse(recv) ATTR(recv, (SFT_mmloader[2] + 9))
#define ATTR_mmloader___ToolContext____opt_help(recv) ATTR(recv, (SFT_mmloader[2] + 10))
#define ATTR_mmloader___ToolContext____processing_modules(recv) ATTR(recv, (SFT_mmloader[2] + 11))
#define ATTR_mmloader___ToolContext____path_dirs(recv) ATTR(recv, (SFT_mmloader[2] + 12))
#define INIT_TABLE_POS_ToolContext (SFT_mmloader[3] + 0)
#define CALL_mmloader___ToolContext___error_count(recv) ((mmloader___ToolContext___error_count_t)CALL((recv), (SFT_mmloader[3] + 1)))
#define CALL_mmloader___ToolContext___warning_count(recv) ((mmloader___ToolContext___warning_count_t)CALL((recv), (SFT_mmloader[3] + 2)))
#define CALL_mmloader___ToolContext___error(recv) ((mmloader___ToolContext___error_t)CALL((recv), (SFT_mmloader[3] + 3)))
#define CALL_mmloader___ToolContext___warning(recv) ((mmloader___ToolContext___warning_t)CALL((recv), (SFT_mmloader[3] + 4)))
#define CALL_mmloader___ToolContext___paths(recv) ((mmloader___ToolContext___paths_t)CALL((recv), (SFT_mmloader[3] + 5)))
#define CALL_mmloader___ToolContext___option_context(recv) ((mmloader___ToolContext___option_context_t)CALL((recv), (SFT_mmloader[3] + 6)))
#define CALL_mmloader___ToolContext___opt_warn(recv) ((mmloader___ToolContext___opt_warn_t)CALL((recv), (SFT_mmloader[3] + 7)))
#define CALL_mmloader___ToolContext___opt_path(recv) ((mmloader___ToolContext___opt_path_t)CALL((recv), (SFT_mmloader[3] + 8)))
#define CALL_mmloader___ToolContext___opt_log(recv) ((mmloader___ToolContext___opt_log_t)CALL((recv), (SFT_mmloader[3] + 9)))
#define CALL_mmloader___ToolContext___opt_only_metamodel(recv) ((mmloader___ToolContext___opt_only_metamodel_t)CALL((recv), (SFT_mmloader[3] + 10)))
#define CALL_mmloader___ToolContext___opt_only_parse(recv) ((mmloader___ToolContext___opt_only_parse_t)CALL((recv), (SFT_mmloader[3] + 11)))
#define CALL_mmloader___ToolContext___opt_help(recv) ((mmloader___ToolContext___opt_help_t)CALL((recv), (SFT_mmloader[3] + 12)))
#define CALL_mmloader___ToolContext___init(recv) ((mmloader___ToolContext___init_t)CALL((recv), (SFT_mmloader[3] + 13)))
#define CALL_mmloader___ToolContext___process_options(recv) ((mmloader___ToolContext___process_options_t)CALL((recv), (SFT_mmloader[3] + 14)))
#define CALL_mmloader___ToolContext___try_to_load(recv) ((mmloader___ToolContext___try_to_load_t)CALL((recv), (SFT_mmloader[3] + 15)))
#define CALL_mmloader___ToolContext___get_module_from_filename(recv) ((mmloader___ToolContext___get_module_from_filename_t)CALL((recv), (SFT_mmloader[3] + 16)))
#define CALL_mmloader___ToolContext___get_module(recv) ((mmloader___ToolContext___get_module_t)CALL((recv), (SFT_mmloader[3] + 17)))
#define CALL_mmloader___ToolContext___directory_for(recv) ((mmloader___ToolContext___directory_for_t)CALL((recv), (SFT_mmloader[3] + 18)))
#define CALL_mmloader___ToolContext___register_loader(recv) ((mmloader___ToolContext___register_loader_t)CALL((recv), (SFT_mmloader[3] + 19)))
#define ID_ModuleLoader (SFT_mmloader[4])
#define COLOR_ModuleLoader (SFT_mmloader[5])
#define INIT_TABLE_POS_ModuleLoader (SFT_mmloader[6] + 0)
#define CALL_mmloader___ModuleLoader___file_type(recv) ((mmloader___ModuleLoader___file_type_t)CALL((recv), (SFT_mmloader[6] + 1)))
#define CALL_mmloader___ModuleLoader___try_to_load_dir(recv) ((mmloader___ModuleLoader___try_to_load_dir_t)CALL((recv), (SFT_mmloader[6] + 2)))
#define CALL_mmloader___ModuleLoader___can_handle(recv) ((mmloader___ModuleLoader___can_handle_t)CALL((recv), (SFT_mmloader[6] + 3)))
#define CALL_mmloader___ModuleLoader___load_and_process_module(recv) ((mmloader___ModuleLoader___load_and_process_module_t)CALL((recv), (SFT_mmloader[6] + 4)))
#define CALL_mmloader___ModuleLoader___load_module(recv) ((mmloader___ModuleLoader___load_module_t)CALL((recv), (SFT_mmloader[6] + 5)))
#define CALL_mmloader___ModuleLoader___parse_file(recv) ((mmloader___ModuleLoader___parse_file_t)CALL((recv), (SFT_mmloader[6] + 6)))
#define CALL_mmloader___ModuleLoader___process_metamodel(recv) ((mmloader___ModuleLoader___process_metamodel_t)CALL((recv), (SFT_mmloader[6] + 7)))
#define CALL_mmloader___ModuleLoader___init(recv) ((mmloader___ModuleLoader___init_t)CALL((recv), (SFT_mmloader[6] + 8)))
#define ATTR_mmloader___MMModule____filename(recv) ATTR(recv, (SFT_mmloader[7] + 0))
#define ATTR_mmloader___MMModule____mtime(recv) ATTR(recv, (SFT_mmloader[7] + 1))
#define CALL_mmloader___MMModule___filename(recv) ((mmloader___MMModule___filename_t)CALL((recv), (SFT_mmloader[8] + 0)))
#define CALL_mmloader___MMModule___filename__eq(recv) ((mmloader___MMModule___filename__eq_t)CALL((recv), (SFT_mmloader[8] + 1)))
#define CALL_mmloader___MMModule___mtime(recv) ((mmloader___MMModule___mtime_t)CALL((recv), (SFT_mmloader[8] + 2)))
#define CALL_mmloader___MMModule___mtime__eq(recv) ((mmloader___MMModule___mtime__eq_t)CALL((recv), (SFT_mmloader[8] + 3)))
#define CALL_mmloader___MMModule___import_supers_modules(recv) ((mmloader___MMModule___import_supers_modules_t)CALL((recv), (SFT_mmloader[8] + 4)))
typedef val_t (* mmloader___ToolContext___error_count_t)(val_t  self);
val_t mmloader___ToolContext___error_count(val_t  self);
#define LOCATE_mmloader___ToolContext___error_count "mmloader::ToolContext::error_count"
typedef val_t (* mmloader___ToolContext___warning_count_t)(val_t  self);
val_t mmloader___ToolContext___warning_count(val_t  self);
#define LOCATE_mmloader___ToolContext___warning_count "mmloader::ToolContext::warning_count"
typedef void (* mmloader___ToolContext___error_t)(val_t  self, val_t  param0);
void mmloader___ToolContext___error(val_t  self, val_t  param0);
#define LOCATE_mmloader___ToolContext___error "mmloader::ToolContext::error"
typedef void (* mmloader___ToolContext___warning_t)(val_t  self, val_t  param0);
void mmloader___ToolContext___warning(val_t  self, val_t  param0);
#define LOCATE_mmloader___ToolContext___warning "mmloader::ToolContext::warning"
typedef val_t (* mmloader___ToolContext___paths_t)(val_t  self);
val_t mmloader___ToolContext___paths(val_t  self);
#define LOCATE_mmloader___ToolContext___paths "mmloader::ToolContext::paths"
typedef val_t (* mmloader___ToolContext___option_context_t)(val_t  self);
val_t mmloader___ToolContext___option_context(val_t  self);
#define LOCATE_mmloader___ToolContext___option_context "mmloader::ToolContext::option_context"
typedef val_t (* mmloader___ToolContext___opt_warn_t)(val_t  self);
val_t mmloader___ToolContext___opt_warn(val_t  self);
#define LOCATE_mmloader___ToolContext___opt_warn "mmloader::ToolContext::opt_warn"
typedef val_t (* mmloader___ToolContext___opt_path_t)(val_t  self);
val_t mmloader___ToolContext___opt_path(val_t  self);
#define LOCATE_mmloader___ToolContext___opt_path "mmloader::ToolContext::opt_path"
typedef val_t (* mmloader___ToolContext___opt_log_t)(val_t  self);
val_t mmloader___ToolContext___opt_log(val_t  self);
#define LOCATE_mmloader___ToolContext___opt_log "mmloader::ToolContext::opt_log"
typedef val_t (* mmloader___ToolContext___opt_only_metamodel_t)(val_t  self);
val_t mmloader___ToolContext___opt_only_metamodel(val_t  self);
#define LOCATE_mmloader___ToolContext___opt_only_metamodel "mmloader::ToolContext::opt_only_metamodel"
typedef val_t (* mmloader___ToolContext___opt_only_parse_t)(val_t  self);
val_t mmloader___ToolContext___opt_only_parse(val_t  self);
#define LOCATE_mmloader___ToolContext___opt_only_parse "mmloader::ToolContext::opt_only_parse"
typedef val_t (* mmloader___ToolContext___opt_help_t)(val_t  self);
val_t mmloader___ToolContext___opt_help(val_t  self);
#define LOCATE_mmloader___ToolContext___opt_help "mmloader::ToolContext::opt_help"
typedef void (* mmloader___ToolContext___init_t)(val_t  self, int* init_table);
void mmloader___ToolContext___init(val_t  self, int* init_table);
#define LOCATE_mmloader___ToolContext___init "mmloader::ToolContext::init"
val_t NEW_ToolContext_mmloader___ToolContext___init();
typedef void (* mmloader___ToolContext___process_options_t)(val_t  self);
void mmloader___ToolContext___process_options(val_t  self);
#define LOCATE_mmloader___ToolContext___process_options "mmloader::ToolContext::process_options"
typedef val_t (* mmloader___ToolContext___try_to_load_t)(val_t  self, val_t  param0, val_t  param1);
val_t mmloader___ToolContext___try_to_load(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_mmloader___ToolContext___try_to_load "mmloader::ToolContext::try_to_load"
typedef val_t (* mmloader___ToolContext___get_module_from_filename_t)(val_t  self, val_t  param0);
val_t mmloader___ToolContext___get_module_from_filename(val_t  self, val_t  param0);
#define LOCATE_mmloader___ToolContext___get_module_from_filename "mmloader::ToolContext::get_module_from_filename"
typedef val_t (* mmloader___ToolContext___get_module_t)(val_t  self, val_t  param0, val_t  param1);
val_t mmloader___ToolContext___get_module(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_mmloader___ToolContext___get_module "mmloader::ToolContext::get_module"
typedef val_t (* mmloader___ToolContext___directory_for_t)(val_t  self, val_t  param0);
val_t mmloader___ToolContext___directory_for(val_t  self, val_t  param0);
#define LOCATE_mmloader___ToolContext___directory_for "mmloader::ToolContext::directory_for"
typedef void (* mmloader___ToolContext___register_loader_t)(val_t  self, val_t  param0);
void mmloader___ToolContext___register_loader(val_t  self, val_t  param0);
#define LOCATE_mmloader___ToolContext___register_loader "mmloader::ToolContext::register_loader"
typedef val_t (* mmloader___ModuleLoader___file_type_t)(val_t  self);
val_t mmloader___ModuleLoader___file_type(val_t  self);
#define LOCATE_mmloader___ModuleLoader___file_type "mmloader::ModuleLoader::file_type"
typedef val_t (* mmloader___ModuleLoader___try_to_load_dir_t)(val_t  self, val_t  param0, val_t  param1);
val_t mmloader___ModuleLoader___try_to_load_dir(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_mmloader___ModuleLoader___try_to_load_dir "mmloader::ModuleLoader::try_to_load_dir"
typedef val_t (* mmloader___ModuleLoader___can_handle_t)(val_t  self, val_t  param0, val_t  param1);
val_t mmloader___ModuleLoader___can_handle(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_mmloader___ModuleLoader___can_handle "mmloader::ModuleLoader::can_handle"
typedef val_t (* mmloader___ModuleLoader___load_and_process_module_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2);
val_t mmloader___ModuleLoader___load_and_process_module(val_t  self, val_t  param0, val_t  param1, val_t  param2);
#define LOCATE_mmloader___ModuleLoader___load_and_process_module "mmloader::ModuleLoader::load_and_process_module"
typedef val_t (* mmloader___ModuleLoader___load_module_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3);
val_t mmloader___ModuleLoader___load_module(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3);
#define LOCATE_mmloader___ModuleLoader___load_module "mmloader::ModuleLoader::load_module"
typedef val_t (* mmloader___ModuleLoader___parse_file_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, val_t  param4);
val_t mmloader___ModuleLoader___parse_file(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, val_t  param4);
#define LOCATE_mmloader___ModuleLoader___parse_file "mmloader::ModuleLoader::parse_file"
typedef void (* mmloader___ModuleLoader___process_metamodel_t)(val_t  self, val_t  param0, val_t  param1);
void mmloader___ModuleLoader___process_metamodel(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_mmloader___ModuleLoader___process_metamodel "mmloader::ModuleLoader::process_metamodel"
typedef void (* mmloader___ModuleLoader___init_t)(val_t  self, int* init_table);
void mmloader___ModuleLoader___init(val_t  self, int* init_table);
#define LOCATE_mmloader___ModuleLoader___init "mmloader::ModuleLoader::init"
val_t NEW_ModuleLoader_mmloader___ModuleLoader___init();
val_t NEW_MMModule_abstractmetamodel___MMModule___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* mmloader___MMModule___filename_t)(val_t  self);
val_t mmloader___MMModule___filename(val_t  self);
#define LOCATE_mmloader___MMModule___filename "mmloader::MMModule::filename"
typedef void (* mmloader___MMModule___filename__eq_t)(val_t  self, val_t  param0);
void mmloader___MMModule___filename__eq(val_t  self, val_t  param0);
#define LOCATE_mmloader___MMModule___filename__eq "mmloader::MMModule::filename="
typedef val_t (* mmloader___MMModule___mtime_t)(val_t  self);
val_t mmloader___MMModule___mtime(val_t  self);
#define LOCATE_mmloader___MMModule___mtime "mmloader::MMModule::mtime"
typedef void (* mmloader___MMModule___mtime__eq_t)(val_t  self, val_t  param0);
void mmloader___MMModule___mtime__eq(val_t  self, val_t  param0);
#define LOCATE_mmloader___MMModule___mtime__eq "mmloader::MMModule::mtime="
typedef void (* mmloader___MMModule___import_supers_modules_t)(val_t  self, val_t  param0);
void mmloader___MMModule___import_supers_modules(val_t  self, val_t  param0);
#define LOCATE_mmloader___MMModule___import_supers_modules "mmloader::MMModule::import_supers_modules"
#endif
