/* This C header file is generated by NIT to compile modules and programs that requires lexer. */
#ifndef lexer_sep
#define lexer_sep
#include "parser_nodes._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_Lexer[];
extern const char *LOCATE_lexer;
extern const int SFT_lexer[];
#define COLOR_lexer___Token____text SFT_lexer[0]
#define COLOR_lexer___Token____filename SFT_lexer[1]
#define COLOR_lexer___Token____line SFT_lexer[2]
#define COLOR_lexer___Token____pos SFT_lexer[3]
#define COLOR_lexer___Token___text SFT_lexer[4]
#define COLOR_lexer___Token___text__eq SFT_lexer[5]
#define COLOR_lexer___Token___filename SFT_lexer[6]
#define COLOR_lexer___Token___line SFT_lexer[7]
#define COLOR_lexer___Token___pos SFT_lexer[8]
#define COLOR_lexer___Token___parser_index SFT_lexer[9]
#define COLOR_lexer___TEol___init_tk SFT_lexer[10]
#define COLOR_lexer___TComment___init_tk SFT_lexer[11]
#define COLOR_lexer___TKwpackage___init_tk SFT_lexer[12]
#define COLOR_lexer___TKwimport___init_tk SFT_lexer[13]
#define COLOR_lexer___TKwclass___init_tk SFT_lexer[14]
#define COLOR_lexer___TKwabstract___init_tk SFT_lexer[15]
#define COLOR_lexer___TKwinterface___init_tk SFT_lexer[16]
#define COLOR_lexer___TKwuniversal___init_tk SFT_lexer[17]
#define COLOR_lexer___TKwspecial___init_tk SFT_lexer[18]
#define COLOR_lexer___TKwend___init_tk SFT_lexer[19]
#define COLOR_lexer___TKwmeth___init_tk SFT_lexer[20]
#define COLOR_lexer___TKwtype___init_tk SFT_lexer[21]
#define COLOR_lexer___TKwattr___init_tk SFT_lexer[22]
#define COLOR_lexer___TKwinit___init_tk SFT_lexer[23]
#define COLOR_lexer___TKwredef___init_tk SFT_lexer[24]
#define COLOR_lexer___TKwis___init_tk SFT_lexer[25]
#define COLOR_lexer___TKwdo___init_tk SFT_lexer[26]
#define COLOR_lexer___TKwreadable___init_tk SFT_lexer[27]
#define COLOR_lexer___TKwwritable___init_tk SFT_lexer[28]
#define COLOR_lexer___TKwvar___init_tk SFT_lexer[29]
#define COLOR_lexer___TKwintern___init_tk SFT_lexer[30]
#define COLOR_lexer___TKwextern___init_tk SFT_lexer[31]
#define COLOR_lexer___TKwprotected___init_tk SFT_lexer[32]
#define COLOR_lexer___TKwprivate___init_tk SFT_lexer[33]
#define COLOR_lexer___TKwintrude___init_tk SFT_lexer[34]
#define COLOR_lexer___TKwif___init_tk SFT_lexer[35]
#define COLOR_lexer___TKwthen___init_tk SFT_lexer[36]
#define COLOR_lexer___TKwelse___init_tk SFT_lexer[37]
#define COLOR_lexer___TKwwhile___init_tk SFT_lexer[38]
#define COLOR_lexer___TKwfor___init_tk SFT_lexer[39]
#define COLOR_lexer___TKwin___init_tk SFT_lexer[40]
#define COLOR_lexer___TKwand___init_tk SFT_lexer[41]
#define COLOR_lexer___TKwor___init_tk SFT_lexer[42]
#define COLOR_lexer___TKwnot___init_tk SFT_lexer[43]
#define COLOR_lexer___TKwreturn___init_tk SFT_lexer[44]
#define COLOR_lexer___TKwcontinue___init_tk SFT_lexer[45]
#define COLOR_lexer___TKwbreak___init_tk SFT_lexer[46]
#define COLOR_lexer___TKwabort___init_tk SFT_lexer[47]
#define COLOR_lexer___TKwassert___init_tk SFT_lexer[48]
#define COLOR_lexer___TKwnew___init_tk SFT_lexer[49]
#define COLOR_lexer___TKwisa___init_tk SFT_lexer[50]
#define COLOR_lexer___TKwonce___init_tk SFT_lexer[51]
#define COLOR_lexer___TKwsuper___init_tk SFT_lexer[52]
#define COLOR_lexer___TKwself___init_tk SFT_lexer[53]
#define COLOR_lexer___TKwtrue___init_tk SFT_lexer[54]
#define COLOR_lexer___TKwfalse___init_tk SFT_lexer[55]
#define COLOR_lexer___TKwnull___init_tk SFT_lexer[56]
#define COLOR_lexer___TKwas___init_tk SFT_lexer[57]
#define COLOR_lexer___TKwwith___init_tk SFT_lexer[58]
#define COLOR_lexer___TOpar___init_tk SFT_lexer[59]
#define COLOR_lexer___TCpar___init_tk SFT_lexer[60]
#define COLOR_lexer___TObra___init_tk SFT_lexer[61]
#define COLOR_lexer___TCbra___init_tk SFT_lexer[62]
#define COLOR_lexer___TComma___init_tk SFT_lexer[63]
#define COLOR_lexer___TColumn___init_tk SFT_lexer[64]
#define COLOR_lexer___TQuad___init_tk SFT_lexer[65]
#define COLOR_lexer___TAssign___init_tk SFT_lexer[66]
#define COLOR_lexer___TPluseq___init_tk SFT_lexer[67]
#define COLOR_lexer___TMinuseq___init_tk SFT_lexer[68]
#define COLOR_lexer___TDotdotdot___init_tk SFT_lexer[69]
#define COLOR_lexer___TDotdot___init_tk SFT_lexer[70]
#define COLOR_lexer___TDot___init_tk SFT_lexer[71]
#define COLOR_lexer___TPlus___init_tk SFT_lexer[72]
#define COLOR_lexer___TMinus___init_tk SFT_lexer[73]
#define COLOR_lexer___TStar___init_tk SFT_lexer[74]
#define COLOR_lexer___TSlash___init_tk SFT_lexer[75]
#define COLOR_lexer___TPercent___init_tk SFT_lexer[76]
#define COLOR_lexer___TEq___init_tk SFT_lexer[77]
#define COLOR_lexer___TNe___init_tk SFT_lexer[78]
#define COLOR_lexer___TLt___init_tk SFT_lexer[79]
#define COLOR_lexer___TLe___init_tk SFT_lexer[80]
#define COLOR_lexer___TGt___init_tk SFT_lexer[81]
#define COLOR_lexer___TGe___init_tk SFT_lexer[82]
#define COLOR_lexer___TStarship___init_tk SFT_lexer[83]
#define COLOR_lexer___TClassid___init_tk SFT_lexer[84]
#define COLOR_lexer___TId___init_tk SFT_lexer[85]
#define COLOR_lexer___TAttrid___init_tk SFT_lexer[86]
#define COLOR_lexer___TNumber___init_tk SFT_lexer[87]
#define COLOR_lexer___TFloat___init_tk SFT_lexer[88]
#define COLOR_lexer___TChar___init_tk SFT_lexer[89]
#define COLOR_lexer___TString___init_tk SFT_lexer[90]
#define COLOR_lexer___TStartString___init_tk SFT_lexer[91]
#define COLOR_lexer___TMidString___init_tk SFT_lexer[92]
#define COLOR_lexer___TEndString___init_tk SFT_lexer[93]
#define COLOR_lexer___EOF___init SFT_lexer[94]
#define COLOR_lexer___PError____message SFT_lexer[95]
#define COLOR_lexer___PError___message SFT_lexer[96]
#define COLOR_lexer___PError___message__eq SFT_lexer[97]
#define COLOR_lexer___PError___init_error SFT_lexer[98]
#define ID_Lexer SFT_lexer[99]
#define COLOR_Lexer SFT_lexer[100]
#define COLOR_lexer___Lexer____token SFT_lexer[101]
#define COLOR_lexer___Lexer____state SFT_lexer[102]
#define COLOR_lexer___Lexer____filename SFT_lexer[103]
#define COLOR_lexer___Lexer____stream SFT_lexer[104]
#define COLOR_lexer___Lexer____stream_buf SFT_lexer[105]
#define COLOR_lexer___Lexer____stream_pos SFT_lexer[106]
#define COLOR_lexer___Lexer____line SFT_lexer[107]
#define COLOR_lexer___Lexer____pos SFT_lexer[108]
#define COLOR_lexer___Lexer____cr SFT_lexer[109]
#define COLOR_lexer___Lexer____eof SFT_lexer[110]
#define COLOR_lexer___Lexer____text SFT_lexer[111]
#define COLOR_lexer___Lexer____goto_table SFT_lexer[112]
#define COLOR_lexer___Lexer____accept_table SFT_lexer[113]
#define INIT_TABLE_POS_Lexer SFT_lexer[114]
#define COLOR_lexer___Lexer___filename SFT_lexer[115]
#define COLOR_lexer___Lexer___state_initial SFT_lexer[116]
#define COLOR_lexer___Lexer___init SFT_lexer[117]
#define COLOR_lexer___Lexer___peek SFT_lexer[118]
#define COLOR_lexer___Lexer___next SFT_lexer[119]
#define COLOR_lexer___Lexer___get_token SFT_lexer[120]
#define COLOR_lexer___Lexer___get_char SFT_lexer[121]
#define COLOR_lexer___Lexer___push_back SFT_lexer[122]
#define COLOR_lexer___Lexer___build_goto_table SFT_lexer[123]
#define COLOR_lexer___Lexer___nil_array SFT_lexer[124]
#define COLOR_lexer___Lexer___build_accept_table SFT_lexer[125]
typedef val_t (* lexer___Token___to_s_t)(val_t  self);
val_t lexer___Token___to_s(val_t  self);
#define LOCATE_lexer___Token___to_s "lexer::Token::(string::Object::to_s)"
val_t NEW_Token_parser_nodes___PNode___init();
#define ATTR_lexer___Token____text(recv) ATTR(recv, COLOR_lexer___Token____text)
typedef val_t (* lexer___Token___text_t)(val_t  self);
val_t lexer___Token___text(val_t  self);
#define LOCATE_lexer___Token___text "lexer::Token::text"
typedef void (* lexer___Token___text__eq_t)(val_t  self, val_t  param0);
void lexer___Token___text__eq(val_t  self, val_t  param0);
#define LOCATE_lexer___Token___text__eq "lexer::Token::text="
#define ATTR_lexer___Token____filename(recv) ATTR(recv, COLOR_lexer___Token____filename)
typedef val_t (* lexer___Token___filename_t)(val_t  self);
val_t lexer___Token___filename(val_t  self);
#define LOCATE_lexer___Token___filename "lexer::Token::filename"
#define ATTR_lexer___Token____line(recv) ATTR(recv, COLOR_lexer___Token____line)
typedef val_t (* lexer___Token___line_t)(val_t  self);
val_t lexer___Token___line(val_t  self);
#define LOCATE_lexer___Token___line "lexer::Token::line"
#define ATTR_lexer___Token____pos(recv) ATTR(recv, COLOR_lexer___Token____pos)
typedef val_t (* lexer___Token___pos_t)(val_t  self);
val_t lexer___Token___pos(val_t  self);
#define LOCATE_lexer___Token___pos "lexer::Token::pos"
typedef val_t (* lexer___Token___parser_index_t)(val_t  self);
val_t lexer___Token___parser_index(val_t  self);
#define LOCATE_lexer___Token___parser_index "lexer::Token::parser_index"
val_t NEW_TEol_parser_nodes___PNode___init();
typedef val_t (* lexer___TEol___parser_index_t)(val_t  self);
val_t lexer___TEol___parser_index(val_t  self);
#define LOCATE_lexer___TEol___parser_index "lexer::TEol::(lexer::Token::parser_index)"
typedef void (* lexer___TEol___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TEol___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TEol___init_tk "lexer::TEol::init_tk"
val_t NEW_TEol_lexer___TEol___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TComment_parser_nodes___PNode___init();
typedef val_t (* lexer___TComment___parser_index_t)(val_t  self);
val_t lexer___TComment___parser_index(val_t  self);
#define LOCATE_lexer___TComment___parser_index "lexer::TComment::(lexer::Token::parser_index)"
typedef void (* lexer___TComment___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TComment___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TComment___init_tk "lexer::TComment::init_tk"
val_t NEW_TComment_lexer___TComment___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TKwpackage_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwpackage___parser_index_t)(val_t  self);
val_t lexer___TKwpackage___parser_index(val_t  self);
#define LOCATE_lexer___TKwpackage___parser_index "lexer::TKwpackage::(lexer::Token::parser_index)"
typedef void (* lexer___TKwpackage___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwpackage___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwpackage___init_tk "lexer::TKwpackage::init_tk"
val_t NEW_TKwpackage_lexer___TKwpackage___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwimport_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwimport___parser_index_t)(val_t  self);
val_t lexer___TKwimport___parser_index(val_t  self);
#define LOCATE_lexer___TKwimport___parser_index "lexer::TKwimport::(lexer::Token::parser_index)"
typedef void (* lexer___TKwimport___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwimport___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwimport___init_tk "lexer::TKwimport::init_tk"
val_t NEW_TKwimport_lexer___TKwimport___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwclass_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwclass___parser_index_t)(val_t  self);
val_t lexer___TKwclass___parser_index(val_t  self);
#define LOCATE_lexer___TKwclass___parser_index "lexer::TKwclass::(lexer::Token::parser_index)"
typedef void (* lexer___TKwclass___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwclass___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwclass___init_tk "lexer::TKwclass::init_tk"
val_t NEW_TKwclass_lexer___TKwclass___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwabstract_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwabstract___parser_index_t)(val_t  self);
val_t lexer___TKwabstract___parser_index(val_t  self);
#define LOCATE_lexer___TKwabstract___parser_index "lexer::TKwabstract::(lexer::Token::parser_index)"
typedef void (* lexer___TKwabstract___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwabstract___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwabstract___init_tk "lexer::TKwabstract::init_tk"
val_t NEW_TKwabstract_lexer___TKwabstract___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwinterface_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwinterface___parser_index_t)(val_t  self);
val_t lexer___TKwinterface___parser_index(val_t  self);
#define LOCATE_lexer___TKwinterface___parser_index "lexer::TKwinterface::(lexer::Token::parser_index)"
typedef void (* lexer___TKwinterface___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwinterface___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwinterface___init_tk "lexer::TKwinterface::init_tk"
val_t NEW_TKwinterface_lexer___TKwinterface___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwuniversal_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwuniversal___parser_index_t)(val_t  self);
val_t lexer___TKwuniversal___parser_index(val_t  self);
#define LOCATE_lexer___TKwuniversal___parser_index "lexer::TKwuniversal::(lexer::Token::parser_index)"
typedef void (* lexer___TKwuniversal___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwuniversal___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwuniversal___init_tk "lexer::TKwuniversal::init_tk"
val_t NEW_TKwuniversal_lexer___TKwuniversal___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwspecial_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwspecial___parser_index_t)(val_t  self);
val_t lexer___TKwspecial___parser_index(val_t  self);
#define LOCATE_lexer___TKwspecial___parser_index "lexer::TKwspecial::(lexer::Token::parser_index)"
typedef void (* lexer___TKwspecial___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwspecial___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwspecial___init_tk "lexer::TKwspecial::init_tk"
val_t NEW_TKwspecial_lexer___TKwspecial___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwend_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwend___parser_index_t)(val_t  self);
val_t lexer___TKwend___parser_index(val_t  self);
#define LOCATE_lexer___TKwend___parser_index "lexer::TKwend::(lexer::Token::parser_index)"
typedef void (* lexer___TKwend___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwend___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwend___init_tk "lexer::TKwend::init_tk"
val_t NEW_TKwend_lexer___TKwend___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwmeth_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwmeth___parser_index_t)(val_t  self);
val_t lexer___TKwmeth___parser_index(val_t  self);
#define LOCATE_lexer___TKwmeth___parser_index "lexer::TKwmeth::(lexer::Token::parser_index)"
typedef void (* lexer___TKwmeth___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwmeth___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwmeth___init_tk "lexer::TKwmeth::init_tk"
val_t NEW_TKwmeth_lexer___TKwmeth___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwtype_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwtype___parser_index_t)(val_t  self);
val_t lexer___TKwtype___parser_index(val_t  self);
#define LOCATE_lexer___TKwtype___parser_index "lexer::TKwtype::(lexer::Token::parser_index)"
typedef void (* lexer___TKwtype___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwtype___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwtype___init_tk "lexer::TKwtype::init_tk"
val_t NEW_TKwtype_lexer___TKwtype___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwattr_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwattr___parser_index_t)(val_t  self);
val_t lexer___TKwattr___parser_index(val_t  self);
#define LOCATE_lexer___TKwattr___parser_index "lexer::TKwattr::(lexer::Token::parser_index)"
typedef void (* lexer___TKwattr___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwattr___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwattr___init_tk "lexer::TKwattr::init_tk"
val_t NEW_TKwattr_lexer___TKwattr___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwinit_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwinit___parser_index_t)(val_t  self);
val_t lexer___TKwinit___parser_index(val_t  self);
#define LOCATE_lexer___TKwinit___parser_index "lexer::TKwinit::(lexer::Token::parser_index)"
typedef void (* lexer___TKwinit___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwinit___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwinit___init_tk "lexer::TKwinit::init_tk"
val_t NEW_TKwinit_lexer___TKwinit___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwredef_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwredef___parser_index_t)(val_t  self);
val_t lexer___TKwredef___parser_index(val_t  self);
#define LOCATE_lexer___TKwredef___parser_index "lexer::TKwredef::(lexer::Token::parser_index)"
typedef void (* lexer___TKwredef___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwredef___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwredef___init_tk "lexer::TKwredef::init_tk"
val_t NEW_TKwredef_lexer___TKwredef___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwis_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwis___parser_index_t)(val_t  self);
val_t lexer___TKwis___parser_index(val_t  self);
#define LOCATE_lexer___TKwis___parser_index "lexer::TKwis::(lexer::Token::parser_index)"
typedef void (* lexer___TKwis___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwis___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwis___init_tk "lexer::TKwis::init_tk"
val_t NEW_TKwis_lexer___TKwis___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwdo_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwdo___parser_index_t)(val_t  self);
val_t lexer___TKwdo___parser_index(val_t  self);
#define LOCATE_lexer___TKwdo___parser_index "lexer::TKwdo::(lexer::Token::parser_index)"
typedef void (* lexer___TKwdo___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwdo___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwdo___init_tk "lexer::TKwdo::init_tk"
val_t NEW_TKwdo_lexer___TKwdo___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwreadable_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwreadable___parser_index_t)(val_t  self);
val_t lexer___TKwreadable___parser_index(val_t  self);
#define LOCATE_lexer___TKwreadable___parser_index "lexer::TKwreadable::(lexer::Token::parser_index)"
typedef void (* lexer___TKwreadable___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwreadable___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwreadable___init_tk "lexer::TKwreadable::init_tk"
val_t NEW_TKwreadable_lexer___TKwreadable___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwwritable_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwwritable___parser_index_t)(val_t  self);
val_t lexer___TKwwritable___parser_index(val_t  self);
#define LOCATE_lexer___TKwwritable___parser_index "lexer::TKwwritable::(lexer::Token::parser_index)"
typedef void (* lexer___TKwwritable___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwwritable___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwwritable___init_tk "lexer::TKwwritable::init_tk"
val_t NEW_TKwwritable_lexer___TKwwritable___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwvar_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwvar___parser_index_t)(val_t  self);
val_t lexer___TKwvar___parser_index(val_t  self);
#define LOCATE_lexer___TKwvar___parser_index "lexer::TKwvar::(lexer::Token::parser_index)"
typedef void (* lexer___TKwvar___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwvar___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwvar___init_tk "lexer::TKwvar::init_tk"
val_t NEW_TKwvar_lexer___TKwvar___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwintern_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwintern___parser_index_t)(val_t  self);
val_t lexer___TKwintern___parser_index(val_t  self);
#define LOCATE_lexer___TKwintern___parser_index "lexer::TKwintern::(lexer::Token::parser_index)"
typedef void (* lexer___TKwintern___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwintern___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwintern___init_tk "lexer::TKwintern::init_tk"
val_t NEW_TKwintern_lexer___TKwintern___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwextern_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwextern___parser_index_t)(val_t  self);
val_t lexer___TKwextern___parser_index(val_t  self);
#define LOCATE_lexer___TKwextern___parser_index "lexer::TKwextern::(lexer::Token::parser_index)"
typedef void (* lexer___TKwextern___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwextern___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwextern___init_tk "lexer::TKwextern::init_tk"
val_t NEW_TKwextern_lexer___TKwextern___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwprotected_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwprotected___parser_index_t)(val_t  self);
val_t lexer___TKwprotected___parser_index(val_t  self);
#define LOCATE_lexer___TKwprotected___parser_index "lexer::TKwprotected::(lexer::Token::parser_index)"
typedef void (* lexer___TKwprotected___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwprotected___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwprotected___init_tk "lexer::TKwprotected::init_tk"
val_t NEW_TKwprotected_lexer___TKwprotected___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwprivate_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwprivate___parser_index_t)(val_t  self);
val_t lexer___TKwprivate___parser_index(val_t  self);
#define LOCATE_lexer___TKwprivate___parser_index "lexer::TKwprivate::(lexer::Token::parser_index)"
typedef void (* lexer___TKwprivate___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwprivate___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwprivate___init_tk "lexer::TKwprivate::init_tk"
val_t NEW_TKwprivate_lexer___TKwprivate___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwintrude_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwintrude___parser_index_t)(val_t  self);
val_t lexer___TKwintrude___parser_index(val_t  self);
#define LOCATE_lexer___TKwintrude___parser_index "lexer::TKwintrude::(lexer::Token::parser_index)"
typedef void (* lexer___TKwintrude___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwintrude___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwintrude___init_tk "lexer::TKwintrude::init_tk"
val_t NEW_TKwintrude_lexer___TKwintrude___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwif_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwif___parser_index_t)(val_t  self);
val_t lexer___TKwif___parser_index(val_t  self);
#define LOCATE_lexer___TKwif___parser_index "lexer::TKwif::(lexer::Token::parser_index)"
typedef void (* lexer___TKwif___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwif___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwif___init_tk "lexer::TKwif::init_tk"
val_t NEW_TKwif_lexer___TKwif___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwthen_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwthen___parser_index_t)(val_t  self);
val_t lexer___TKwthen___parser_index(val_t  self);
#define LOCATE_lexer___TKwthen___parser_index "lexer::TKwthen::(lexer::Token::parser_index)"
typedef void (* lexer___TKwthen___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwthen___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwthen___init_tk "lexer::TKwthen::init_tk"
val_t NEW_TKwthen_lexer___TKwthen___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwelse_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwelse___parser_index_t)(val_t  self);
val_t lexer___TKwelse___parser_index(val_t  self);
#define LOCATE_lexer___TKwelse___parser_index "lexer::TKwelse::(lexer::Token::parser_index)"
typedef void (* lexer___TKwelse___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwelse___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwelse___init_tk "lexer::TKwelse::init_tk"
val_t NEW_TKwelse_lexer___TKwelse___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwwhile_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwwhile___parser_index_t)(val_t  self);
val_t lexer___TKwwhile___parser_index(val_t  self);
#define LOCATE_lexer___TKwwhile___parser_index "lexer::TKwwhile::(lexer::Token::parser_index)"
typedef void (* lexer___TKwwhile___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwwhile___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwwhile___init_tk "lexer::TKwwhile::init_tk"
val_t NEW_TKwwhile_lexer___TKwwhile___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwfor_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwfor___parser_index_t)(val_t  self);
val_t lexer___TKwfor___parser_index(val_t  self);
#define LOCATE_lexer___TKwfor___parser_index "lexer::TKwfor::(lexer::Token::parser_index)"
typedef void (* lexer___TKwfor___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwfor___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwfor___init_tk "lexer::TKwfor::init_tk"
val_t NEW_TKwfor_lexer___TKwfor___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwin_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwin___parser_index_t)(val_t  self);
val_t lexer___TKwin___parser_index(val_t  self);
#define LOCATE_lexer___TKwin___parser_index "lexer::TKwin::(lexer::Token::parser_index)"
typedef void (* lexer___TKwin___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwin___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwin___init_tk "lexer::TKwin::init_tk"
val_t NEW_TKwin_lexer___TKwin___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwand_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwand___parser_index_t)(val_t  self);
val_t lexer___TKwand___parser_index(val_t  self);
#define LOCATE_lexer___TKwand___parser_index "lexer::TKwand::(lexer::Token::parser_index)"
typedef void (* lexer___TKwand___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwand___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwand___init_tk "lexer::TKwand::init_tk"
val_t NEW_TKwand_lexer___TKwand___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwor_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwor___parser_index_t)(val_t  self);
val_t lexer___TKwor___parser_index(val_t  self);
#define LOCATE_lexer___TKwor___parser_index "lexer::TKwor::(lexer::Token::parser_index)"
typedef void (* lexer___TKwor___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwor___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwor___init_tk "lexer::TKwor::init_tk"
val_t NEW_TKwor_lexer___TKwor___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwnot_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwnot___parser_index_t)(val_t  self);
val_t lexer___TKwnot___parser_index(val_t  self);
#define LOCATE_lexer___TKwnot___parser_index "lexer::TKwnot::(lexer::Token::parser_index)"
typedef void (* lexer___TKwnot___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwnot___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwnot___init_tk "lexer::TKwnot::init_tk"
val_t NEW_TKwnot_lexer___TKwnot___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwreturn_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwreturn___parser_index_t)(val_t  self);
val_t lexer___TKwreturn___parser_index(val_t  self);
#define LOCATE_lexer___TKwreturn___parser_index "lexer::TKwreturn::(lexer::Token::parser_index)"
typedef void (* lexer___TKwreturn___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwreturn___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwreturn___init_tk "lexer::TKwreturn::init_tk"
val_t NEW_TKwreturn_lexer___TKwreturn___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwcontinue_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwcontinue___parser_index_t)(val_t  self);
val_t lexer___TKwcontinue___parser_index(val_t  self);
#define LOCATE_lexer___TKwcontinue___parser_index "lexer::TKwcontinue::(lexer::Token::parser_index)"
typedef void (* lexer___TKwcontinue___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwcontinue___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwcontinue___init_tk "lexer::TKwcontinue::init_tk"
val_t NEW_TKwcontinue_lexer___TKwcontinue___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwbreak_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwbreak___parser_index_t)(val_t  self);
val_t lexer___TKwbreak___parser_index(val_t  self);
#define LOCATE_lexer___TKwbreak___parser_index "lexer::TKwbreak::(lexer::Token::parser_index)"
typedef void (* lexer___TKwbreak___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwbreak___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwbreak___init_tk "lexer::TKwbreak::init_tk"
val_t NEW_TKwbreak_lexer___TKwbreak___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwabort_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwabort___parser_index_t)(val_t  self);
val_t lexer___TKwabort___parser_index(val_t  self);
#define LOCATE_lexer___TKwabort___parser_index "lexer::TKwabort::(lexer::Token::parser_index)"
typedef void (* lexer___TKwabort___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwabort___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwabort___init_tk "lexer::TKwabort::init_tk"
val_t NEW_TKwabort_lexer___TKwabort___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwassert_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwassert___parser_index_t)(val_t  self);
val_t lexer___TKwassert___parser_index(val_t  self);
#define LOCATE_lexer___TKwassert___parser_index "lexer::TKwassert::(lexer::Token::parser_index)"
typedef void (* lexer___TKwassert___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwassert___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwassert___init_tk "lexer::TKwassert::init_tk"
val_t NEW_TKwassert_lexer___TKwassert___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwnew_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwnew___parser_index_t)(val_t  self);
val_t lexer___TKwnew___parser_index(val_t  self);
#define LOCATE_lexer___TKwnew___parser_index "lexer::TKwnew::(lexer::Token::parser_index)"
typedef void (* lexer___TKwnew___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwnew___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwnew___init_tk "lexer::TKwnew::init_tk"
val_t NEW_TKwnew_lexer___TKwnew___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwisa_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwisa___parser_index_t)(val_t  self);
val_t lexer___TKwisa___parser_index(val_t  self);
#define LOCATE_lexer___TKwisa___parser_index "lexer::TKwisa::(lexer::Token::parser_index)"
typedef void (* lexer___TKwisa___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwisa___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwisa___init_tk "lexer::TKwisa::init_tk"
val_t NEW_TKwisa_lexer___TKwisa___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwonce_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwonce___parser_index_t)(val_t  self);
val_t lexer___TKwonce___parser_index(val_t  self);
#define LOCATE_lexer___TKwonce___parser_index "lexer::TKwonce::(lexer::Token::parser_index)"
typedef void (* lexer___TKwonce___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwonce___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwonce___init_tk "lexer::TKwonce::init_tk"
val_t NEW_TKwonce_lexer___TKwonce___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwsuper_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwsuper___parser_index_t)(val_t  self);
val_t lexer___TKwsuper___parser_index(val_t  self);
#define LOCATE_lexer___TKwsuper___parser_index "lexer::TKwsuper::(lexer::Token::parser_index)"
typedef void (* lexer___TKwsuper___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwsuper___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwsuper___init_tk "lexer::TKwsuper::init_tk"
val_t NEW_TKwsuper_lexer___TKwsuper___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwself_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwself___parser_index_t)(val_t  self);
val_t lexer___TKwself___parser_index(val_t  self);
#define LOCATE_lexer___TKwself___parser_index "lexer::TKwself::(lexer::Token::parser_index)"
typedef void (* lexer___TKwself___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwself___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwself___init_tk "lexer::TKwself::init_tk"
val_t NEW_TKwself_lexer___TKwself___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwtrue_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwtrue___parser_index_t)(val_t  self);
val_t lexer___TKwtrue___parser_index(val_t  self);
#define LOCATE_lexer___TKwtrue___parser_index "lexer::TKwtrue::(lexer::Token::parser_index)"
typedef void (* lexer___TKwtrue___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwtrue___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwtrue___init_tk "lexer::TKwtrue::init_tk"
val_t NEW_TKwtrue_lexer___TKwtrue___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwfalse_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwfalse___parser_index_t)(val_t  self);
val_t lexer___TKwfalse___parser_index(val_t  self);
#define LOCATE_lexer___TKwfalse___parser_index "lexer::TKwfalse::(lexer::Token::parser_index)"
typedef void (* lexer___TKwfalse___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwfalse___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwfalse___init_tk "lexer::TKwfalse::init_tk"
val_t NEW_TKwfalse_lexer___TKwfalse___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwnull_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwnull___parser_index_t)(val_t  self);
val_t lexer___TKwnull___parser_index(val_t  self);
#define LOCATE_lexer___TKwnull___parser_index "lexer::TKwnull::(lexer::Token::parser_index)"
typedef void (* lexer___TKwnull___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwnull___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwnull___init_tk "lexer::TKwnull::init_tk"
val_t NEW_TKwnull_lexer___TKwnull___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwas_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwas___parser_index_t)(val_t  self);
val_t lexer___TKwas___parser_index(val_t  self);
#define LOCATE_lexer___TKwas___parser_index "lexer::TKwas::(lexer::Token::parser_index)"
typedef void (* lexer___TKwas___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwas___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwas___init_tk "lexer::TKwas::init_tk"
val_t NEW_TKwas_lexer___TKwas___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TKwwith_parser_nodes___PNode___init();
typedef val_t (* lexer___TKwwith___parser_index_t)(val_t  self);
val_t lexer___TKwwith___parser_index(val_t  self);
#define LOCATE_lexer___TKwwith___parser_index "lexer::TKwwith::(lexer::Token::parser_index)"
typedef void (* lexer___TKwwith___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TKwwith___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TKwwith___init_tk "lexer::TKwwith::init_tk"
val_t NEW_TKwwith_lexer___TKwwith___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TOpar_parser_nodes___PNode___init();
typedef val_t (* lexer___TOpar___parser_index_t)(val_t  self);
val_t lexer___TOpar___parser_index(val_t  self);
#define LOCATE_lexer___TOpar___parser_index "lexer::TOpar::(lexer::Token::parser_index)"
typedef void (* lexer___TOpar___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TOpar___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TOpar___init_tk "lexer::TOpar::init_tk"
val_t NEW_TOpar_lexer___TOpar___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TCpar_parser_nodes___PNode___init();
typedef val_t (* lexer___TCpar___parser_index_t)(val_t  self);
val_t lexer___TCpar___parser_index(val_t  self);
#define LOCATE_lexer___TCpar___parser_index "lexer::TCpar::(lexer::Token::parser_index)"
typedef void (* lexer___TCpar___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TCpar___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TCpar___init_tk "lexer::TCpar::init_tk"
val_t NEW_TCpar_lexer___TCpar___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TObra_parser_nodes___PNode___init();
typedef val_t (* lexer___TObra___parser_index_t)(val_t  self);
val_t lexer___TObra___parser_index(val_t  self);
#define LOCATE_lexer___TObra___parser_index "lexer::TObra::(lexer::Token::parser_index)"
typedef void (* lexer___TObra___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TObra___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TObra___init_tk "lexer::TObra::init_tk"
val_t NEW_TObra_lexer___TObra___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TCbra_parser_nodes___PNode___init();
typedef val_t (* lexer___TCbra___parser_index_t)(val_t  self);
val_t lexer___TCbra___parser_index(val_t  self);
#define LOCATE_lexer___TCbra___parser_index "lexer::TCbra::(lexer::Token::parser_index)"
typedef void (* lexer___TCbra___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TCbra___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TCbra___init_tk "lexer::TCbra::init_tk"
val_t NEW_TCbra_lexer___TCbra___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TComma_parser_nodes___PNode___init();
typedef val_t (* lexer___TComma___parser_index_t)(val_t  self);
val_t lexer___TComma___parser_index(val_t  self);
#define LOCATE_lexer___TComma___parser_index "lexer::TComma::(lexer::Token::parser_index)"
typedef void (* lexer___TComma___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TComma___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TComma___init_tk "lexer::TComma::init_tk"
val_t NEW_TComma_lexer___TComma___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TColumn_parser_nodes___PNode___init();
typedef val_t (* lexer___TColumn___parser_index_t)(val_t  self);
val_t lexer___TColumn___parser_index(val_t  self);
#define LOCATE_lexer___TColumn___parser_index "lexer::TColumn::(lexer::Token::parser_index)"
typedef void (* lexer___TColumn___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TColumn___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TColumn___init_tk "lexer::TColumn::init_tk"
val_t NEW_TColumn_lexer___TColumn___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TQuad_parser_nodes___PNode___init();
typedef val_t (* lexer___TQuad___parser_index_t)(val_t  self);
val_t lexer___TQuad___parser_index(val_t  self);
#define LOCATE_lexer___TQuad___parser_index "lexer::TQuad::(lexer::Token::parser_index)"
typedef void (* lexer___TQuad___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TQuad___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TQuad___init_tk "lexer::TQuad::init_tk"
val_t NEW_TQuad_lexer___TQuad___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TAssign_parser_nodes___PNode___init();
typedef val_t (* lexer___TAssign___parser_index_t)(val_t  self);
val_t lexer___TAssign___parser_index(val_t  self);
#define LOCATE_lexer___TAssign___parser_index "lexer::TAssign::(lexer::Token::parser_index)"
typedef void (* lexer___TAssign___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TAssign___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TAssign___init_tk "lexer::TAssign::init_tk"
val_t NEW_TAssign_lexer___TAssign___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TPluseq_parser_nodes___PNode___init();
typedef val_t (* lexer___TPluseq___parser_index_t)(val_t  self);
val_t lexer___TPluseq___parser_index(val_t  self);
#define LOCATE_lexer___TPluseq___parser_index "lexer::TPluseq::(lexer::Token::parser_index)"
typedef void (* lexer___TPluseq___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TPluseq___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TPluseq___init_tk "lexer::TPluseq::init_tk"
val_t NEW_TPluseq_lexer___TPluseq___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TMinuseq_parser_nodes___PNode___init();
typedef val_t (* lexer___TMinuseq___parser_index_t)(val_t  self);
val_t lexer___TMinuseq___parser_index(val_t  self);
#define LOCATE_lexer___TMinuseq___parser_index "lexer::TMinuseq::(lexer::Token::parser_index)"
typedef void (* lexer___TMinuseq___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TMinuseq___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TMinuseq___init_tk "lexer::TMinuseq::init_tk"
val_t NEW_TMinuseq_lexer___TMinuseq___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TDotdotdot_parser_nodes___PNode___init();
typedef val_t (* lexer___TDotdotdot___parser_index_t)(val_t  self);
val_t lexer___TDotdotdot___parser_index(val_t  self);
#define LOCATE_lexer___TDotdotdot___parser_index "lexer::TDotdotdot::(lexer::Token::parser_index)"
typedef void (* lexer___TDotdotdot___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TDotdotdot___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TDotdotdot___init_tk "lexer::TDotdotdot::init_tk"
val_t NEW_TDotdotdot_lexer___TDotdotdot___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TDotdot_parser_nodes___PNode___init();
typedef val_t (* lexer___TDotdot___parser_index_t)(val_t  self);
val_t lexer___TDotdot___parser_index(val_t  self);
#define LOCATE_lexer___TDotdot___parser_index "lexer::TDotdot::(lexer::Token::parser_index)"
typedef void (* lexer___TDotdot___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TDotdot___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TDotdot___init_tk "lexer::TDotdot::init_tk"
val_t NEW_TDotdot_lexer___TDotdot___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TDot_parser_nodes___PNode___init();
typedef val_t (* lexer___TDot___parser_index_t)(val_t  self);
val_t lexer___TDot___parser_index(val_t  self);
#define LOCATE_lexer___TDot___parser_index "lexer::TDot::(lexer::Token::parser_index)"
typedef void (* lexer___TDot___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TDot___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TDot___init_tk "lexer::TDot::init_tk"
val_t NEW_TDot_lexer___TDot___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TPlus_parser_nodes___PNode___init();
typedef val_t (* lexer___TPlus___parser_index_t)(val_t  self);
val_t lexer___TPlus___parser_index(val_t  self);
#define LOCATE_lexer___TPlus___parser_index "lexer::TPlus::(lexer::Token::parser_index)"
typedef void (* lexer___TPlus___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TPlus___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TPlus___init_tk "lexer::TPlus::init_tk"
val_t NEW_TPlus_lexer___TPlus___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TMinus_parser_nodes___PNode___init();
typedef val_t (* lexer___TMinus___parser_index_t)(val_t  self);
val_t lexer___TMinus___parser_index(val_t  self);
#define LOCATE_lexer___TMinus___parser_index "lexer::TMinus::(lexer::Token::parser_index)"
typedef void (* lexer___TMinus___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TMinus___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TMinus___init_tk "lexer::TMinus::init_tk"
val_t NEW_TMinus_lexer___TMinus___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TStar_parser_nodes___PNode___init();
typedef val_t (* lexer___TStar___parser_index_t)(val_t  self);
val_t lexer___TStar___parser_index(val_t  self);
#define LOCATE_lexer___TStar___parser_index "lexer::TStar::(lexer::Token::parser_index)"
typedef void (* lexer___TStar___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TStar___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TStar___init_tk "lexer::TStar::init_tk"
val_t NEW_TStar_lexer___TStar___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TSlash_parser_nodes___PNode___init();
typedef val_t (* lexer___TSlash___parser_index_t)(val_t  self);
val_t lexer___TSlash___parser_index(val_t  self);
#define LOCATE_lexer___TSlash___parser_index "lexer::TSlash::(lexer::Token::parser_index)"
typedef void (* lexer___TSlash___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TSlash___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TSlash___init_tk "lexer::TSlash::init_tk"
val_t NEW_TSlash_lexer___TSlash___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TPercent_parser_nodes___PNode___init();
typedef val_t (* lexer___TPercent___parser_index_t)(val_t  self);
val_t lexer___TPercent___parser_index(val_t  self);
#define LOCATE_lexer___TPercent___parser_index "lexer::TPercent::(lexer::Token::parser_index)"
typedef void (* lexer___TPercent___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TPercent___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TPercent___init_tk "lexer::TPercent::init_tk"
val_t NEW_TPercent_lexer___TPercent___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TEq_parser_nodes___PNode___init();
typedef val_t (* lexer___TEq___parser_index_t)(val_t  self);
val_t lexer___TEq___parser_index(val_t  self);
#define LOCATE_lexer___TEq___parser_index "lexer::TEq::(lexer::Token::parser_index)"
typedef void (* lexer___TEq___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TEq___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TEq___init_tk "lexer::TEq::init_tk"
val_t NEW_TEq_lexer___TEq___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TNe_parser_nodes___PNode___init();
typedef val_t (* lexer___TNe___parser_index_t)(val_t  self);
val_t lexer___TNe___parser_index(val_t  self);
#define LOCATE_lexer___TNe___parser_index "lexer::TNe::(lexer::Token::parser_index)"
typedef void (* lexer___TNe___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TNe___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TNe___init_tk "lexer::TNe::init_tk"
val_t NEW_TNe_lexer___TNe___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TLt_parser_nodes___PNode___init();
typedef val_t (* lexer___TLt___parser_index_t)(val_t  self);
val_t lexer___TLt___parser_index(val_t  self);
#define LOCATE_lexer___TLt___parser_index "lexer::TLt::(lexer::Token::parser_index)"
typedef void (* lexer___TLt___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TLt___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TLt___init_tk "lexer::TLt::init_tk"
val_t NEW_TLt_lexer___TLt___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TLe_parser_nodes___PNode___init();
typedef val_t (* lexer___TLe___parser_index_t)(val_t  self);
val_t lexer___TLe___parser_index(val_t  self);
#define LOCATE_lexer___TLe___parser_index "lexer::TLe::(lexer::Token::parser_index)"
typedef void (* lexer___TLe___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TLe___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TLe___init_tk "lexer::TLe::init_tk"
val_t NEW_TLe_lexer___TLe___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TGt_parser_nodes___PNode___init();
typedef val_t (* lexer___TGt___parser_index_t)(val_t  self);
val_t lexer___TGt___parser_index(val_t  self);
#define LOCATE_lexer___TGt___parser_index "lexer::TGt::(lexer::Token::parser_index)"
typedef void (* lexer___TGt___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TGt___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TGt___init_tk "lexer::TGt::init_tk"
val_t NEW_TGt_lexer___TGt___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TGe_parser_nodes___PNode___init();
typedef val_t (* lexer___TGe___parser_index_t)(val_t  self);
val_t lexer___TGe___parser_index(val_t  self);
#define LOCATE_lexer___TGe___parser_index "lexer::TGe::(lexer::Token::parser_index)"
typedef void (* lexer___TGe___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TGe___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TGe___init_tk "lexer::TGe::init_tk"
val_t NEW_TGe_lexer___TGe___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TStarship_parser_nodes___PNode___init();
typedef val_t (* lexer___TStarship___parser_index_t)(val_t  self);
val_t lexer___TStarship___parser_index(val_t  self);
#define LOCATE_lexer___TStarship___parser_index "lexer::TStarship::(lexer::Token::parser_index)"
typedef void (* lexer___TStarship___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___TStarship___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___TStarship___init_tk "lexer::TStarship::init_tk"
val_t NEW_TStarship_lexer___TStarship___init_tk(val_t p0, val_t p1, val_t p2);
val_t NEW_TClassid_parser_nodes___PNode___init();
typedef val_t (* lexer___TClassid___parser_index_t)(val_t  self);
val_t lexer___TClassid___parser_index(val_t  self);
#define LOCATE_lexer___TClassid___parser_index "lexer::TClassid::(lexer::Token::parser_index)"
typedef void (* lexer___TClassid___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TClassid___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TClassid___init_tk "lexer::TClassid::init_tk"
val_t NEW_TClassid_lexer___TClassid___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TId_parser_nodes___PNode___init();
typedef val_t (* lexer___TId___parser_index_t)(val_t  self);
val_t lexer___TId___parser_index(val_t  self);
#define LOCATE_lexer___TId___parser_index "lexer::TId::(lexer::Token::parser_index)"
typedef void (* lexer___TId___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TId___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TId___init_tk "lexer::TId::init_tk"
val_t NEW_TId_lexer___TId___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TAttrid_parser_nodes___PNode___init();
typedef val_t (* lexer___TAttrid___parser_index_t)(val_t  self);
val_t lexer___TAttrid___parser_index(val_t  self);
#define LOCATE_lexer___TAttrid___parser_index "lexer::TAttrid::(lexer::Token::parser_index)"
typedef void (* lexer___TAttrid___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TAttrid___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TAttrid___init_tk "lexer::TAttrid::init_tk"
val_t NEW_TAttrid_lexer___TAttrid___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TNumber_parser_nodes___PNode___init();
typedef val_t (* lexer___TNumber___parser_index_t)(val_t  self);
val_t lexer___TNumber___parser_index(val_t  self);
#define LOCATE_lexer___TNumber___parser_index "lexer::TNumber::(lexer::Token::parser_index)"
typedef void (* lexer___TNumber___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TNumber___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TNumber___init_tk "lexer::TNumber::init_tk"
val_t NEW_TNumber_lexer___TNumber___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TFloat_parser_nodes___PNode___init();
typedef val_t (* lexer___TFloat___parser_index_t)(val_t  self);
val_t lexer___TFloat___parser_index(val_t  self);
#define LOCATE_lexer___TFloat___parser_index "lexer::TFloat::(lexer::Token::parser_index)"
typedef void (* lexer___TFloat___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TFloat___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TFloat___init_tk "lexer::TFloat::init_tk"
val_t NEW_TFloat_lexer___TFloat___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TChar_parser_nodes___PNode___init();
typedef val_t (* lexer___TChar___parser_index_t)(val_t  self);
val_t lexer___TChar___parser_index(val_t  self);
#define LOCATE_lexer___TChar___parser_index "lexer::TChar::(lexer::Token::parser_index)"
typedef void (* lexer___TChar___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TChar___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TChar___init_tk "lexer::TChar::init_tk"
val_t NEW_TChar_lexer___TChar___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TString_parser_nodes___PNode___init();
typedef val_t (* lexer___TString___parser_index_t)(val_t  self);
val_t lexer___TString___parser_index(val_t  self);
#define LOCATE_lexer___TString___parser_index "lexer::TString::(lexer::Token::parser_index)"
typedef void (* lexer___TString___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TString___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TString___init_tk "lexer::TString::init_tk"
val_t NEW_TString_lexer___TString___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TStartString_parser_nodes___PNode___init();
typedef val_t (* lexer___TStartString___parser_index_t)(val_t  self);
val_t lexer___TStartString___parser_index(val_t  self);
#define LOCATE_lexer___TStartString___parser_index "lexer::TStartString::(lexer::Token::parser_index)"
typedef void (* lexer___TStartString___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TStartString___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TStartString___init_tk "lexer::TStartString::init_tk"
val_t NEW_TStartString_lexer___TStartString___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TMidString_parser_nodes___PNode___init();
typedef val_t (* lexer___TMidString___parser_index_t)(val_t  self);
val_t lexer___TMidString___parser_index(val_t  self);
#define LOCATE_lexer___TMidString___parser_index "lexer::TMidString::(lexer::Token::parser_index)"
typedef void (* lexer___TMidString___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TMidString___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TMidString___init_tk "lexer::TMidString::init_tk"
val_t NEW_TMidString_lexer___TMidString___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_TEndString_parser_nodes___PNode___init();
typedef val_t (* lexer___TEndString___parser_index_t)(val_t  self);
val_t lexer___TEndString___parser_index(val_t  self);
#define LOCATE_lexer___TEndString___parser_index "lexer::TEndString::(lexer::Token::parser_index)"
typedef void (* lexer___TEndString___init_tk_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___TEndString___init_tk(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___TEndString___init_tk "lexer::TEndString::init_tk"
val_t NEW_TEndString_lexer___TEndString___init_tk(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_EOF_parser_nodes___EOF___noinit();
typedef val_t (* lexer___EOF___parser_index_t)(val_t  self);
val_t lexer___EOF___parser_index(val_t  self);
#define LOCATE_lexer___EOF___parser_index "lexer::EOF::(lexer::Token::parser_index)"
typedef void (* lexer___EOF___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void lexer___EOF___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_lexer___EOF___init "lexer::EOF::init"
val_t NEW_EOF_lexer___EOF___init(val_t p0, val_t p1, val_t p2);
val_t NEW_PError_parser_nodes___PError___noinit();
#define ATTR_lexer___PError____message(recv) ATTR(recv, COLOR_lexer___PError____message)
typedef val_t (* lexer___PError___message_t)(val_t  self);
val_t lexer___PError___message(val_t  self);
#define LOCATE_lexer___PError___message "lexer::PError::message"
typedef void (* lexer___PError___message__eq_t)(val_t  self, val_t  param0);
void lexer___PError___message__eq(val_t  self, val_t  param0);
#define LOCATE_lexer___PError___message__eq "lexer::PError::message="
typedef void (* lexer___PError___init_error_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void lexer___PError___init_error(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_lexer___PError___init_error "lexer::PError::init_error"
val_t NEW_PError_lexer___PError___init_error(val_t p0, val_t p1, val_t p2, val_t p3);
#define ATTR_lexer___Lexer____token(recv) ATTR(recv, COLOR_lexer___Lexer____token)
#define ATTR_lexer___Lexer____state(recv) ATTR(recv, COLOR_lexer___Lexer____state)
#define ATTR_lexer___Lexer____filename(recv) ATTR(recv, COLOR_lexer___Lexer____filename)
typedef val_t (* lexer___Lexer___filename_t)(val_t  self);
val_t lexer___Lexer___filename(val_t  self);
#define LOCATE_lexer___Lexer___filename "lexer::Lexer::filename"
#define ATTR_lexer___Lexer____stream(recv) ATTR(recv, COLOR_lexer___Lexer____stream)
#define ATTR_lexer___Lexer____stream_buf(recv) ATTR(recv, COLOR_lexer___Lexer____stream_buf)
#define ATTR_lexer___Lexer____stream_pos(recv) ATTR(recv, COLOR_lexer___Lexer____stream_pos)
#define ATTR_lexer___Lexer____line(recv) ATTR(recv, COLOR_lexer___Lexer____line)
#define ATTR_lexer___Lexer____pos(recv) ATTR(recv, COLOR_lexer___Lexer____pos)
#define ATTR_lexer___Lexer____cr(recv) ATTR(recv, COLOR_lexer___Lexer____cr)
#define ATTR_lexer___Lexer____eof(recv) ATTR(recv, COLOR_lexer___Lexer____eof)
#define ATTR_lexer___Lexer____text(recv) ATTR(recv, COLOR_lexer___Lexer____text)
typedef val_t (* lexer___Lexer___state_initial_t)(val_t  self);
val_t lexer___Lexer___state_initial(val_t  self);
#define LOCATE_lexer___Lexer___state_initial "lexer::Lexer::state_initial"
typedef void (* lexer___Lexer___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void lexer___Lexer___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_lexer___Lexer___init "lexer::Lexer::init"
val_t NEW_Lexer_lexer___Lexer___init(val_t p0, val_t p1);
typedef val_t (* lexer___Lexer___peek_t)(val_t  self);
val_t lexer___Lexer___peek(val_t  self);
#define LOCATE_lexer___Lexer___peek "lexer::Lexer::peek"
typedef val_t (* lexer___Lexer___next_t)(val_t  self);
val_t lexer___Lexer___next(val_t  self);
#define LOCATE_lexer___Lexer___next "lexer::Lexer::next"
typedef val_t (* lexer___Lexer___get_token_t)(val_t  self);
val_t lexer___Lexer___get_token(val_t  self);
#define LOCATE_lexer___Lexer___get_token "lexer::Lexer::get_token"
typedef val_t (* lexer___Lexer___get_char_t)(val_t  self);
val_t lexer___Lexer___get_char(val_t  self);
#define LOCATE_lexer___Lexer___get_char "lexer::Lexer::get_char"
typedef void (* lexer___Lexer___push_back_t)(val_t  self, val_t  param0);
void lexer___Lexer___push_back(val_t  self, val_t  param0);
#define LOCATE_lexer___Lexer___push_back "lexer::Lexer::push_back"
#define ATTR_lexer___Lexer____goto_table(recv) ATTR(recv, COLOR_lexer___Lexer____goto_table)
typedef void (* lexer___Lexer___build_goto_table_t)(val_t  self);
void lexer___Lexer___build_goto_table(val_t  self);
#define LOCATE_lexer___Lexer___build_goto_table "lexer::Lexer::build_goto_table"
typedef val_t (* lexer___Lexer___nil_array_t)(val_t  self);
val_t lexer___Lexer___nil_array(val_t  self);
#define LOCATE_lexer___Lexer___nil_array "lexer::Lexer::nil_array"
#define ATTR_lexer___Lexer____accept_table(recv) ATTR(recv, COLOR_lexer___Lexer____accept_table)
typedef void (* lexer___Lexer___build_accept_table_t)(val_t  self);
void lexer___Lexer___build_accept_table(val_t  self);
#define LOCATE_lexer___Lexer___build_accept_table "lexer::Lexer::build_accept_table"
#endif
