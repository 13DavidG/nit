/* This C header file is generated by NIT to compile modules and programs that requires ./../lib/standard/collection/array. */
#ifndef standard___collection___array_sep
#define standard___collection___array_sep
#include "standard___collection___abstract_collection._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_standard___collection___array___AbstractArrayRead[];

extern const classtable_elt_t VFT_standard___collection___array___AbstractArray[];

extern const classtable_elt_t VFT_standard___collection___array___Array[];

extern const classtable_elt_t VFT_standard___collection___array___ArrayIterator[];

extern const classtable_elt_t VFT_standard___collection___array___ArraySet[];

extern const classtable_elt_t VFT_standard___collection___array___ArraySetIterator[];

extern const classtable_elt_t VFT_standard___collection___array___ArrayMap[];

extern const classtable_elt_t VFT_standard___collection___array___ArrayMapKeys[];

extern const classtable_elt_t VFT_standard___collection___array___ArrayMapValues[];

extern const classtable_elt_t VFT_standard___collection___array___ArrayCapable[];

extern const classtable_elt_t VFT_standard___collection___array___NativeArray[];
extern const char *LOCATE_standard___collection___array;
extern const int SFT_standard___collection___array[];
#define ID_standard___collection___array___AbstractArrayRead (SFT_standard___collection___array[0])
#define COLOR_standard___collection___array___AbstractArrayRead (SFT_standard___collection___array[1])
#define ATTR_standard___collection___array___AbstractArrayRead____length(recv) ATTR(recv, (SFT_standard___collection___array[2] + 0))
#define INIT_TABLE_POS_standard___collection___array___AbstractArrayRead (SFT_standard___collection___array[3] + 0)
#define CALL_standard___collection___array___AbstractArrayRead___last_index_of(recv) ((standard___collection___array___AbstractArrayRead___last_index_of_t)CALL((recv), (SFT_standard___collection___array[3] + 1)))
#define CALL_standard___collection___array___AbstractArrayRead___index_of_from(recv) ((standard___collection___array___AbstractArrayRead___index_of_from_t)CALL((recv), (SFT_standard___collection___array[3] + 2)))
#define CALL_standard___collection___array___AbstractArrayRead___last_index_of_from(recv) ((standard___collection___array___AbstractArrayRead___last_index_of_from_t)CALL((recv), (SFT_standard___collection___array[3] + 3)))
#define CALL_standard___collection___array___AbstractArrayRead___reversed(recv) ((standard___collection___array___AbstractArrayRead___reversed_t)CALL((recv), (SFT_standard___collection___array[3] + 4)))
#define CALL_standard___collection___array___AbstractArrayRead___copy_to(recv) ((standard___collection___array___AbstractArrayRead___copy_to_t)CALL((recv), (SFT_standard___collection___array[3] + 5)))
#define CALL_standard___collection___array___AbstractArrayRead___init(recv) ((standard___collection___array___AbstractArrayRead___init_t)CALL((recv), (SFT_standard___collection___array[3] + 6)))
#define ID_standard___collection___array___AbstractArray (SFT_standard___collection___array[4])
#define COLOR_standard___collection___array___AbstractArray (SFT_standard___collection___array[5])
#define INIT_TABLE_POS_standard___collection___array___AbstractArray (SFT_standard___collection___array[6] + 0)
#define CALL_standard___collection___array___AbstractArray___enlarge(recv) ((standard___collection___array___AbstractArray___enlarge_t)CALL((recv), (SFT_standard___collection___array[6] + 1)))
#define CALL_standard___collection___array___AbstractArray___insert(recv) ((standard___collection___array___AbstractArray___insert_t)CALL((recv), (SFT_standard___collection___array[6] + 2)))
#define CALL_standard___collection___array___AbstractArray___swap_at(recv) ((standard___collection___array___AbstractArray___swap_at_t)CALL((recv), (SFT_standard___collection___array[6] + 3)))
#define ID_standard___collection___array___Array (SFT_standard___collection___array[7])
#define COLOR_standard___collection___array___Array (SFT_standard___collection___array[8])
#define ATTR_standard___collection___array___Array____items(recv) ATTR(recv, (SFT_standard___collection___array[9] + 0))
#define ATTR_standard___collection___array___Array____capacity(recv) ATTR(recv, (SFT_standard___collection___array[9] + 1))
#define INIT_TABLE_POS_standard___collection___array___Array (SFT_standard___collection___array[10] + 0)
#define CALL_standard___collection___array___Array___init(recv) ((standard___collection___array___Array___init_t)CALL((recv), (SFT_standard___collection___array[10] + 1)))
#define CALL_standard___collection___array___Array___with_items(recv) ((standard___collection___array___Array___with_items_t)CALL((recv), (SFT_standard___collection___array[10] + 2)))
#define CALL_standard___collection___array___Array___with_capacity(recv) ((standard___collection___array___Array___with_capacity_t)CALL((recv), (SFT_standard___collection___array[10] + 3)))
#define CALL_standard___collection___array___Array___filled_with(recv) ((standard___collection___array___Array___filled_with_t)CALL((recv), (SFT_standard___collection___array[10] + 4)))
#define CALL_standard___collection___array___Array___with_native(recv) ((standard___collection___array___Array___with_native_t)CALL((recv), (SFT_standard___collection___array[10] + 5)))
#define CALL_standard___collection___array___Array___intern_items(recv) ((standard___collection___array___Array___intern_items_t)CALL((recv), (SFT_standard___collection___array[10] + 6)))
#define CALL_standard___collection___array___Array___sort(recv) ((standard___collection___array___Array___sort_t)CALL((recv), (SFT_standard___collection___array[10] + 7)))
#define CALL_standard___collection___array___Array___sub_sort(recv) ((standard___collection___array___Array___sub_sort_t)CALL((recv), (SFT_standard___collection___array[10] + 8)))
#define ID_standard___collection___array___ArrayIterator (SFT_standard___collection___array[11])
#define COLOR_standard___collection___array___ArrayIterator (SFT_standard___collection___array[12])
#define ATTR_standard___collection___array___ArrayIterator____index(recv) ATTR(recv, (SFT_standard___collection___array[13] + 0))
#define ATTR_standard___collection___array___ArrayIterator____array(recv) ATTR(recv, (SFT_standard___collection___array[13] + 1))
#define INIT_TABLE_POS_standard___collection___array___ArrayIterator (SFT_standard___collection___array[14] + 0)
#define CALL_standard___collection___array___ArrayIterator___init(recv) ((standard___collection___array___ArrayIterator___init_t)CALL((recv), (SFT_standard___collection___array[14] + 1)))
#define ID_standard___collection___array___ArraySet (SFT_standard___collection___array[15])
#define COLOR_standard___collection___array___ArraySet (SFT_standard___collection___array[16])
#define ATTR_standard___collection___array___ArraySet____array(recv) ATTR(recv, (SFT_standard___collection___array[17] + 0))
#define INIT_TABLE_POS_standard___collection___array___ArraySet (SFT_standard___collection___array[18] + 0)
#define CALL_standard___collection___array___ArraySet___enlarge(recv) ((standard___collection___array___ArraySet___enlarge_t)CALL((recv), (SFT_standard___collection___array[18] + 1)))
#define CALL_standard___collection___array___ArraySet___remove_at(recv) ((standard___collection___array___ArraySet___remove_at_t)CALL((recv), (SFT_standard___collection___array[18] + 2)))
#define CALL_standard___collection___array___ArraySet___init(recv) ((standard___collection___array___ArraySet___init_t)CALL((recv), (SFT_standard___collection___array[18] + 3)))
#define CALL_standard___collection___array___ArraySet___with_capacity(recv) ((standard___collection___array___ArraySet___with_capacity_t)CALL((recv), (SFT_standard___collection___array[18] + 4)))
#define ID_standard___collection___array___ArraySetIterator (SFT_standard___collection___array[19])
#define COLOR_standard___collection___array___ArraySetIterator (SFT_standard___collection___array[20])
#define ATTR_standard___collection___array___ArraySetIterator____iter(recv) ATTR(recv, (SFT_standard___collection___array[21] + 0))
#define INIT_TABLE_POS_standard___collection___array___ArraySetIterator (SFT_standard___collection___array[22] + 0)
#define CALL_standard___collection___array___ArraySetIterator___init(recv) ((standard___collection___array___ArraySetIterator___init_t)CALL((recv), (SFT_standard___collection___array[22] + 1)))
#define ID_standard___collection___array___ArrayMap (SFT_standard___collection___array[23])
#define COLOR_standard___collection___array___ArrayMap (SFT_standard___collection___array[24])
#define ATTR_standard___collection___array___ArrayMap_____atkeys(recv) ATTR(recv, (SFT_standard___collection___array[25] + 0))
#define ATTR_standard___collection___array___ArrayMap_____atvalues(recv) ATTR(recv, (SFT_standard___collection___array[25] + 1))
#define ATTR_standard___collection___array___ArrayMap____items(recv) ATTR(recv, (SFT_standard___collection___array[25] + 2))
#define ATTR_standard___collection___array___ArrayMap____last_index(recv) ATTR(recv, (SFT_standard___collection___array[25] + 3))
#define INIT_TABLE_POS_standard___collection___array___ArrayMap (SFT_standard___collection___array[26] + 0)
#define CALL_standard___collection___array___ArrayMap___keys__eq(recv) ((standard___collection___array___ArrayMap___keys__eq_t)CALL((recv), (SFT_standard___collection___array[26] + 1)))
#define CALL_standard___collection___array___ArrayMap___values__eq(recv) ((standard___collection___array___ArrayMap___values__eq_t)CALL((recv), (SFT_standard___collection___array[26] + 2)))
#define CALL_standard___collection___array___ArrayMap___enlarge(recv) ((standard___collection___array___ArrayMap___enlarge_t)CALL((recv), (SFT_standard___collection___array[26] + 3)))
#define CALL_standard___collection___array___ArrayMap___remove_at_index(recv) ((standard___collection___array___ArrayMap___remove_at_index_t)CALL((recv), (SFT_standard___collection___array[26] + 4)))
#define CALL_standard___collection___array___ArrayMap___index(recv) ((standard___collection___array___ArrayMap___index_t)CALL((recv), (SFT_standard___collection___array[26] + 5)))
#define CALL_standard___collection___array___ArrayMap___init(recv) ((standard___collection___array___ArrayMap___init_t)CALL((recv), (SFT_standard___collection___array[26] + 6)))
#define ID_standard___collection___array___ArrayMapKeys (SFT_standard___collection___array[27])
#define COLOR_standard___collection___array___ArrayMapKeys (SFT_standard___collection___array[28])
#define ATTR_standard___collection___array___ArrayMapKeys_____atmap(recv) ATTR(recv, (SFT_standard___collection___array[29] + 0))
#define INIT_TABLE_POS_standard___collection___array___ArrayMapKeys (SFT_standard___collection___array[30] + 0)
#define CALL_standard___collection___array___ArrayMapKeys___map(recv) ((standard___collection___array___ArrayMapKeys___map_t)CALL((recv), (SFT_standard___collection___array[30] + 1)))
#define CALL_standard___collection___array___ArrayMapKeys___map__eq(recv) ((standard___collection___array___ArrayMapKeys___map__eq_t)CALL((recv), (SFT_standard___collection___array[30] + 2)))
#define CALL_standard___collection___array___ArrayMapKeys___init(recv) ((standard___collection___array___ArrayMapKeys___init_t)CALL((recv), (SFT_standard___collection___array[30] + 3)))
#define ID_standard___collection___array___ArrayMapValues (SFT_standard___collection___array[31])
#define COLOR_standard___collection___array___ArrayMapValues (SFT_standard___collection___array[32])
#define ATTR_standard___collection___array___ArrayMapValues_____atmap(recv) ATTR(recv, (SFT_standard___collection___array[33] + 0))
#define INIT_TABLE_POS_standard___collection___array___ArrayMapValues (SFT_standard___collection___array[34] + 0)
#define CALL_standard___collection___array___ArrayMapValues___map(recv) ((standard___collection___array___ArrayMapValues___map_t)CALL((recv), (SFT_standard___collection___array[34] + 1)))
#define CALL_standard___collection___array___ArrayMapValues___map__eq(recv) ((standard___collection___array___ArrayMapValues___map__eq_t)CALL((recv), (SFT_standard___collection___array[34] + 2)))
#define CALL_standard___collection___array___ArrayMapValues___init(recv) ((standard___collection___array___ArrayMapValues___init_t)CALL((recv), (SFT_standard___collection___array[34] + 3)))
#define CALL_standard___collection___array___Iterator___to_a(recv) ((standard___collection___array___Iterator___to_a_t)CALL((recv), (SFT_standard___collection___array[35] + 0)))
#define CALL_standard___collection___array___Collection___to_a(recv) ((standard___collection___array___Collection___to_a_t)CALL((recv), (SFT_standard___collection___array[36] + 0)))
#define ID_standard___collection___array___ArrayCapable (SFT_standard___collection___array[37])
#define COLOR_standard___collection___array___ArrayCapable (SFT_standard___collection___array[38])
#define INIT_TABLE_POS_standard___collection___array___ArrayCapable (SFT_standard___collection___array[39] + 0)
#define CALL_standard___collection___array___ArrayCapable___calloc_array(recv) ((standard___collection___array___ArrayCapable___calloc_array_t)CALL((recv), (SFT_standard___collection___array[39] + 1)))
#define ID_standard___collection___array___NativeArray (SFT_standard___collection___array[40])
#define COLOR_standard___collection___array___NativeArray (SFT_standard___collection___array[41])
#define INIT_TABLE_POS_standard___collection___array___NativeArray (SFT_standard___collection___array[42] + 0)
#define CALL_standard___collection___array___NativeArray_____bra(recv) ((standard___collection___array___NativeArray_____bra_t)CALL((recv), (SFT_standard___collection___array[42] + 1)))
#define CALL_standard___collection___array___NativeArray_____braeq(recv) ((standard___collection___array___NativeArray_____braeq_t)CALL((recv), (SFT_standard___collection___array[42] + 2)))
#define CALL_standard___collection___array___NativeArray___copy_to(recv) ((standard___collection___array___NativeArray___copy_to_t)CALL((recv), (SFT_standard___collection___array[42] + 3)))
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___length = "array::AbstractArrayRead::(abstract_collection::Collection::length)";
val_t standard___collection___array___AbstractArrayRead___length(val_t p0);
typedef val_t (*standard___collection___array___AbstractArrayRead___length_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___is_empty = "array::AbstractArrayRead::(abstract_collection::Collection::is_empty)";
val_t standard___collection___array___AbstractArrayRead___is_empty(val_t p0);
typedef val_t (*standard___collection___array___AbstractArrayRead___is_empty_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___has = "array::AbstractArrayRead::(abstract_collection::Collection::has)";
val_t standard___collection___array___AbstractArrayRead___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___AbstractArrayRead___has_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___has_only = "array::AbstractArrayRead::(abstract_collection::Collection::has_only)";
val_t standard___collection___array___AbstractArrayRead___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___AbstractArrayRead___has_only_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___count = "array::AbstractArrayRead::(abstract_collection::Collection::count)";
val_t standard___collection___array___AbstractArrayRead___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___AbstractArrayRead___count_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___index_of = "array::AbstractArrayRead::(abstract_collection::SequenceRead::index_of)";
val_t standard___collection___array___AbstractArrayRead___index_of(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___AbstractArrayRead___index_of_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___last_index_of = "array::AbstractArrayRead::last_index_of";
val_t standard___collection___array___AbstractArrayRead___last_index_of(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___AbstractArrayRead___last_index_of_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___index_of_from = "array::AbstractArrayRead::index_of_from";
val_t standard___collection___array___AbstractArrayRead___index_of_from(val_t p0, val_t p1, val_t p2);
typedef val_t (*standard___collection___array___AbstractArrayRead___index_of_from_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___last_index_of_from = "array::AbstractArrayRead::last_index_of_from";
val_t standard___collection___array___AbstractArrayRead___last_index_of_from(val_t p0, val_t p1, val_t p2);
typedef val_t (*standard___collection___array___AbstractArrayRead___last_index_of_from_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___reversed = "array::AbstractArrayRead::reversed";
val_t standard___collection___array___AbstractArrayRead___reversed(val_t p0);
typedef val_t (*standard___collection___array___AbstractArrayRead___reversed_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___copy_to = "array::AbstractArrayRead::copy_to";
void standard___collection___array___AbstractArrayRead___copy_to(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef void (*standard___collection___array___AbstractArrayRead___copy_to_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___output = "array::AbstractArrayRead::(kernel::Object::output)";
void standard___collection___array___AbstractArrayRead___output(val_t p0);
typedef void (*standard___collection___array___AbstractArrayRead___output_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___iterator = "array::AbstractArrayRead::(abstract_collection::Collection::iterator)";
val_t standard___collection___array___AbstractArrayRead___iterator(val_t p0);
typedef val_t (*standard___collection___array___AbstractArrayRead___iterator_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead_____eqeq = "array::AbstractArrayRead::(kernel::Object::==)";
val_t standard___collection___array___AbstractArrayRead_____eqeq(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___AbstractArrayRead_____eqeq_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArrayRead___init = "array::AbstractArrayRead::init";
void standard___collection___array___AbstractArrayRead___init(val_t p0, int* init_table);
typedef void (*standard___collection___array___AbstractArrayRead___init_t)(val_t p0, int* init_table);
val_t NEW_AbstractArrayRead_standard___collection___array___AbstractArrayRead___init();
static const char * const LOCATE_standard___collection___array___AbstractArray___enlarge = "array::AbstractArray::enlarge";
void standard___collection___array___AbstractArray___enlarge(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___enlarge_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___push = "array::AbstractArray::(abstract_collection::Sequence::push)";
void standard___collection___array___AbstractArray___push(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___push_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___pop = "array::AbstractArray::(abstract_collection::Sequence::pop)";
val_t standard___collection___array___AbstractArray___pop(val_t p0);
typedef val_t (*standard___collection___array___AbstractArray___pop_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArray___shift = "array::AbstractArray::(abstract_collection::Sequence::shift)";
val_t standard___collection___array___AbstractArray___shift(val_t p0);
typedef val_t (*standard___collection___array___AbstractArray___shift_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArray___unshift = "array::AbstractArray::(abstract_collection::Sequence::unshift)";
void standard___collection___array___AbstractArray___unshift(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___unshift_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___insert = "array::AbstractArray::insert";
void standard___collection___array___AbstractArray___insert(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___array___AbstractArray___insert_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_standard___collection___array___AbstractArray___add = "array::AbstractArray::(abstract_collection::SimpleCollection::add)";
void standard___collection___array___AbstractArray___add(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___add_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___clear = "array::AbstractArray::(abstract_collection::RemovableCollection::clear)";
void standard___collection___array___AbstractArray___clear(val_t p0);
typedef void (*standard___collection___array___AbstractArray___clear_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___AbstractArray___remove = "array::AbstractArray::(abstract_collection::RemovableCollection::remove)";
void standard___collection___array___AbstractArray___remove(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___remove_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___remove_all = "array::AbstractArray::(abstract_collection::RemovableCollection::remove_all)";
void standard___collection___array___AbstractArray___remove_all(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___remove_all_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___remove_at = "array::AbstractArray::(abstract_collection::Sequence::remove_at)";
void standard___collection___array___AbstractArray___remove_at(val_t p0, val_t p1);
typedef void (*standard___collection___array___AbstractArray___remove_at_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___AbstractArray___swap_at = "array::AbstractArray::swap_at";
void standard___collection___array___AbstractArray___swap_at(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___array___AbstractArray___swap_at_t)(val_t p0, val_t p1, val_t p2);
val_t NEW_AbstractArray_standard___collection___array___AbstractArrayRead___init();
typedef void (*CLOS_standard___collection___array___Array___iterate_0)(struct stack_frame_t *, val_t);
static const char * const LOCATE_standard___collection___array___Array___iterate = "array::Array::(abstract_collection::Collection::iterate)";
void standard___collection___array___Array___iterate(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
typedef void (*standard___collection___array___Array___iterate_t)(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
static const char * const LOCATE_standard___collection___array___Array_____bra = "array::Array::(abstract_collection::SequenceRead::[])";
val_t standard___collection___array___Array_____bra(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___Array_____bra_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___Array_____braeq = "array::Array::(abstract_collection::Sequence::[]=)";
void standard___collection___array___Array_____braeq(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___array___Array_____braeq_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_standard___collection___array___Array___add = "array::Array::(abstract_collection::SimpleCollection::add)";
void standard___collection___array___Array___add(val_t p0, val_t p1);
typedef void (*standard___collection___array___Array___add_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___Array___enlarge = "array::Array::(array::AbstractArray::enlarge)";
void standard___collection___array___Array___enlarge(val_t p0, val_t p1);
typedef void (*standard___collection___array___Array___enlarge_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___Array___init = "array::Array::init";
void standard___collection___array___Array___init(val_t p0, int* init_table);
typedef void (*standard___collection___array___Array___init_t)(val_t p0, int* init_table);
val_t NEW_Array_standard___collection___array___Array___init();
static const char * const LOCATE_standard___collection___array___Array___with_items = "array::Array::with_items";
void standard___collection___array___Array___with_items(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___Array___with_items_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Array_standard___collection___array___Array___with_items(val_t p0);
static const char * const LOCATE_standard___collection___array___Array___with_capacity = "array::Array::with_capacity";
void standard___collection___array___Array___with_capacity(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___Array___with_capacity_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_Array_standard___collection___array___Array___with_capacity(val_t p0);
static const char * const LOCATE_standard___collection___array___Array___filled_with = "array::Array::filled_with";
void standard___collection___array___Array___filled_with(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*standard___collection___array___Array___filled_with_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Array_standard___collection___array___Array___filled_with(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___Array___with_native = "array::Array::with_native";
void standard___collection___array___Array___with_native(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*standard___collection___array___Array___with_native_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Array_standard___collection___array___Array___with_native(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___Array___intern_items = "array::Array::intern_items";
val_t standard___collection___array___Array___intern_items(val_t p0);
typedef val_t (*standard___collection___array___Array___intern_items_t)(val_t p0);
typedef val_t (*CLOS_standard___collection___array___Array___sort_0)(struct stack_frame_t *, val_t, val_t);
static const char * const LOCATE_standard___collection___array___Array___sort = "array::Array::sort";
void standard___collection___array___Array___sort(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
typedef void (*standard___collection___array___Array___sort_t)(val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  val_t OC_standard___collection___array___Array___sort_1(struct stack_frame_t *closctx, val_t p0, val_t p1);
  typedef val_t (*OC_standard___collection___array___Array___sort_1_t)(struct stack_frame_t *closctx, val_t p0, val_t p1);
typedef val_t (*CLOS_standard___collection___array___Array___sub_sort_0)(struct stack_frame_t *, val_t, val_t);
static const char * const LOCATE_standard___collection___array___Array___sub_sort = "array::Array::sub_sort";
void standard___collection___array___Array___sub_sort(val_t p0, val_t p1, val_t p2, struct stack_frame_t *closctx_param, fun_t clos_fun0);
typedef void (*standard___collection___array___Array___sub_sort_t)(val_t p0, val_t p1, val_t p2, struct stack_frame_t *closctx_param, fun_t clos_fun0);
      val_t OC_standard___collection___array___Array___sub_sort_11(struct stack_frame_t *closctx, val_t p0, val_t p1);
      typedef val_t (*OC_standard___collection___array___Array___sub_sort_11_t)(struct stack_frame_t *closctx, val_t p0, val_t p1);
      val_t OC_standard___collection___array___Array___sub_sort_13(struct stack_frame_t *closctx, val_t p0, val_t p1);
      typedef val_t (*OC_standard___collection___array___Array___sub_sort_13_t)(struct stack_frame_t *closctx, val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayIterator___item = "array::ArrayIterator::(abstract_collection::Iterator::item)";
val_t standard___collection___array___ArrayIterator___item(val_t p0);
typedef val_t (*standard___collection___array___ArrayIterator___item_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayIterator___is_ok = "array::ArrayIterator::(abstract_collection::Iterator::is_ok)";
val_t standard___collection___array___ArrayIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___array___ArrayIterator___is_ok_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayIterator___next = "array::ArrayIterator::(abstract_collection::Iterator::next)";
void standard___collection___array___ArrayIterator___next(val_t p0);
typedef void (*standard___collection___array___ArrayIterator___next_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayIterator___init = "array::ArrayIterator::init";
void standard___collection___array___ArrayIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___ArrayIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ArrayIterator_standard___collection___array___ArrayIterator___init(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayIterator___index = "array::ArrayIterator::(abstract_collection::IndexedIterator::index)";
val_t standard___collection___array___ArrayIterator___index(val_t p0);
typedef val_t (*standard___collection___array___ArrayIterator___index_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySet___has = "array::ArraySet::(abstract_collection::Collection::has)";
val_t standard___collection___array___ArraySet___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArraySet___has_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArraySet___add = "array::ArraySet::(abstract_collection::SimpleCollection::add)";
void standard___collection___array___ArraySet___add(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArraySet___add_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArraySet___is_empty = "array::ArraySet::(abstract_collection::Collection::is_empty)";
val_t standard___collection___array___ArraySet___is_empty(val_t p0);
typedef val_t (*standard___collection___array___ArraySet___is_empty_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySet___length = "array::ArraySet::(abstract_collection::Collection::length)";
val_t standard___collection___array___ArraySet___length(val_t p0);
typedef val_t (*standard___collection___array___ArraySet___length_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySet___first = "array::ArraySet::(abstract_collection::Collection::first)";
val_t standard___collection___array___ArraySet___first(val_t p0);
typedef val_t (*standard___collection___array___ArraySet___first_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySet___remove = "array::ArraySet::(abstract_collection::RemovableCollection::remove)";
void standard___collection___array___ArraySet___remove(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArraySet___remove_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArraySet___remove_all = "array::ArraySet::(abstract_collection::RemovableCollection::remove_all)";
void standard___collection___array___ArraySet___remove_all(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArraySet___remove_all_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArraySet___clear = "array::ArraySet::(abstract_collection::RemovableCollection::clear)";
void standard___collection___array___ArraySet___clear(val_t p0);
typedef void (*standard___collection___array___ArraySet___clear_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySet___iterator = "array::ArraySet::(abstract_collection::Collection::iterator)";
val_t standard___collection___array___ArraySet___iterator(val_t p0);
typedef val_t (*standard___collection___array___ArraySet___iterator_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySet___enlarge = "array::ArraySet::enlarge";
void standard___collection___array___ArraySet___enlarge(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArraySet___enlarge_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArraySet___remove_at = "array::ArraySet::remove_at";
void standard___collection___array___ArraySet___remove_at(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArraySet___remove_at_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArraySet___init = "array::ArraySet::init";
void standard___collection___array___ArraySet___init(val_t p0, int* init_table);
typedef void (*standard___collection___array___ArraySet___init_t)(val_t p0, int* init_table);
val_t NEW_ArraySet_standard___collection___array___ArraySet___init();
static const char * const LOCATE_standard___collection___array___ArraySet___with_capacity = "array::ArraySet::with_capacity";
void standard___collection___array___ArraySet___with_capacity(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___ArraySet___with_capacity_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ArraySet_standard___collection___array___ArraySet___with_capacity(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySetIterator___is_ok = "array::ArraySetIterator::(abstract_collection::Iterator::is_ok)";
val_t standard___collection___array___ArraySetIterator___is_ok(val_t p0);
typedef val_t (*standard___collection___array___ArraySetIterator___is_ok_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySetIterator___next = "array::ArraySetIterator::(abstract_collection::Iterator::next)";
void standard___collection___array___ArraySetIterator___next(val_t p0);
typedef void (*standard___collection___array___ArraySetIterator___next_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySetIterator___item = "array::ArraySetIterator::(abstract_collection::Iterator::item)";
val_t standard___collection___array___ArraySetIterator___item(val_t p0);
typedef val_t (*standard___collection___array___ArraySetIterator___item_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArraySetIterator___init = "array::ArraySetIterator::init";
void standard___collection___array___ArraySetIterator___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___ArraySetIterator___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ArraySetIterator_standard___collection___array___ArraySetIterator___init(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap_____bra = "array::ArrayMap::(abstract_collection::MapRead::[])";
val_t standard___collection___array___ArrayMap_____bra(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMap_____bra_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap_____braeq = "array::ArrayMap::(abstract_collection::Map::[]=)";
void standard___collection___array___ArrayMap_____braeq(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___array___ArrayMap_____braeq_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_standard___collection___array___ArrayMap___keys = "array::ArrayMap::(abstract_collection::MapRead::keys)";
val_t standard___collection___array___ArrayMap___keys(val_t p0);
typedef val_t (*standard___collection___array___ArrayMap___keys_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap___keys__eq = "array::ArrayMap::keys=";
void standard___collection___array___ArrayMap___keys__eq(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMap___keys__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap___values = "array::ArrayMap::(abstract_collection::MapRead::values)";
val_t standard___collection___array___ArrayMap___values(val_t p0);
typedef val_t (*standard___collection___array___ArrayMap___values_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap___values__eq = "array::ArrayMap::values=";
void standard___collection___array___ArrayMap___values__eq(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMap___values__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap___length = "array::ArrayMap::(abstract_collection::MapRead::length)";
val_t standard___collection___array___ArrayMap___length(val_t p0);
typedef val_t (*standard___collection___array___ArrayMap___length_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap___iterator = "array::ArrayMap::(abstract_collection::MapRead::iterator)";
val_t standard___collection___array___ArrayMap___iterator(val_t p0);
typedef val_t (*standard___collection___array___ArrayMap___iterator_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap___is_empty = "array::ArrayMap::(abstract_collection::MapRead::is_empty)";
val_t standard___collection___array___ArrayMap___is_empty(val_t p0);
typedef val_t (*standard___collection___array___ArrayMap___is_empty_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap___clear = "array::ArrayMap::(abstract_collection::Map::clear)";
void standard___collection___array___ArrayMap___clear(val_t p0);
typedef void (*standard___collection___array___ArrayMap___clear_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMap___enlarge = "array::ArrayMap::enlarge";
void standard___collection___array___ArrayMap___enlarge(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMap___enlarge_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap___couple_at = "array::ArrayMap::(abstract_collection::CoupleMap::couple_at)";
val_t standard___collection___array___ArrayMap___couple_at(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMap___couple_at_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap___remove_at_index = "array::ArrayMap::remove_at_index";
void standard___collection___array___ArrayMap___remove_at_index(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMap___remove_at_index_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap___index = "array::ArrayMap::index";
val_t standard___collection___array___ArrayMap___index(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMap___index_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMap___init = "array::ArrayMap::init";
void standard___collection___array___ArrayMap___init(val_t p0, int* init_table);
typedef void (*standard___collection___array___ArrayMap___init_t)(val_t p0, int* init_table);
val_t NEW_ArrayMap_standard___collection___array___ArrayMap___init();
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___map = "array::ArrayMapKeys::map";
val_t standard___collection___array___ArrayMapKeys___map(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapKeys___map_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___map__eq = "array::ArrayMapKeys::map=";
void standard___collection___array___ArrayMapKeys___map__eq(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMapKeys___map__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___count = "array::ArrayMapKeys::(abstract_collection::Collection::count)";
val_t standard___collection___array___ArrayMapKeys___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMapKeys___count_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___first = "array::ArrayMapKeys::(abstract_collection::Collection::first)";
val_t standard___collection___array___ArrayMapKeys___first(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapKeys___first_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___has = "array::ArrayMapKeys::(abstract_collection::Collection::has)";
val_t standard___collection___array___ArrayMapKeys___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMapKeys___has_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___has_only = "array::ArrayMapKeys::(abstract_collection::Collection::has_only)";
val_t standard___collection___array___ArrayMapKeys___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMapKeys___has_only_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___is_empty = "array::ArrayMapKeys::(abstract_collection::Collection::is_empty)";
val_t standard___collection___array___ArrayMapKeys___is_empty(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapKeys___is_empty_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___length = "array::ArrayMapKeys::(abstract_collection::Collection::length)";
val_t standard___collection___array___ArrayMapKeys___length(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapKeys___length_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___iterator = "array::ArrayMapKeys::(abstract_collection::Collection::iterator)";
val_t standard___collection___array___ArrayMapKeys___iterator(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapKeys___iterator_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___clear = "array::ArrayMapKeys::(abstract_collection::RemovableCollection::clear)";
void standard___collection___array___ArrayMapKeys___clear(val_t p0);
typedef void (*standard___collection___array___ArrayMapKeys___clear_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___remove = "array::ArrayMapKeys::(abstract_collection::RemovableCollection::remove)";
void standard___collection___array___ArrayMapKeys___remove(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMapKeys___remove_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___remove_all = "array::ArrayMapKeys::(abstract_collection::RemovableCollection::remove_all)";
void standard___collection___array___ArrayMapKeys___remove_all(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMapKeys___remove_all_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapKeys___init = "array::ArrayMapKeys::init";
void standard___collection___array___ArrayMapKeys___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___ArrayMapKeys___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ArrayMapKeys_standard___collection___array___ArrayMapKeys___init(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___map = "array::ArrayMapValues::map";
val_t standard___collection___array___ArrayMapValues___map(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapValues___map_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___map__eq = "array::ArrayMapValues::map=";
void standard___collection___array___ArrayMapValues___map__eq(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMapValues___map__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___first = "array::ArrayMapValues::(abstract_collection::Collection::first)";
val_t standard___collection___array___ArrayMapValues___first(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapValues___first_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___is_empty = "array::ArrayMapValues::(abstract_collection::Collection::is_empty)";
val_t standard___collection___array___ArrayMapValues___is_empty(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapValues___is_empty_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___length = "array::ArrayMapValues::(abstract_collection::Collection::length)";
val_t standard___collection___array___ArrayMapValues___length(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapValues___length_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___iterator = "array::ArrayMapValues::(abstract_collection::Collection::iterator)";
val_t standard___collection___array___ArrayMapValues___iterator(val_t p0);
typedef val_t (*standard___collection___array___ArrayMapValues___iterator_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___has = "array::ArrayMapValues::(abstract_collection::Collection::has)";
val_t standard___collection___array___ArrayMapValues___has(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMapValues___has_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___has_only = "array::ArrayMapValues::(abstract_collection::Collection::has_only)";
val_t standard___collection___array___ArrayMapValues___has_only(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMapValues___has_only_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___count = "array::ArrayMapValues::(abstract_collection::Collection::count)";
val_t standard___collection___array___ArrayMapValues___count(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayMapValues___count_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___clear = "array::ArrayMapValues::(abstract_collection::RemovableCollection::clear)";
void standard___collection___array___ArrayMapValues___clear(val_t p0);
typedef void (*standard___collection___array___ArrayMapValues___clear_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___remove = "array::ArrayMapValues::(abstract_collection::RemovableCollection::remove)";
void standard___collection___array___ArrayMapValues___remove(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMapValues___remove_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___remove_all = "array::ArrayMapValues::(abstract_collection::RemovableCollection::remove_all)";
void standard___collection___array___ArrayMapValues___remove_all(val_t p0, val_t p1);
typedef void (*standard___collection___array___ArrayMapValues___remove_all_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___ArrayMapValues___init = "array::ArrayMapValues::init";
void standard___collection___array___ArrayMapValues___init(val_t p0, val_t p1, int* init_table);
typedef void (*standard___collection___array___ArrayMapValues___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ArrayMapValues_standard___collection___array___ArrayMapValues___init(val_t p0);
static const char * const LOCATE_standard___collection___array___Iterator___to_a = "array::Iterator::to_a";
val_t standard___collection___array___Iterator___to_a(val_t p0);
typedef val_t (*standard___collection___array___Iterator___to_a_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___Collection___to_a = "array::Collection::to_a";
val_t standard___collection___array___Collection___to_a(val_t p0);
typedef val_t (*standard___collection___array___Collection___to_a_t)(val_t p0);
static const char * const LOCATE_standard___collection___array___ArrayCapable___calloc_array = "array::ArrayCapable::calloc_array";
val_t standard___collection___array___ArrayCapable___calloc_array(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___ArrayCapable___calloc_array_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___NativeArray_____bra = "array::NativeArray::[]";
val_t standard___collection___array___NativeArray_____bra(val_t p0, val_t p1);
typedef val_t (*standard___collection___array___NativeArray_____bra_t)(val_t p0, val_t p1);
static const char * const LOCATE_standard___collection___array___NativeArray_____braeq = "array::NativeArray::[]=";
void standard___collection___array___NativeArray_____braeq(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___array___NativeArray_____braeq_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_standard___collection___array___NativeArray___copy_to = "array::NativeArray::copy_to";
void standard___collection___array___NativeArray___copy_to(val_t p0, val_t p1, val_t p2);
typedef void (*standard___collection___array___NativeArray___copy_to_t)(val_t p0, val_t p1, val_t p2);
#endif
