/* This C header file is generated by NIT to compile modules and programs that requires src/analysis/cha_analysis. */
#ifndef analysis___cha_analysis_sep
#define analysis___cha_analysis_sep
#include "analysis___reachable_method_analysis._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_analysis___cha_analysis___ChaContext[];

extern const classtable_elt_t VFT_analysis___cha_analysis___ChaBuilder[];

extern const classtable_elt_t VFT_analysis___cha_analysis___ChaVisitor[];
extern const char *LOCATE_analysis___cha_analysis;
extern const int SFT_analysis___cha_analysis[];
#define ID_analysis___cha_analysis___ChaContext (SFT_analysis___cha_analysis[0])
#define COLOR_analysis___cha_analysis___ChaContext (SFT_analysis___cha_analysis[1])
#define ATTR_analysis___cha_analysis___ChaContext____reachable_iroutines(recv) ATTR(recv, (SFT_analysis___cha_analysis[2] + 0))
#define INIT_TABLE_POS_analysis___cha_analysis___ChaContext (SFT_analysis___cha_analysis[3] + 0)
#define CALL_analysis___cha_analysis___ChaContext___reachable_iroutines(recv) ((analysis___cha_analysis___ChaContext___reachable_iroutines_t)CALL((recv), (SFT_analysis___cha_analysis[3] + 1)))
#define ID_analysis___cha_analysis___ChaBuilder (SFT_analysis___cha_analysis[4])
#define COLOR_analysis___cha_analysis___ChaBuilder (SFT_analysis___cha_analysis[5])
#define ATTR_analysis___cha_analysis___ChaBuilder____iroutine_to_search(recv) ATTR(recv, (SFT_analysis___cha_analysis[6] + 0))
#define ATTR_analysis___cha_analysis___ChaBuilder____context(recv) ATTR(recv, (SFT_analysis___cha_analysis[6] + 1))
#define ATTR_analysis___cha_analysis___ChaBuilder____program(recv) ATTR(recv, (SFT_analysis___cha_analysis[6] + 2))
#define INIT_TABLE_POS_analysis___cha_analysis___ChaBuilder (SFT_analysis___cha_analysis[7] + 0)
#define CALL_analysis___cha_analysis___ChaBuilder___iroutine_to_search(recv) ((analysis___cha_analysis___ChaBuilder___iroutine_to_search_t)CALL((recv), (SFT_analysis___cha_analysis[7] + 1)))
#define CALL_analysis___cha_analysis___ChaBuilder___context(recv) ((analysis___cha_analysis___ChaBuilder___context_t)CALL((recv), (SFT_analysis___cha_analysis[7] + 2)))
#define CALL_analysis___cha_analysis___ChaBuilder___program(recv) ((analysis___cha_analysis___ChaBuilder___program_t)CALL((recv), (SFT_analysis___cha_analysis[7] + 3)))
#define CALL_analysis___cha_analysis___ChaBuilder___init(recv) ((analysis___cha_analysis___ChaBuilder___init_t)CALL((recv), (SFT_analysis___cha_analysis[7] + 4)))
#define CALL_analysis___cha_analysis___ChaBuilder___add_search(recv) ((analysis___cha_analysis___ChaBuilder___add_search_t)CALL((recv), (SFT_analysis___cha_analysis[7] + 5)))
#define CALL_analysis___cha_analysis___ChaBuilder___work(recv) ((analysis___cha_analysis___ChaBuilder___work_t)CALL((recv), (SFT_analysis___cha_analysis[7] + 6)))
#define ID_analysis___cha_analysis___ChaVisitor (SFT_analysis___cha_analysis[8])
#define COLOR_analysis___cha_analysis___ChaVisitor (SFT_analysis___cha_analysis[9])
#define ATTR_analysis___cha_analysis___ChaVisitor____builder(recv) ATTR(recv, (SFT_analysis___cha_analysis[10] + 0))
#define INIT_TABLE_POS_analysis___cha_analysis___ChaVisitor (SFT_analysis___cha_analysis[11] + 0)
#define CALL_analysis___cha_analysis___ChaVisitor___builder(recv) ((analysis___cha_analysis___ChaVisitor___builder_t)CALL((recv), (SFT_analysis___cha_analysis[11] + 1)))
#define CALL_SUPER_analysis___cha_analysis___ChaVisitor___visit_icode(recv) ((analysis___cha_analysis___ChaVisitor___visit_icode_t)CALL((recv), (SFT_analysis___cha_analysis[11] + 2)))
#define CALL_analysis___cha_analysis___ChaVisitor___init(recv) ((analysis___cha_analysis___ChaVisitor___init_t)CALL((recv), (SFT_analysis___cha_analysis[11] + 3)))
static const char * const LOCATE_analysis___cha_analysis___ChaContext___reachable_iroutines = "cha_analysis::ChaContext::reachable_iroutines";
val_t analysis___cha_analysis___ChaContext___reachable_iroutines(val_t p0);
typedef val_t (*analysis___cha_analysis___ChaContext___reachable_iroutines_t)(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaContext___is_iroutine_reachable = "cha_analysis::ChaContext::(reachable_method_analysis::ReachableMethodAnalysis::is_iroutine_reachable)";
val_t analysis___cha_analysis___ChaContext___is_iroutine_reachable(val_t p0, val_t p1);
typedef val_t (*analysis___cha_analysis___ChaContext___is_iroutine_reachable_t)(val_t p0, val_t p1);
static const char * const LOCATE_analysis___cha_analysis___ChaContext___is_method_reachable = "cha_analysis::ChaContext::(reachable_method_analysis::ReachableMethodAnalysis::is_method_reachable)";
val_t analysis___cha_analysis___ChaContext___is_method_reachable(val_t p0, val_t p1);
typedef val_t (*analysis___cha_analysis___ChaContext___is_method_reachable_t)(val_t p0, val_t p1);
val_t NEW_ChaContext_analysis___reachable_method_analysis___ReachableMethodAnalysis___init();
static const char * const LOCATE_analysis___cha_analysis___ChaBuilder___iroutine_to_search = "cha_analysis::ChaBuilder::iroutine_to_search";
val_t analysis___cha_analysis___ChaBuilder___iroutine_to_search(val_t p0);
typedef val_t (*analysis___cha_analysis___ChaBuilder___iroutine_to_search_t)(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaBuilder___context = "cha_analysis::ChaBuilder::context";
val_t analysis___cha_analysis___ChaBuilder___context(val_t p0);
typedef val_t (*analysis___cha_analysis___ChaBuilder___context_t)(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaBuilder___program = "cha_analysis::ChaBuilder::program";
val_t analysis___cha_analysis___ChaBuilder___program(val_t p0);
typedef val_t (*analysis___cha_analysis___ChaBuilder___program_t)(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaBuilder___init = "cha_analysis::ChaBuilder::init";
void analysis___cha_analysis___ChaBuilder___init(val_t p0, val_t p1, int* init_table);
typedef void (*analysis___cha_analysis___ChaBuilder___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ChaBuilder_analysis___cha_analysis___ChaBuilder___init(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaBuilder___add_search = "cha_analysis::ChaBuilder::add_search";
void analysis___cha_analysis___ChaBuilder___add_search(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef void (*analysis___cha_analysis___ChaBuilder___add_search_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
      typedef void (*CLOS_OC_analysis___cha_analysis___ChaBuilder___add_search_1_0)(struct stack_frame_t *);
      void OC_analysis___cha_analysis___ChaBuilder___add_search_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
      typedef void (*OC_analysis___cha_analysis___ChaBuilder___add_search_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
      typedef void (*CLOS_OC_analysis___cha_analysis___ChaBuilder___add_search_2_0)(struct stack_frame_t *);
      void OC_analysis___cha_analysis___ChaBuilder___add_search_2(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
      typedef void (*OC_analysis___cha_analysis___ChaBuilder___add_search_2_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
static const char * const LOCATE_analysis___cha_analysis___ChaBuilder___work = "cha_analysis::ChaBuilder::work";
void analysis___cha_analysis___ChaBuilder___work(val_t p0);
typedef void (*analysis___cha_analysis___ChaBuilder___work_t)(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaVisitor___builder = "cha_analysis::ChaVisitor::builder";
val_t analysis___cha_analysis___ChaVisitor___builder(val_t p0);
typedef val_t (*analysis___cha_analysis___ChaVisitor___builder_t)(val_t p0);
static const char * const LOCATE_analysis___cha_analysis___ChaVisitor___visit_icode = "cha_analysis::ChaVisitor::(icode_tools::ICodeVisitor::visit_icode)";
void analysis___cha_analysis___ChaVisitor___visit_icode(val_t p0, val_t p1);
typedef void (*analysis___cha_analysis___ChaVisitor___visit_icode_t)(val_t p0, val_t p1);
static const char * const LOCATE_analysis___cha_analysis___ChaVisitor___init = "cha_analysis::ChaVisitor::init";
void analysis___cha_analysis___ChaVisitor___init(val_t p0, val_t p1, int* init_table);
typedef void (*analysis___cha_analysis___ChaVisitor___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ChaVisitor_analysis___cha_analysis___ChaVisitor___init(val_t p0);
#endif
