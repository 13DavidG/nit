/* This C header file is generated by NIT to compile modules and programs that requires reachable_as_init. */
#ifndef reachable_as_init_sep
#define reachable_as_init_sep
#include "program._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_ReachableAsInitAnalysis[];

extern const classtable_elt_t VFT_DefaultReachableAsInitAnalysis[];
extern const char *LOCATE_reachable_as_init;
extern const int SFT_reachable_as_init[];
#define ATTR_reachable_as_init___Program____rai(recv) ATTR(recv, (SFT_reachable_as_init[0] + 0))
#define CALL_reachable_as_init___Program___rai(recv) ((reachable_as_init___Program___rai_t)CALL((recv), (SFT_reachable_as_init[1] + 0)))
#define CALL_reachable_as_init___Program___rai__eq(recv) ((reachable_as_init___Program___rai__eq_t)CALL((recv), (SFT_reachable_as_init[1] + 1)))
#define CALL_reachable_as_init___Program___dump_reachable_as_init_methods(recv) ((reachable_as_init___Program___dump_reachable_as_init_methods_t)CALL((recv), (SFT_reachable_as_init[1] + 2)))
#define ID_ReachableAsInitAnalysis (SFT_reachable_as_init[2])
#define COLOR_ReachableAsInitAnalysis (SFT_reachable_as_init[3])
#define INIT_TABLE_POS_ReachableAsInitAnalysis (SFT_reachable_as_init[4] + 0)
#define CALL_reachable_as_init___ReachableAsInitAnalysis___is_method_reachable_as_init(recv) ((reachable_as_init___ReachableAsInitAnalysis___is_method_reachable_as_init_t)CALL((recv), (SFT_reachable_as_init[4] + 1)))
#define CALL_reachable_as_init___ReachableAsInitAnalysis___init(recv) ((reachable_as_init___ReachableAsInitAnalysis___init_t)CALL((recv), (SFT_reachable_as_init[4] + 2)))
#define ID_DefaultReachableAsInitAnalysis (SFT_reachable_as_init[5])
#define COLOR_DefaultReachableAsInitAnalysis (SFT_reachable_as_init[6])
#define INIT_TABLE_POS_DefaultReachableAsInitAnalysis (SFT_reachable_as_init[7] + 0)
#define CALL_reachable_as_init___DefaultReachableAsInitAnalysis___init(recv) ((reachable_as_init___DefaultReachableAsInitAnalysis___init_t)CALL((recv), (SFT_reachable_as_init[7] + 1)))
static const char * const LOCATE_reachable_as_init___Program___rai = "reachable_as_init::Program::rai";
val_t reachable_as_init___Program___rai(val_t p0);
typedef val_t (*reachable_as_init___Program___rai_t)(val_t p0);
static const char * const LOCATE_reachable_as_init___Program___rai__eq = "reachable_as_init::Program::rai=";
void reachable_as_init___Program___rai__eq(val_t p0, val_t p1);
typedef void (*reachable_as_init___Program___rai__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_reachable_as_init___Program___dump_reachable_as_init_methods = "reachable_as_init::Program::dump_reachable_as_init_methods";
void reachable_as_init___Program___dump_reachable_as_init_methods(val_t p0, val_t p1);
typedef void (*reachable_as_init___Program___dump_reachable_as_init_methods_t)(val_t p0, val_t p1);
  void OC_reachable_as_init___Program___dump_reachable_as_init_methods_4(struct stack_frame_t *closctx, val_t p0);
  typedef void (*OC_reachable_as_init___Program___dump_reachable_as_init_methods_4_t)(struct stack_frame_t *closctx, val_t p0);
    typedef void (*CLOS_OC_reachable_as_init___Program___dump_reachable_as_init_methods_5_0)(struct stack_frame_t *);
    void OC_reachable_as_init___Program___dump_reachable_as_init_methods_5(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*OC_reachable_as_init___Program___dump_reachable_as_init_methods_5_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t NEW_Program_program___Program___init(val_t p0, val_t p1);
static const char * const LOCATE_reachable_as_init___ReachableAsInitAnalysis___is_method_reachable_as_init = "reachable_as_init::ReachableAsInitAnalysis::is_method_reachable_as_init";
val_t reachable_as_init___ReachableAsInitAnalysis___is_method_reachable_as_init(val_t p0, val_t p1, val_t p2);
typedef val_t (*reachable_as_init___ReachableAsInitAnalysis___is_method_reachable_as_init_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_reachable_as_init___ReachableAsInitAnalysis___init = "reachable_as_init::ReachableAsInitAnalysis::init";
void reachable_as_init___ReachableAsInitAnalysis___init(val_t p0, int* init_table);
typedef void (*reachable_as_init___ReachableAsInitAnalysis___init_t)(val_t p0, int* init_table);
val_t NEW_ReachableAsInitAnalysis_reachable_as_init___ReachableAsInitAnalysis___init();
static const char * const LOCATE_reachable_as_init___DefaultReachableAsInitAnalysis___is_method_reachable_as_init = "reachable_as_init::DefaultReachableAsInitAnalysis::(reachable_as_init::ReachableAsInitAnalysis::is_method_reachable_as_init)";
val_t reachable_as_init___DefaultReachableAsInitAnalysis___is_method_reachable_as_init(val_t p0, val_t p1, val_t p2);
typedef val_t (*reachable_as_init___DefaultReachableAsInitAnalysis___is_method_reachable_as_init_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_reachable_as_init___DefaultReachableAsInitAnalysis___init = "reachable_as_init::DefaultReachableAsInitAnalysis::init";
void reachable_as_init___DefaultReachableAsInitAnalysis___init(val_t p0, int* init_table);
typedef void (*reachable_as_init___DefaultReachableAsInitAnalysis___init_t)(val_t p0, int* init_table);
val_t NEW_DefaultReachableAsInitAnalysis_reachable_as_init___DefaultReachableAsInitAnalysis___init();
#endif
