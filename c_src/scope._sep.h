/* This C header file is generated by NIT to compile modules and programs that requires scope. */
#ifndef scope_sep
#define scope_sep
#include "flow._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_ScopeContext[];

extern const classtable_elt_t VFT_ScopeBlock[];

extern const classtable_elt_t VFT_EscapableBlock[];

extern const classtable_elt_t VFT_BreakOnlyEscapableBlock[];

extern const classtable_elt_t VFT_EscapableClosure[];

extern const classtable_elt_t VFT_AEscapeExpr[];
extern const char *LOCATE_scope;
extern const int SFT_scope[];
#define ID_ScopeContext (SFT_scope[0])
#define COLOR_ScopeContext (SFT_scope[1])
#define ATTR_scope___ScopeContext____stack(recv) ATTR(recv, (SFT_scope[2] + 0))
#define ATTR_scope___ScopeContext____variables(recv) ATTR(recv, (SFT_scope[2] + 1))
#define ATTR_scope___ScopeContext____labels(recv) ATTR(recv, (SFT_scope[2] + 2))
#define ATTR_scope___ScopeContext____visitor(recv) ATTR(recv, (SFT_scope[2] + 3))
#define INIT_TABLE_POS_ScopeContext (SFT_scope[3] + 0)
#define CALL_scope___ScopeContext_____bra(recv) ((scope___ScopeContext_____bra_t)CALL((recv), (SFT_scope[3] + 1)))
#define CALL_scope___ScopeContext___add_variable(recv) ((scope___ScopeContext___add_variable_t)CALL((recv), (SFT_scope[3] + 2)))
#define CALL_scope___ScopeContext___push(recv) ((scope___ScopeContext___push_t)CALL((recv), (SFT_scope[3] + 3)))
#define CALL_scope___ScopeContext___push_escapable(recv) ((scope___ScopeContext___push_escapable_t)CALL((recv), (SFT_scope[3] + 4)))
#define CALL_scope___ScopeContext___head(recv) ((scope___ScopeContext___head_t)CALL((recv), (SFT_scope[3] + 5)))
#define CALL_scope___ScopeContext___get_by_label(recv) ((scope___ScopeContext___get_by_label_t)CALL((recv), (SFT_scope[3] + 6)))
#define CALL_scope___ScopeContext___pop(recv) ((scope___ScopeContext___pop_t)CALL((recv), (SFT_scope[3] + 7)))
#define CALL_scope___ScopeContext___visitor(recv) ((scope___ScopeContext___visitor_t)CALL((recv), (SFT_scope[3] + 8)))
#define CALL_scope___ScopeContext___init(recv) ((scope___ScopeContext___init_t)CALL((recv), (SFT_scope[3] + 9)))
#define ID_ScopeBlock (SFT_scope[4])
#define COLOR_ScopeBlock (SFT_scope[5])
#define ATTR_scope___ScopeBlock____node(recv) ATTR(recv, (SFT_scope[6] + 0))
#define ATTR_scope___ScopeBlock____dico(recv) ATTR(recv, (SFT_scope[6] + 1))
#define INIT_TABLE_POS_ScopeBlock (SFT_scope[7] + 0)
#define CALL_scope___ScopeBlock___node(recv) ((scope___ScopeBlock___node_t)CALL((recv), (SFT_scope[7] + 1)))
#define CALL_scope___ScopeBlock___add_variable(recv) ((scope___ScopeBlock___add_variable_t)CALL((recv), (SFT_scope[7] + 2)))
#define CALL_scope___ScopeBlock___get_variable(recv) ((scope___ScopeBlock___get_variable_t)CALL((recv), (SFT_scope[7] + 3)))
#define CALL_scope___ScopeBlock___init(recv) ((scope___ScopeBlock___init_t)CALL((recv), (SFT_scope[7] + 4)))
#define ID_EscapableBlock (SFT_scope[8])
#define COLOR_EscapableBlock (SFT_scope[9])
#define ATTR_scope___EscapableBlock____lab(recv) ATTR(recv, (SFT_scope[10] + 0))
#define ATTR_scope___EscapableBlock____break_flow_contexts(recv) ATTR(recv, (SFT_scope[10] + 1))
#define INIT_TABLE_POS_EscapableBlock (SFT_scope[11] + 0)
#define CALL_scope___EscapableBlock___lab(recv) ((scope___EscapableBlock___lab_t)CALL((recv), (SFT_scope[11] + 1)))
#define CALL_scope___EscapableBlock___is_break_block(recv) ((scope___EscapableBlock___is_break_block_t)CALL((recv), (SFT_scope[11] + 2)))
#define CALL_scope___EscapableBlock___break_list(recv) ((scope___EscapableBlock___break_list_t)CALL((recv), (SFT_scope[11] + 3)))
#define CALL_scope___EscapableBlock___continue_stype(recv) ((scope___EscapableBlock___continue_stype_t)CALL((recv), (SFT_scope[11] + 4)))
#define CALL_scope___EscapableBlock___break_flow_contexts(recv) ((scope___EscapableBlock___break_flow_contexts_t)CALL((recv), (SFT_scope[11] + 5)))
#define CALL_scope___EscapableBlock___init(recv) ((scope___EscapableBlock___init_t)CALL((recv), (SFT_scope[11] + 6)))
#define ID_BreakOnlyEscapableBlock (SFT_scope[12])
#define COLOR_BreakOnlyEscapableBlock (SFT_scope[13])
#define INIT_TABLE_POS_BreakOnlyEscapableBlock (SFT_scope[14] + 0)
#define CALL_scope___BreakOnlyEscapableBlock___init(recv) ((scope___BreakOnlyEscapableBlock___init_t)CALL((recv), (SFT_scope[14] + 1)))
#define ID_EscapableClosure (SFT_scope[15])
#define COLOR_EscapableClosure (SFT_scope[16])
#define ATTR_scope___EscapableClosure____closure(recv) ATTR(recv, (SFT_scope[17] + 0))
#define ATTR_scope___EscapableClosure____break_list(recv) ATTR(recv, (SFT_scope[17] + 1))
#define INIT_TABLE_POS_EscapableClosure (SFT_scope[18] + 0)
#define CALL_scope___EscapableClosure___closure(recv) ((scope___EscapableClosure___closure_t)CALL((recv), (SFT_scope[18] + 1)))
#define CALL_scope___EscapableClosure___init(recv) ((scope___EscapableClosure___init_t)CALL((recv), (SFT_scope[18] + 2)))
#define ID_AEscapeExpr (SFT_scope[19])
#define COLOR_AEscapeExpr (SFT_scope[20])
#define ATTR_scope___AEscapeExpr____escapable(recv) ATTR(recv, (SFT_scope[21] + 0))
#define INIT_TABLE_POS_AEscapeExpr (SFT_scope[22] + 0)
#define CALL_scope___AEscapeExpr___escapable(recv) ((scope___AEscapeExpr___escapable_t)CALL((recv), (SFT_scope[22] + 1)))
#define CALL_scope___AEscapeExpr___kwname(recv) ((scope___AEscapeExpr___kwname_t)CALL((recv), (SFT_scope[22] + 2)))
#define CALL_scope___AEscapeExpr___compute_escapable_block(recv) ((scope___AEscapeExpr___compute_escapable_block_t)CALL((recv), (SFT_scope[22] + 3)))
static const char * const LOCATE_scope___ScopeContext_____bra = "scope::ScopeContext::[]";
val_t scope___ScopeContext_____bra(val_t p0, val_t p1);
typedef val_t (*scope___ScopeContext_____bra_t)(val_t p0, val_t p1);
static const char * const LOCATE_scope___ScopeContext___add_variable = "scope::ScopeContext::add_variable";
void scope___ScopeContext___add_variable(val_t p0, val_t p1);
typedef void (*scope___ScopeContext___add_variable_t)(val_t p0, val_t p1);
static const char * const LOCATE_scope___ScopeContext___push = "scope::ScopeContext::push";
void scope___ScopeContext___push(val_t p0, val_t p1);
typedef void (*scope___ScopeContext___push_t)(val_t p0, val_t p1);
static const char * const LOCATE_scope___ScopeContext___push_escapable = "scope::ScopeContext::push_escapable";
void scope___ScopeContext___push_escapable(val_t p0, val_t p1, val_t p2);
typedef void (*scope___ScopeContext___push_escapable_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_scope___ScopeContext___head = "scope::ScopeContext::head";
val_t scope___ScopeContext___head(val_t p0);
typedef val_t (*scope___ScopeContext___head_t)(val_t p0);
static const char * const LOCATE_scope___ScopeContext___get_by_label = "scope::ScopeContext::get_by_label";
val_t scope___ScopeContext___get_by_label(val_t p0, val_t p1);
typedef val_t (*scope___ScopeContext___get_by_label_t)(val_t p0, val_t p1);
static const char * const LOCATE_scope___ScopeContext___pop = "scope::ScopeContext::pop";
void scope___ScopeContext___pop(val_t p0);
typedef void (*scope___ScopeContext___pop_t)(val_t p0);
static const char * const LOCATE_scope___ScopeContext___visitor = "scope::ScopeContext::visitor";
val_t scope___ScopeContext___visitor(val_t p0);
typedef val_t (*scope___ScopeContext___visitor_t)(val_t p0);
static const char * const LOCATE_scope___ScopeContext___init = "scope::ScopeContext::init";
void scope___ScopeContext___init(val_t p0, val_t p1, int* init_table);
typedef void (*scope___ScopeContext___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ScopeContext_scope___ScopeContext___init(val_t p0);
static const char * const LOCATE_scope___ScopeBlock___node = "scope::ScopeBlock::node";
val_t scope___ScopeBlock___node(val_t p0);
typedef val_t (*scope___ScopeBlock___node_t)(val_t p0);
static const char * const LOCATE_scope___ScopeBlock___add_variable = "scope::ScopeBlock::add_variable";
void scope___ScopeBlock___add_variable(val_t p0, val_t p1);
typedef void (*scope___ScopeBlock___add_variable_t)(val_t p0, val_t p1);
static const char * const LOCATE_scope___ScopeBlock___get_variable = "scope::ScopeBlock::get_variable";
val_t scope___ScopeBlock___get_variable(val_t p0, val_t p1);
typedef val_t (*scope___ScopeBlock___get_variable_t)(val_t p0, val_t p1);
static const char * const LOCATE_scope___ScopeBlock___init = "scope::ScopeBlock::init";
void scope___ScopeBlock___init(val_t p0, val_t p1, int* init_table);
typedef void (*scope___ScopeBlock___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ScopeBlock_scope___ScopeBlock___init(val_t p0);
static const char * const LOCATE_scope___EscapableBlock___lab = "scope::EscapableBlock::lab";
val_t scope___EscapableBlock___lab(val_t p0);
typedef val_t (*scope___EscapableBlock___lab_t)(val_t p0);
static const char * const LOCATE_scope___EscapableBlock___is_break_block = "scope::EscapableBlock::is_break_block";
val_t scope___EscapableBlock___is_break_block(val_t p0);
typedef val_t (*scope___EscapableBlock___is_break_block_t)(val_t p0);
static const char * const LOCATE_scope___EscapableBlock___break_list = "scope::EscapableBlock::break_list";
val_t scope___EscapableBlock___break_list(val_t p0);
typedef val_t (*scope___EscapableBlock___break_list_t)(val_t p0);
static const char * const LOCATE_scope___EscapableBlock___continue_stype = "scope::EscapableBlock::continue_stype";
val_t scope___EscapableBlock___continue_stype(val_t p0);
typedef val_t (*scope___EscapableBlock___continue_stype_t)(val_t p0);
static const char * const LOCATE_scope___EscapableBlock___break_flow_contexts = "scope::EscapableBlock::break_flow_contexts";
val_t scope___EscapableBlock___break_flow_contexts(val_t p0);
typedef val_t (*scope___EscapableBlock___break_flow_contexts_t)(val_t p0);
static const char * const LOCATE_scope___EscapableBlock___init = "scope::EscapableBlock::init";
void scope___EscapableBlock___init(val_t p0, val_t p1, int* init_table);
typedef void (*scope___EscapableBlock___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_EscapableBlock_scope___EscapableBlock___init(val_t p0);
static const char * const LOCATE_scope___BreakOnlyEscapableBlock___is_break_block = "scope::BreakOnlyEscapableBlock::(scope::EscapableBlock::is_break_block)";
val_t scope___BreakOnlyEscapableBlock___is_break_block(val_t p0);
typedef val_t (*scope___BreakOnlyEscapableBlock___is_break_block_t)(val_t p0);
static const char * const LOCATE_scope___BreakOnlyEscapableBlock___init = "scope::BreakOnlyEscapableBlock::init";
void scope___BreakOnlyEscapableBlock___init(val_t p0, val_t p1, int* init_table);
typedef void (*scope___BreakOnlyEscapableBlock___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_BreakOnlyEscapableBlock_scope___BreakOnlyEscapableBlock___init(val_t p0);
static const char * const LOCATE_scope___EscapableClosure___closure = "scope::EscapableClosure::closure";
val_t scope___EscapableClosure___closure(val_t p0);
typedef val_t (*scope___EscapableClosure___closure_t)(val_t p0);
static const char * const LOCATE_scope___EscapableClosure___is_break_block = "scope::EscapableClosure::(scope::EscapableBlock::is_break_block)";
val_t scope___EscapableClosure___is_break_block(val_t p0);
typedef val_t (*scope___EscapableClosure___is_break_block_t)(val_t p0);
static const char * const LOCATE_scope___EscapableClosure___break_list = "scope::EscapableClosure::(scope::EscapableBlock::break_list)";
val_t scope___EscapableClosure___break_list(val_t p0);
typedef val_t (*scope___EscapableClosure___break_list_t)(val_t p0);
static const char * const LOCATE_scope___EscapableClosure___continue_stype = "scope::EscapableClosure::(scope::EscapableBlock::continue_stype)";
val_t scope___EscapableClosure___continue_stype(val_t p0);
typedef val_t (*scope___EscapableClosure___continue_stype_t)(val_t p0);
static const char * const LOCATE_scope___EscapableClosure___init = "scope::EscapableClosure::init";
void scope___EscapableClosure___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*scope___EscapableClosure___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_EscapableClosure_scope___EscapableClosure___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_scope___AEscapeExpr___escapable = "scope::AEscapeExpr::escapable";
val_t scope___AEscapeExpr___escapable(val_t p0);
typedef val_t (*scope___AEscapeExpr___escapable_t)(val_t p0);
static const char * const LOCATE_scope___AEscapeExpr___kwname = "scope::AEscapeExpr::kwname";
val_t scope___AEscapeExpr___kwname(val_t p0);
typedef val_t (*scope___AEscapeExpr___kwname_t)(val_t p0);
static const char * const LOCATE_scope___AEscapeExpr___compute_escapable_block = "scope::AEscapeExpr::compute_escapable_block";
val_t scope___AEscapeExpr___compute_escapable_block(val_t p0, val_t p1);
typedef val_t (*scope___AEscapeExpr___compute_escapable_block_t)(val_t p0, val_t p1);
val_t NEW_AEscapeExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_scope___AContinueExpr___kwname = "scope::AContinueExpr::(scope::AEscapeExpr::kwname)";
val_t scope___AContinueExpr___kwname(val_t p0);
typedef val_t (*scope___AContinueExpr___kwname_t)(val_t p0);
val_t NEW_AContinueExpr_parser_prod___AContinueExpr___empty_init();
val_t NEW_AContinueExpr_parser_prod___AContinueExpr___init_acontinueexpr(val_t p0, val_t p1, val_t p2);
val_t NEW_AContinueExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_scope___ABreakExpr___kwname = "scope::ABreakExpr::(scope::AEscapeExpr::kwname)";
val_t scope___ABreakExpr___kwname(val_t p0);
typedef val_t (*scope___ABreakExpr___kwname_t)(val_t p0);
val_t NEW_ABreakExpr_parser_prod___ABreakExpr___empty_init();
val_t NEW_ABreakExpr_parser_prod___ABreakExpr___init_abreakexpr(val_t p0, val_t p1, val_t p2);
val_t NEW_ABreakExpr_parser_nodes___ANode___init(val_t p0);
#endif
