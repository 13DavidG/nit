/* This C header file is generated by NIT to compile modules and programs that requires syntax_base. */
#ifndef syntax_base_sep
#define syntax_base_sep
#include "parser._sep.h"
#include "mmloader._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_MMSrcModule[];

extern const classtable_elt_t VFT_MMSrcLocalClass[];

extern const classtable_elt_t VFT_MMSrcAttribute[];

extern const classtable_elt_t VFT_MMSrcMethod[];

extern const classtable_elt_t VFT_MMAttrImplementationMethod[];

extern const classtable_elt_t VFT_MMReadImplementationMethod[];

extern const classtable_elt_t VFT_MMWriteImplementationMethod[];

extern const classtable_elt_t VFT_MMMethSrcMethod[];

extern const classtable_elt_t VFT_MMSrcTypeProperty[];

extern const classtable_elt_t VFT_MMImplicitInit[];

extern const classtable_elt_t VFT_Variable[];

extern const classtable_elt_t VFT_VarVariable[];

extern const classtable_elt_t VFT_ParamVariable[];

extern const classtable_elt_t VFT_AutoVariable[];

extern const classtable_elt_t VFT_ClosureVariable[];

extern const classtable_elt_t VFT_AbsSyntaxVisitor[];
extern const char *LOCATE_syntax_base;
extern const int SFT_syntax_base[];
#define ID_MMSrcModule (SFT_syntax_base[0])
#define COLOR_MMSrcModule (SFT_syntax_base[1])
#define ATTR_syntax_base___MMSrcModule____node(recv) ATTR(recv, (SFT_syntax_base[2] + 0))
#define ATTR_syntax_base___MMSrcModule____src_local_classes(recv) ATTR(recv, (SFT_syntax_base[2] + 1))
#define INIT_TABLE_POS_MMSrcModule (SFT_syntax_base[3] + 0)
#define CALL_syntax_base___MMSrcModule___node(recv) ((syntax_base___MMSrcModule___node_t)CALL((recv), (SFT_syntax_base[3] + 1)))
#define CALL_syntax_base___MMSrcModule___src_local_classes(recv) ((syntax_base___MMSrcModule___src_local_classes_t)CALL((recv), (SFT_syntax_base[3] + 2)))
#define CALL_syntax_base___MMSrcModule___init(recv) ((syntax_base___MMSrcModule___init_t)CALL((recv), (SFT_syntax_base[3] + 3)))
#define CALL_syntax_base___MMGlobalClass___check_visibility(recv) ((syntax_base___MMGlobalClass___check_visibility_t)CALL((recv), (SFT_syntax_base[4] + 0)))
#define ID_MMSrcLocalClass (SFT_syntax_base[5])
#define COLOR_MMSrcLocalClass (SFT_syntax_base[6])
#define ATTR_syntax_base___MMSrcLocalClass____nodes(recv) ATTR(recv, (SFT_syntax_base[7] + 0))
#define ATTR_syntax_base___MMSrcLocalClass____formal_dict(recv) ATTR(recv, (SFT_syntax_base[7] + 1))
#define ATTR_syntax_base___MMSrcLocalClass____src_local_properties(recv) ATTR(recv, (SFT_syntax_base[7] + 2))
#define INIT_TABLE_POS_MMSrcLocalClass (SFT_syntax_base[8] + 0)
#define CALL_syntax_base___MMSrcLocalClass___nodes(recv) ((syntax_base___MMSrcLocalClass___nodes_t)CALL((recv), (SFT_syntax_base[8] + 1)))
#define CALL_syntax_base___MMSrcLocalClass___formal_dict(recv) ((syntax_base___MMSrcLocalClass___formal_dict_t)CALL((recv), (SFT_syntax_base[8] + 2)))
#define CALL_syntax_base___MMSrcLocalClass___formal_dict__eq(recv) ((syntax_base___MMSrcLocalClass___formal_dict__eq_t)CALL((recv), (SFT_syntax_base[8] + 3)))
#define CALL_syntax_base___MMSrcLocalClass___src_local_properties(recv) ((syntax_base___MMSrcLocalClass___src_local_properties_t)CALL((recv), (SFT_syntax_base[8] + 4)))
#define CALL_syntax_base___MMSrcLocalClass___init(recv) ((syntax_base___MMSrcLocalClass___init_t)CALL((recv), (SFT_syntax_base[8] + 5)))
#define CALL_syntax_base___MMGlobalProperty___check_visibility(recv) ((syntax_base___MMGlobalProperty___check_visibility_t)CALL((recv), (SFT_syntax_base[9] + 0)))
#define CALL_syntax_base___MMLocalProperty___node(recv) ((syntax_base___MMLocalProperty___node_t)CALL((recv), (SFT_syntax_base[10] + 0)))
#define CALL_syntax_base___MMLocalProperty___is_init(recv) ((syntax_base___MMLocalProperty___is_init_t)CALL((recv), (SFT_syntax_base[10] + 1)))
#define ID_MMSrcAttribute (SFT_syntax_base[11])
#define COLOR_MMSrcAttribute (SFT_syntax_base[12])
#define ATTR_syntax_base___MMSrcAttribute____node(recv) ATTR(recv, (SFT_syntax_base[13] + 0))
#define INIT_TABLE_POS_MMSrcAttribute (SFT_syntax_base[14] + 0)
#define CALL_syntax_base___MMSrcAttribute___init(recv) ((syntax_base___MMSrcAttribute___init_t)CALL((recv), (SFT_syntax_base[14] + 1)))
#define ID_MMSrcMethod (SFT_syntax_base[15])
#define COLOR_MMSrcMethod (SFT_syntax_base[16])
#define INIT_TABLE_POS_MMSrcMethod (SFT_syntax_base[17] + 0)
#define ID_MMAttrImplementationMethod (SFT_syntax_base[18])
#define COLOR_MMAttrImplementationMethod (SFT_syntax_base[19])
#define ATTR_syntax_base___MMAttrImplementationMethod____node(recv) ATTR(recv, (SFT_syntax_base[20] + 0))
#define INIT_TABLE_POS_MMAttrImplementationMethod (SFT_syntax_base[21] + 0)
#define CALL_syntax_base___MMAttrImplementationMethod___init(recv) ((syntax_base___MMAttrImplementationMethod___init_t)CALL((recv), (SFT_syntax_base[21] + 1)))
#define ID_MMReadImplementationMethod (SFT_syntax_base[22])
#define COLOR_MMReadImplementationMethod (SFT_syntax_base[23])
#define INIT_TABLE_POS_MMReadImplementationMethod (SFT_syntax_base[24] + 0)
#define CALL_syntax_base___MMReadImplementationMethod___init(recv) ((syntax_base___MMReadImplementationMethod___init_t)CALL((recv), (SFT_syntax_base[24] + 1)))
#define ID_MMWriteImplementationMethod (SFT_syntax_base[25])
#define COLOR_MMWriteImplementationMethod (SFT_syntax_base[26])
#define INIT_TABLE_POS_MMWriteImplementationMethod (SFT_syntax_base[27] + 0)
#define CALL_syntax_base___MMWriteImplementationMethod___init(recv) ((syntax_base___MMWriteImplementationMethod___init_t)CALL((recv), (SFT_syntax_base[27] + 1)))
#define ID_MMMethSrcMethod (SFT_syntax_base[28])
#define COLOR_MMMethSrcMethod (SFT_syntax_base[29])
#define ATTR_syntax_base___MMMethSrcMethod____node(recv) ATTR(recv, (SFT_syntax_base[30] + 0))
#define INIT_TABLE_POS_MMMethSrcMethod (SFT_syntax_base[31] + 0)
#define CALL_syntax_base___MMMethSrcMethod___init(recv) ((syntax_base___MMMethSrcMethod___init_t)CALL((recv), (SFT_syntax_base[31] + 1)))
#define ID_MMSrcTypeProperty (SFT_syntax_base[32])
#define COLOR_MMSrcTypeProperty (SFT_syntax_base[33])
#define ATTR_syntax_base___MMSrcTypeProperty____node(recv) ATTR(recv, (SFT_syntax_base[34] + 0))
#define INIT_TABLE_POS_MMSrcTypeProperty (SFT_syntax_base[35] + 0)
#define CALL_syntax_base___MMSrcTypeProperty___init(recv) ((syntax_base___MMSrcTypeProperty___init_t)CALL((recv), (SFT_syntax_base[35] + 1)))
#define ID_MMImplicitInit (SFT_syntax_base[36])
#define COLOR_MMImplicitInit (SFT_syntax_base[37])
#define ATTR_syntax_base___MMImplicitInit____unassigned_attributes(recv) ATTR(recv, (SFT_syntax_base[38] + 0))
#define ATTR_syntax_base___MMImplicitInit____super_inits(recv) ATTR(recv, (SFT_syntax_base[38] + 1))
#define INIT_TABLE_POS_MMImplicitInit (SFT_syntax_base[39] + 0)
#define CALL_syntax_base___MMImplicitInit___unassigned_attributes(recv) ((syntax_base___MMImplicitInit___unassigned_attributes_t)CALL((recv), (SFT_syntax_base[39] + 1)))
#define CALL_syntax_base___MMImplicitInit___super_inits(recv) ((syntax_base___MMImplicitInit___super_inits_t)CALL((recv), (SFT_syntax_base[39] + 2)))
#define CALL_syntax_base___MMImplicitInit___init(recv) ((syntax_base___MMImplicitInit___init_t)CALL((recv), (SFT_syntax_base[39] + 3)))
#define ID_Variable (SFT_syntax_base[40])
#define COLOR_Variable (SFT_syntax_base[41])
#define ATTR_syntax_base___Variable____name(recv) ATTR(recv, (SFT_syntax_base[42] + 0))
#define ATTR_syntax_base___Variable____decl(recv) ATTR(recv, (SFT_syntax_base[42] + 1))
#define ATTR_syntax_base___Variable____stype(recv) ATTR(recv, (SFT_syntax_base[42] + 2))
#define INIT_TABLE_POS_Variable (SFT_syntax_base[43] + 0)
#define CALL_syntax_base___Variable___name(recv) ((syntax_base___Variable___name_t)CALL((recv), (SFT_syntax_base[43] + 1)))
#define CALL_syntax_base___Variable___decl(recv) ((syntax_base___Variable___decl_t)CALL((recv), (SFT_syntax_base[43] + 2)))
#define CALL_syntax_base___Variable___stype(recv) ((syntax_base___Variable___stype_t)CALL((recv), (SFT_syntax_base[43] + 3)))
#define CALL_syntax_base___Variable___stype__eq(recv) ((syntax_base___Variable___stype__eq_t)CALL((recv), (SFT_syntax_base[43] + 4)))
#define CALL_syntax_base___Variable___kind(recv) ((syntax_base___Variable___kind_t)CALL((recv), (SFT_syntax_base[43] + 5)))
#define CALL_syntax_base___Variable___init(recv) ((syntax_base___Variable___init_t)CALL((recv), (SFT_syntax_base[43] + 6)))
#define ID_VarVariable (SFT_syntax_base[44])
#define COLOR_VarVariable (SFT_syntax_base[45])
#define INIT_TABLE_POS_VarVariable (SFT_syntax_base[46] + 0)
#define CALL_syntax_base___VarVariable___init(recv) ((syntax_base___VarVariable___init_t)CALL((recv), (SFT_syntax_base[46] + 1)))
#define ID_ParamVariable (SFT_syntax_base[47])
#define COLOR_ParamVariable (SFT_syntax_base[48])
#define INIT_TABLE_POS_ParamVariable (SFT_syntax_base[49] + 0)
#define CALL_syntax_base___ParamVariable___init(recv) ((syntax_base___ParamVariable___init_t)CALL((recv), (SFT_syntax_base[49] + 1)))
#define ID_AutoVariable (SFT_syntax_base[50])
#define COLOR_AutoVariable (SFT_syntax_base[51])
#define INIT_TABLE_POS_AutoVariable (SFT_syntax_base[52] + 0)
#define CALL_syntax_base___AutoVariable___init(recv) ((syntax_base___AutoVariable___init_t)CALL((recv), (SFT_syntax_base[52] + 1)))
#define ID_ClosureVariable (SFT_syntax_base[53])
#define COLOR_ClosureVariable (SFT_syntax_base[54])
#define ATTR_syntax_base___ClosureVariable____closure(recv) ATTR(recv, (SFT_syntax_base[55] + 0))
#define INIT_TABLE_POS_ClosureVariable (SFT_syntax_base[56] + 0)
#define CALL_syntax_base___ClosureVariable___closure(recv) ((syntax_base___ClosureVariable___closure_t)CALL((recv), (SFT_syntax_base[56] + 1)))
#define CALL_syntax_base___ClosureVariable___init(recv) ((syntax_base___ClosureVariable___init_t)CALL((recv), (SFT_syntax_base[56] + 2)))
#define ID_AbsSyntaxVisitor (SFT_syntax_base[57])
#define COLOR_AbsSyntaxVisitor (SFT_syntax_base[58])
#define ATTR_syntax_base___AbsSyntaxVisitor____module(recv) ATTR(recv, (SFT_syntax_base[59] + 0))
#define ATTR_syntax_base___AbsSyntaxVisitor____local_class(recv) ATTR(recv, (SFT_syntax_base[59] + 1))
#define ATTR_syntax_base___AbsSyntaxVisitor____local_property(recv) ATTR(recv, (SFT_syntax_base[59] + 2))
#define ATTR_syntax_base___AbsSyntaxVisitor____tc(recv) ATTR(recv, (SFT_syntax_base[59] + 3))
#define INIT_TABLE_POS_AbsSyntaxVisitor (SFT_syntax_base[60] + 0)
#define CALL_syntax_base___AbsSyntaxVisitor___type_object(recv) ((syntax_base___AbsSyntaxVisitor___type_object_t)CALL((recv), (SFT_syntax_base[60] + 1)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_bool(recv) ((syntax_base___AbsSyntaxVisitor___type_bool_t)CALL((recv), (SFT_syntax_base[60] + 2)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_int(recv) ((syntax_base___AbsSyntaxVisitor___type_int_t)CALL((recv), (SFT_syntax_base[60] + 3)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_float(recv) ((syntax_base___AbsSyntaxVisitor___type_float_t)CALL((recv), (SFT_syntax_base[60] + 4)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_char(recv) ((syntax_base___AbsSyntaxVisitor___type_char_t)CALL((recv), (SFT_syntax_base[60] + 5)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_string(recv) ((syntax_base___AbsSyntaxVisitor___type_string_t)CALL((recv), (SFT_syntax_base[60] + 6)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_collection(recv) ((syntax_base___AbsSyntaxVisitor___type_collection_t)CALL((recv), (SFT_syntax_base[60] + 7)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_array(recv) ((syntax_base___AbsSyntaxVisitor___type_array_t)CALL((recv), (SFT_syntax_base[60] + 8)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_discrete(recv) ((syntax_base___AbsSyntaxVisitor___type_discrete_t)CALL((recv), (SFT_syntax_base[60] + 9)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_range(recv) ((syntax_base___AbsSyntaxVisitor___type_range_t)CALL((recv), (SFT_syntax_base[60] + 10)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_none(recv) ((syntax_base___AbsSyntaxVisitor___type_none_t)CALL((recv), (SFT_syntax_base[60] + 11)))
#define CALL_syntax_base___AbsSyntaxVisitor___module(recv) ((syntax_base___AbsSyntaxVisitor___module_t)CALL((recv), (SFT_syntax_base[60] + 12)))
#define CALL_syntax_base___AbsSyntaxVisitor___module__eq(recv) ((syntax_base___AbsSyntaxVisitor___module__eq_t)CALL((recv), (SFT_syntax_base[60] + 13)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_class(recv) ((syntax_base___AbsSyntaxVisitor___local_class_t)CALL((recv), (SFT_syntax_base[60] + 14)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_class__eq(recv) ((syntax_base___AbsSyntaxVisitor___local_class__eq_t)CALL((recv), (SFT_syntax_base[60] + 15)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_property(recv) ((syntax_base___AbsSyntaxVisitor___local_property_t)CALL((recv), (SFT_syntax_base[60] + 16)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_property__eq(recv) ((syntax_base___AbsSyntaxVisitor___local_property__eq_t)CALL((recv), (SFT_syntax_base[60] + 17)))
#define CALL_syntax_base___AbsSyntaxVisitor___tc(recv) ((syntax_base___AbsSyntaxVisitor___tc_t)CALL((recv), (SFT_syntax_base[60] + 18)))
#define CALL_syntax_base___AbsSyntaxVisitor___error(recv) ((syntax_base___AbsSyntaxVisitor___error_t)CALL((recv), (SFT_syntax_base[60] + 19)))
#define CALL_syntax_base___AbsSyntaxVisitor___warning(recv) ((syntax_base___AbsSyntaxVisitor___warning_t)CALL((recv), (SFT_syntax_base[60] + 20)))
#define CALL_syntax_base___AbsSyntaxVisitor___locate(recv) ((syntax_base___AbsSyntaxVisitor___locate_t)CALL((recv), (SFT_syntax_base[60] + 21)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_conform(recv) ((syntax_base___AbsSyntaxVisitor___check_conform_t)CALL((recv), (SFT_syntax_base[60] + 22)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_expr(recv) ((syntax_base___AbsSyntaxVisitor___check_expr_t)CALL((recv), (SFT_syntax_base[60] + 23)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_conform_expr(recv) ((syntax_base___AbsSyntaxVisitor___check_conform_expr_t)CALL((recv), (SFT_syntax_base[60] + 24)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr(recv) ((syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_t)CALL((recv), (SFT_syntax_base[60] + 25)))
#define CALL_syntax_base___AbsSyntaxVisitor___init(recv) ((syntax_base___AbsSyntaxVisitor___init_t)CALL((recv), (SFT_syntax_base[60] + 26)))
#define CALL_syntax_base___PNode___accept_abs_syntax_visitor(recv) ((syntax_base___PNode___accept_abs_syntax_visitor_t)CALL((recv), (SFT_syntax_base[61] + 0)))
#define ATTR_syntax_base___Token____symbol(recv) ATTR(recv, (SFT_syntax_base[62] + 0))
#define CALL_syntax_base___Token___to_symbol(recv) ((syntax_base___Token___to_symbol_t)CALL((recv), (SFT_syntax_base[63] + 0)))
#define CALL_syntax_base___PClassdef___local_class(recv) ((syntax_base___PClassdef___local_class_t)CALL((recv), (SFT_syntax_base[64] + 0)))
#define CALL_syntax_base___AAttrPropdef___prop(recv) ((syntax_base___AAttrPropdef___prop_t)CALL((recv), (SFT_syntax_base[65] + 0)))
#define CALL_syntax_base___AAttrPropdef___readmethod(recv) ((syntax_base___AAttrPropdef___readmethod_t)CALL((recv), (SFT_syntax_base[65] + 1)))
#define CALL_syntax_base___AAttrPropdef___writemethod(recv) ((syntax_base___AAttrPropdef___writemethod_t)CALL((recv), (SFT_syntax_base[65] + 2)))
#define CALL_syntax_base___AMethPropdef___method(recv) ((syntax_base___AMethPropdef___method_t)CALL((recv), (SFT_syntax_base[66] + 0)))
#define CALL_syntax_base___AMethPropdef___self_var(recv) ((syntax_base___AMethPropdef___self_var_t)CALL((recv), (SFT_syntax_base[66] + 1)))
#define CALL_syntax_base___ATypePropdef___prop(recv) ((syntax_base___ATypePropdef___prop_t)CALL((recv), (SFT_syntax_base[67] + 0)))
#define CALL_syntax_base___PParam___position(recv) ((syntax_base___PParam___position_t)CALL((recv), (SFT_syntax_base[68] + 0)))
#define CALL_syntax_base___PParam___variable(recv) ((syntax_base___PParam___variable_t)CALL((recv), (SFT_syntax_base[68] + 1)))
#define CALL_syntax_base___PClosureDecl___variable(recv) ((syntax_base___PClosureDecl___variable_t)CALL((recv), (SFT_syntax_base[69] + 0)))
#define CALL_syntax_base___PType___get_local_class(recv) ((syntax_base___PType___get_local_class_t)CALL((recv), (SFT_syntax_base[70] + 0)))
#define CALL_syntax_base___PType___get_stype(recv) ((syntax_base___PType___get_stype_t)CALL((recv), (SFT_syntax_base[70] + 1)))
#define CALL_syntax_base___PType___get_unchecked_stype(recv) ((syntax_base___PType___get_unchecked_stype_t)CALL((recv), (SFT_syntax_base[70] + 2)))
#define CALL_syntax_base___PType___check_conform(recv) ((syntax_base___PType___check_conform_t)CALL((recv), (SFT_syntax_base[70] + 3)))
#define ATTR_syntax_base___AType____stype_cache(recv) ATTR(recv, (SFT_syntax_base[71] + 0))
#define ATTR_syntax_base___AType____stype_cached(recv) ATTR(recv, (SFT_syntax_base[71] + 1))
#define CALL_syntax_base___PExpr___is_typed(recv) ((syntax_base___PExpr___is_typed_t)CALL((recv), (SFT_syntax_base[72] + 0)))
#define CALL_syntax_base___PExpr___is_statement(recv) ((syntax_base___PExpr___is_statement_t)CALL((recv), (SFT_syntax_base[72] + 1)))
#define CALL_syntax_base___PExpr___stype(recv) ((syntax_base___PExpr___stype_t)CALL((recv), (SFT_syntax_base[72] + 2)))
#define ATTR_syntax_base___AVardeclExpr____variable(recv) ATTR(recv, (SFT_syntax_base[73] + 0))
#define CALL_syntax_base___AVardeclExpr___variable(recv) ((syntax_base___AVardeclExpr___variable_t)CALL((recv), (SFT_syntax_base[74] + 0)))
#define CALL_syntax_base___AVardeclExpr___variable__eq(recv) ((syntax_base___AVardeclExpr___variable__eq_t)CALL((recv), (SFT_syntax_base[74] + 1)))
#define ATTR_syntax_base___AForExpr____variable(recv) ATTR(recv, (SFT_syntax_base[75] + 0))
#define CALL_syntax_base___AForExpr___variable(recv) ((syntax_base___AForExpr___variable_t)CALL((recv), (SFT_syntax_base[76] + 0)))
#define CALL_syntax_base___AForExpr___variable__eq(recv) ((syntax_base___AForExpr___variable__eq_t)CALL((recv), (SFT_syntax_base[76] + 1)))
#define ATTR_syntax_base___ASelfExpr____variable(recv) ATTR(recv, (SFT_syntax_base[77] + 0))
#define CALL_syntax_base___ASelfExpr___variable(recv) ((syntax_base___ASelfExpr___variable_t)CALL((recv), (SFT_syntax_base[78] + 0)))
#define CALL_syntax_base___ASelfExpr___variable__eq(recv) ((syntax_base___ASelfExpr___variable__eq_t)CALL((recv), (SFT_syntax_base[78] + 1)))
#define ATTR_syntax_base___AVarFormExpr____variable(recv) ATTR(recv, (SFT_syntax_base[79] + 0))
#define CALL_syntax_base___AVarFormExpr___variable(recv) ((syntax_base___AVarFormExpr___variable_t)CALL((recv), (SFT_syntax_base[80] + 0)))
#define CALL_syntax_base___AVarFormExpr___variable__eq(recv) ((syntax_base___AVarFormExpr___variable__eq_t)CALL((recv), (SFT_syntax_base[80] + 1)))
#define ATTR_syntax_base___AClosureCallExpr____variable(recv) ATTR(recv, (SFT_syntax_base[81] + 0))
#define CALL_syntax_base___AClosureCallExpr___variable(recv) ((syntax_base___AClosureCallExpr___variable_t)CALL((recv), (SFT_syntax_base[82] + 0)))
#define CALL_syntax_base___AClosureCallExpr___variable__eq(recv) ((syntax_base___AClosureCallExpr___variable__eq_t)CALL((recv), (SFT_syntax_base[82] + 1)))
#define ATTR_syntax_base___PClosureDef____closure(recv) ATTR(recv, (SFT_syntax_base[83] + 0))
#define ATTR_syntax_base___PClosureDef____variables(recv) ATTR(recv, (SFT_syntax_base[83] + 1))
#define CALL_syntax_base___PClosureDef___closure(recv) ((syntax_base___PClosureDef___closure_t)CALL((recv), (SFT_syntax_base[84] + 0)))
#define CALL_syntax_base___PClosureDef___closure__eq(recv) ((syntax_base___PClosureDef___closure__eq_t)CALL((recv), (SFT_syntax_base[84] + 1)))
#define CALL_syntax_base___PClosureDef___variables(recv) ((syntax_base___PClosureDef___variables_t)CALL((recv), (SFT_syntax_base[84] + 2)))
#define CALL_syntax_base___PClosureDef___variables__eq(recv) ((syntax_base___PClosureDef___variables__eq_t)CALL((recv), (SFT_syntax_base[84] + 3)))
typedef val_t (* syntax_base___MMSrcModule___node_t)(val_t  self);
val_t syntax_base___MMSrcModule___node(val_t  self);
#define LOCATE_syntax_base___MMSrcModule___node "syntax_base::MMSrcModule::node"
typedef val_t (* syntax_base___MMSrcModule___src_local_classes_t)(val_t  self);
val_t syntax_base___MMSrcModule___src_local_classes(val_t  self);
#define LOCATE_syntax_base___MMSrcModule___src_local_classes "syntax_base::MMSrcModule::src_local_classes"
typedef void (* syntax_base___MMSrcModule___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, val_t  param4, int* init_table);
void syntax_base___MMSrcModule___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, val_t  param4, int* init_table);
#define LOCATE_syntax_base___MMSrcModule___init "syntax_base::MMSrcModule::init"
val_t NEW_MMSrcModule_syntax_base___MMSrcModule___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_MMGlobalClass_abstractmetamodel___MMGlobalClass___init(val_t p0);
typedef val_t (* syntax_base___MMGlobalClass___check_visibility_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2);
val_t syntax_base___MMGlobalClass___check_visibility(val_t  self, val_t  param0, val_t  param1, val_t  param2);
#define LOCATE_syntax_base___MMGlobalClass___check_visibility "syntax_base::MMGlobalClass::check_visibility"
typedef val_t (* syntax_base___MMSrcLocalClass___nodes_t)(val_t  self);
val_t syntax_base___MMSrcLocalClass___nodes(val_t  self);
#define LOCATE_syntax_base___MMSrcLocalClass___nodes "syntax_base::MMSrcLocalClass::nodes"
typedef val_t (* syntax_base___MMSrcLocalClass___formal_dict_t)(val_t  self);
val_t syntax_base___MMSrcLocalClass___formal_dict(val_t  self);
#define LOCATE_syntax_base___MMSrcLocalClass___formal_dict "syntax_base::MMSrcLocalClass::formal_dict"
typedef void (* syntax_base___MMSrcLocalClass___formal_dict__eq_t)(val_t  self, val_t  param0);
void syntax_base___MMSrcLocalClass___formal_dict__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___MMSrcLocalClass___formal_dict__eq "syntax_base::MMSrcLocalClass::formal_dict="
typedef val_t (* syntax_base___MMSrcLocalClass___src_local_properties_t)(val_t  self);
val_t syntax_base___MMSrcLocalClass___src_local_properties(val_t  self);
#define LOCATE_syntax_base___MMSrcLocalClass___src_local_properties "syntax_base::MMSrcLocalClass::src_local_properties"
typedef void (* syntax_base___MMSrcLocalClass___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void syntax_base___MMSrcLocalClass___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_syntax_base___MMSrcLocalClass___init "syntax_base::MMSrcLocalClass::init"
val_t NEW_MMSrcLocalClass_syntax_base___MMSrcLocalClass___init(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_MMGlobalProperty_abstractmetamodel___MMGlobalProperty___init(val_t p0);
typedef val_t (* syntax_base___MMGlobalProperty___check_visibility_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3);
val_t syntax_base___MMGlobalProperty___check_visibility(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3);
#define LOCATE_syntax_base___MMGlobalProperty___check_visibility "syntax_base::MMGlobalProperty::check_visibility"
val_t NEW_MMLocalProperty_abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
typedef val_t (* syntax_base___MMLocalProperty___node_t)(val_t  self);
val_t syntax_base___MMLocalProperty___node(val_t  self);
#define LOCATE_syntax_base___MMLocalProperty___node "syntax_base::MMLocalProperty::node"
typedef val_t (* syntax_base___MMLocalProperty___is_init_t)(val_t  self);
val_t syntax_base___MMLocalProperty___is_init(val_t  self);
#define LOCATE_syntax_base___MMLocalProperty___is_init "syntax_base::MMLocalProperty::is_init"
typedef val_t (* syntax_base___MMSrcAttribute___node_t)(val_t  self);
val_t syntax_base___MMSrcAttribute___node(val_t  self);
#define LOCATE_syntax_base___MMSrcAttribute___node "syntax_base::MMSrcAttribute::(syntax_base::MMLocalProperty::node)"
typedef void (* syntax_base___MMSrcAttribute___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMSrcAttribute___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMSrcAttribute___init "syntax_base::MMSrcAttribute::init"
val_t NEW_MMSrcAttribute_syntax_base___MMSrcAttribute___init(val_t p0, val_t p1, val_t p2);
val_t NEW_MMSrcMethod_abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
typedef val_t (* syntax_base___MMAttrImplementationMethod___node_t)(val_t  self);
val_t syntax_base___MMAttrImplementationMethod___node(val_t  self);
#define LOCATE_syntax_base___MMAttrImplementationMethod___node "syntax_base::MMAttrImplementationMethod::(syntax_base::MMLocalProperty::node)"
typedef void (* syntax_base___MMAttrImplementationMethod___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMAttrImplementationMethod___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMAttrImplementationMethod___init "syntax_base::MMAttrImplementationMethod::init"
val_t NEW_MMAttrImplementationMethod_syntax_base___MMAttrImplementationMethod___init(val_t p0, val_t p1, val_t p2);
typedef void (* syntax_base___MMReadImplementationMethod___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMReadImplementationMethod___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMReadImplementationMethod___init "syntax_base::MMReadImplementationMethod::init"
val_t NEW_MMReadImplementationMethod_syntax_base___MMReadImplementationMethod___init(val_t p0, val_t p1, val_t p2);
typedef void (* syntax_base___MMWriteImplementationMethod___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMWriteImplementationMethod___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMWriteImplementationMethod___init "syntax_base::MMWriteImplementationMethod::init"
val_t NEW_MMWriteImplementationMethod_syntax_base___MMWriteImplementationMethod___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___MMMethSrcMethod___node_t)(val_t  self);
val_t syntax_base___MMMethSrcMethod___node(val_t  self);
#define LOCATE_syntax_base___MMMethSrcMethod___node "syntax_base::MMMethSrcMethod::(syntax_base::MMLocalProperty::node)"
typedef val_t (* syntax_base___MMMethSrcMethod___is_init_t)(val_t  self);
val_t syntax_base___MMMethSrcMethod___is_init(val_t  self);
#define LOCATE_syntax_base___MMMethSrcMethod___is_init "syntax_base::MMMethSrcMethod::(syntax_base::MMLocalProperty::is_init)"
typedef void (* syntax_base___MMMethSrcMethod___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMMethSrcMethod___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMMethSrcMethod___init "syntax_base::MMMethSrcMethod::init"
val_t NEW_MMMethSrcMethod_syntax_base___MMMethSrcMethod___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___MMSrcTypeProperty___node_t)(val_t  self);
val_t syntax_base___MMSrcTypeProperty___node(val_t  self);
#define LOCATE_syntax_base___MMSrcTypeProperty___node "syntax_base::MMSrcTypeProperty::(syntax_base::MMLocalProperty::node)"
typedef void (* syntax_base___MMSrcTypeProperty___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMSrcTypeProperty___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMSrcTypeProperty___init "syntax_base::MMSrcTypeProperty::init"
val_t NEW_MMSrcTypeProperty_syntax_base___MMSrcTypeProperty___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___MMImplicitInit___is_init_t)(val_t  self);
val_t syntax_base___MMImplicitInit___is_init(val_t  self);
#define LOCATE_syntax_base___MMImplicitInit___is_init "syntax_base::MMImplicitInit::(syntax_base::MMLocalProperty::is_init)"
typedef val_t (* syntax_base___MMImplicitInit___unassigned_attributes_t)(val_t  self);
val_t syntax_base___MMImplicitInit___unassigned_attributes(val_t  self);
#define LOCATE_syntax_base___MMImplicitInit___unassigned_attributes "syntax_base::MMImplicitInit::unassigned_attributes"
typedef val_t (* syntax_base___MMImplicitInit___super_inits_t)(val_t  self);
val_t syntax_base___MMImplicitInit___super_inits(val_t  self);
#define LOCATE_syntax_base___MMImplicitInit___super_inits "syntax_base::MMImplicitInit::super_inits"
typedef void (* syntax_base___MMImplicitInit___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___MMImplicitInit___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___MMImplicitInit___init "syntax_base::MMImplicitInit::init"
val_t NEW_MMImplicitInit_syntax_base___MMImplicitInit___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___Variable___to_s_t)(val_t  self);
val_t syntax_base___Variable___to_s(val_t  self);
#define LOCATE_syntax_base___Variable___to_s "syntax_base::Variable::(string::Object::to_s)"
typedef val_t (* syntax_base___Variable___name_t)(val_t  self);
val_t syntax_base___Variable___name(val_t  self);
#define LOCATE_syntax_base___Variable___name "syntax_base::Variable::name"
typedef val_t (* syntax_base___Variable___decl_t)(val_t  self);
val_t syntax_base___Variable___decl(val_t  self);
#define LOCATE_syntax_base___Variable___decl "syntax_base::Variable::decl"
typedef val_t (* syntax_base___Variable___stype_t)(val_t  self);
val_t syntax_base___Variable___stype(val_t  self);
#define LOCATE_syntax_base___Variable___stype "syntax_base::Variable::stype"
typedef void (* syntax_base___Variable___stype__eq_t)(val_t  self, val_t  param0);
void syntax_base___Variable___stype__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___Variable___stype__eq "syntax_base::Variable::stype="
typedef val_t (* syntax_base___Variable___kind_t)(val_t  self);
val_t syntax_base___Variable___kind(val_t  self);
#define LOCATE_syntax_base___Variable___kind "syntax_base::Variable::kind"
typedef void (* syntax_base___Variable___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void syntax_base___Variable___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_syntax_base___Variable___init "syntax_base::Variable::init"
val_t NEW_Variable_syntax_base___Variable___init(val_t p0, val_t p1);
typedef val_t (* syntax_base___VarVariable___kind_t)(val_t  self);
val_t syntax_base___VarVariable___kind(val_t  self);
#define LOCATE_syntax_base___VarVariable___kind "syntax_base::VarVariable::(syntax_base::Variable::kind)"
typedef void (* syntax_base___VarVariable___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void syntax_base___VarVariable___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_syntax_base___VarVariable___init "syntax_base::VarVariable::init"
val_t NEW_VarVariable_syntax_base___VarVariable___init(val_t p0, val_t p1);
typedef val_t (* syntax_base___ParamVariable___kind_t)(val_t  self);
val_t syntax_base___ParamVariable___kind(val_t  self);
#define LOCATE_syntax_base___ParamVariable___kind "syntax_base::ParamVariable::(syntax_base::Variable::kind)"
typedef void (* syntax_base___ParamVariable___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void syntax_base___ParamVariable___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_syntax_base___ParamVariable___init "syntax_base::ParamVariable::init"
val_t NEW_ParamVariable_syntax_base___ParamVariable___init(val_t p0, val_t p1);
typedef val_t (* syntax_base___AutoVariable___kind_t)(val_t  self);
val_t syntax_base___AutoVariable___kind(val_t  self);
#define LOCATE_syntax_base___AutoVariable___kind "syntax_base::AutoVariable::(syntax_base::Variable::kind)"
typedef void (* syntax_base___AutoVariable___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void syntax_base___AutoVariable___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_syntax_base___AutoVariable___init "syntax_base::AutoVariable::init"
val_t NEW_AutoVariable_syntax_base___AutoVariable___init(val_t p0, val_t p1);
typedef val_t (* syntax_base___ClosureVariable___kind_t)(val_t  self);
val_t syntax_base___ClosureVariable___kind(val_t  self);
#define LOCATE_syntax_base___ClosureVariable___kind "syntax_base::ClosureVariable::(syntax_base::Variable::kind)"
typedef val_t (* syntax_base___ClosureVariable___closure_t)(val_t  self);
val_t syntax_base___ClosureVariable___closure(val_t  self);
#define LOCATE_syntax_base___ClosureVariable___closure "syntax_base::ClosureVariable::closure"
typedef void (* syntax_base___ClosureVariable___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void syntax_base___ClosureVariable___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_syntax_base___ClosureVariable___init "syntax_base::ClosureVariable::init"
val_t NEW_ClosureVariable_syntax_base___ClosureVariable___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_object_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_object(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_object "syntax_base::AbsSyntaxVisitor::type_object"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_bool_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_bool(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_bool "syntax_base::AbsSyntaxVisitor::type_bool"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_int_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_int(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_int "syntax_base::AbsSyntaxVisitor::type_int"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_float_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_float(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_float "syntax_base::AbsSyntaxVisitor::type_float"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_char_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_char(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_char "syntax_base::AbsSyntaxVisitor::type_char"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_string_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_string(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_string "syntax_base::AbsSyntaxVisitor::type_string"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_collection_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_collection(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_collection "syntax_base::AbsSyntaxVisitor::type_collection"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_array_t)(val_t  self, val_t  param0);
val_t syntax_base___AbsSyntaxVisitor___type_array(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_array "syntax_base::AbsSyntaxVisitor::type_array"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_discrete_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_discrete(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_discrete "syntax_base::AbsSyntaxVisitor::type_discrete"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_range_t)(val_t  self, val_t  param0);
val_t syntax_base___AbsSyntaxVisitor___type_range(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_range "syntax_base::AbsSyntaxVisitor::type_range"
typedef val_t (* syntax_base___AbsSyntaxVisitor___type_none_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___type_none(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___type_none "syntax_base::AbsSyntaxVisitor::type_none"
typedef val_t (* syntax_base___AbsSyntaxVisitor___module_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___module(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___module "syntax_base::AbsSyntaxVisitor::module"
typedef void (* syntax_base___AbsSyntaxVisitor___module__eq_t)(val_t  self, val_t  param0);
void syntax_base___AbsSyntaxVisitor___module__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___module__eq "syntax_base::AbsSyntaxVisitor::module="
typedef val_t (* syntax_base___AbsSyntaxVisitor___local_class_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___local_class(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___local_class "syntax_base::AbsSyntaxVisitor::local_class"
typedef void (* syntax_base___AbsSyntaxVisitor___local_class__eq_t)(val_t  self, val_t  param0);
void syntax_base___AbsSyntaxVisitor___local_class__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___local_class__eq "syntax_base::AbsSyntaxVisitor::local_class="
typedef val_t (* syntax_base___AbsSyntaxVisitor___local_property_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___local_property(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___local_property "syntax_base::AbsSyntaxVisitor::local_property"
typedef void (* syntax_base___AbsSyntaxVisitor___local_property__eq_t)(val_t  self, val_t  param0);
void syntax_base___AbsSyntaxVisitor___local_property__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___local_property__eq "syntax_base::AbsSyntaxVisitor::local_property="
typedef val_t (* syntax_base___AbsSyntaxVisitor___tc_t)(val_t  self);
val_t syntax_base___AbsSyntaxVisitor___tc(val_t  self);
#define LOCATE_syntax_base___AbsSyntaxVisitor___tc "syntax_base::AbsSyntaxVisitor::tc"
typedef void (* syntax_base___AbsSyntaxVisitor___error_t)(val_t  self, val_t  param0, val_t  param1);
void syntax_base___AbsSyntaxVisitor___error(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_syntax_base___AbsSyntaxVisitor___error "syntax_base::AbsSyntaxVisitor::error"
typedef void (* syntax_base___AbsSyntaxVisitor___warning_t)(val_t  self, val_t  param0, val_t  param1);
void syntax_base___AbsSyntaxVisitor___warning(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_syntax_base___AbsSyntaxVisitor___warning "syntax_base::AbsSyntaxVisitor::warning"
typedef val_t (* syntax_base___AbsSyntaxVisitor___locate_t)(val_t  self, val_t  param0);
val_t syntax_base___AbsSyntaxVisitor___locate(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___locate "syntax_base::AbsSyntaxVisitor::locate"
typedef val_t (* syntax_base___AbsSyntaxVisitor___check_conform_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2);
val_t syntax_base___AbsSyntaxVisitor___check_conform(val_t  self, val_t  param0, val_t  param1, val_t  param2);
#define LOCATE_syntax_base___AbsSyntaxVisitor___check_conform "syntax_base::AbsSyntaxVisitor::check_conform"
typedef val_t (* syntax_base___AbsSyntaxVisitor___check_expr_t)(val_t  self, val_t  param0);
val_t syntax_base___AbsSyntaxVisitor___check_expr(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AbsSyntaxVisitor___check_expr "syntax_base::AbsSyntaxVisitor::check_expr"
typedef val_t (* syntax_base___AbsSyntaxVisitor___check_conform_expr_t)(val_t  self, val_t  param0, val_t  param1);
val_t syntax_base___AbsSyntaxVisitor___check_conform_expr(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_syntax_base___AbsSyntaxVisitor___check_conform_expr "syntax_base::AbsSyntaxVisitor::check_conform_expr"
typedef val_t (* syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_t)(val_t  self, val_t  param0, val_t  param1);
val_t syntax_base___AbsSyntaxVisitor___check_conform_multiexpr(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr "syntax_base::AbsSyntaxVisitor::check_conform_multiexpr"
typedef void (* syntax_base___AbsSyntaxVisitor___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void syntax_base___AbsSyntaxVisitor___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_syntax_base___AbsSyntaxVisitor___init "syntax_base::AbsSyntaxVisitor::init"
val_t NEW_AbsSyntaxVisitor_syntax_base___AbsSyntaxVisitor___init(val_t p0, val_t p1);
val_t NEW_PNode_parser_nodes___PNode___init();
typedef void (* syntax_base___PNode___accept_abs_syntax_visitor_t)(val_t  self, val_t  param0);
void syntax_base___PNode___accept_abs_syntax_visitor(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PNode___accept_abs_syntax_visitor "syntax_base::PNode::accept_abs_syntax_visitor"
val_t NEW_Token_parser_nodes___PNode___init();
typedef val_t (* syntax_base___Token___to_symbol_t)(val_t  self);
val_t syntax_base___Token___to_symbol(val_t  self);
#define LOCATE_syntax_base___Token___to_symbol "syntax_base::Token::to_symbol"
val_t NEW_PClassdef_parser_nodes___PNode___init();
typedef val_t (* syntax_base___PClassdef___local_class_t)(val_t  self);
val_t syntax_base___PClassdef___local_class(val_t  self);
#define LOCATE_syntax_base___PClassdef___local_class "syntax_base::PClassdef::local_class"
val_t NEW_AAttrPropdef_parser_nodes___PNode___init();
val_t NEW_AAttrPropdef_parser_prod___AAttrPropdef___empty_init();
val_t NEW_AAttrPropdef_parser_prod___AAttrPropdef___init_aattrpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6, val_t p7, val_t p8, val_t p9);
typedef val_t (* syntax_base___AAttrPropdef___prop_t)(val_t  self);
val_t syntax_base___AAttrPropdef___prop(val_t  self);
#define LOCATE_syntax_base___AAttrPropdef___prop "syntax_base::AAttrPropdef::prop"
typedef val_t (* syntax_base___AAttrPropdef___readmethod_t)(val_t  self);
val_t syntax_base___AAttrPropdef___readmethod(val_t  self);
#define LOCATE_syntax_base___AAttrPropdef___readmethod "syntax_base::AAttrPropdef::readmethod"
typedef val_t (* syntax_base___AAttrPropdef___writemethod_t)(val_t  self);
val_t syntax_base___AAttrPropdef___writemethod(val_t  self);
#define LOCATE_syntax_base___AAttrPropdef___writemethod "syntax_base::AAttrPropdef::writemethod"
val_t NEW_AMethPropdef_parser_nodes___PNode___init();
val_t NEW_AMethPropdef_parser_prod___AMethPropdef___empty_init();
val_t NEW_AMethPropdef_parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef val_t (* syntax_base___AMethPropdef___method_t)(val_t  self);
val_t syntax_base___AMethPropdef___method(val_t  self);
#define LOCATE_syntax_base___AMethPropdef___method "syntax_base::AMethPropdef::method"
typedef val_t (* syntax_base___AMethPropdef___self_var_t)(val_t  self);
val_t syntax_base___AMethPropdef___self_var(val_t  self);
#define LOCATE_syntax_base___AMethPropdef___self_var "syntax_base::AMethPropdef::self_var"
val_t NEW_ATypePropdef_parser_nodes___PNode___init();
val_t NEW_ATypePropdef_parser_prod___ATypePropdef___empty_init();
val_t NEW_ATypePropdef_parser_prod___ATypePropdef___init_atypepropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5);
typedef val_t (* syntax_base___ATypePropdef___prop_t)(val_t  self);
val_t syntax_base___ATypePropdef___prop(val_t  self);
#define LOCATE_syntax_base___ATypePropdef___prop "syntax_base::ATypePropdef::prop"
val_t NEW_PParam_parser_nodes___PNode___init();
typedef val_t (* syntax_base___PParam___position_t)(val_t  self);
val_t syntax_base___PParam___position(val_t  self);
#define LOCATE_syntax_base___PParam___position "syntax_base::PParam::position"
typedef val_t (* syntax_base___PParam___variable_t)(val_t  self);
val_t syntax_base___PParam___variable(val_t  self);
#define LOCATE_syntax_base___PParam___variable "syntax_base::PParam::variable"
val_t NEW_PClosureDecl_parser_nodes___PNode___init();
typedef val_t (* syntax_base___PClosureDecl___variable_t)(val_t  self);
val_t syntax_base___PClosureDecl___variable(val_t  self);
#define LOCATE_syntax_base___PClosureDecl___variable "syntax_base::PClosureDecl::variable"
val_t NEW_PType_parser_nodes___PNode___init();
typedef val_t (* syntax_base___PType___get_local_class_t)(val_t  self, val_t  param0);
val_t syntax_base___PType___get_local_class(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PType___get_local_class "syntax_base::PType::get_local_class"
typedef val_t (* syntax_base___PType___get_stype_t)(val_t  self, val_t  param0);
val_t syntax_base___PType___get_stype(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PType___get_stype "syntax_base::PType::get_stype"
typedef val_t (* syntax_base___PType___get_unchecked_stype_t)(val_t  self, val_t  param0);
val_t syntax_base___PType___get_unchecked_stype(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PType___get_unchecked_stype "syntax_base::PType::get_unchecked_stype"
typedef void (* syntax_base___PType___check_conform_t)(val_t  self, val_t  param0);
void syntax_base___PType___check_conform(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PType___check_conform "syntax_base::PType::check_conform"
val_t NEW_AType_parser_nodes___PNode___init();
val_t NEW_AType_parser_prod___AType___empty_init();
val_t NEW_AType_parser_prod___AType___init_atype(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___AType___get_local_class_t)(val_t  self, val_t  param0);
val_t syntax_base___AType___get_local_class(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AType___get_local_class "syntax_base::AType::(syntax_base::PType::get_local_class)"
typedef val_t (* syntax_base___AType___get_stype_t)(val_t  self, val_t  param0);
val_t syntax_base___AType___get_stype(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AType___get_stype "syntax_base::AType::(syntax_base::PType::get_stype)"
typedef val_t (* syntax_base___AType___get_unchecked_stype_t)(val_t  self, val_t  param0);
val_t syntax_base___AType___get_unchecked_stype(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AType___get_unchecked_stype "syntax_base::AType::(syntax_base::PType::get_unchecked_stype)"
typedef void (* syntax_base___AType___check_conform_t)(val_t  self, val_t  param0);
void syntax_base___AType___check_conform(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AType___check_conform "syntax_base::AType::(syntax_base::PType::check_conform)"
val_t NEW_PExpr_parser_nodes___PNode___init();
typedef val_t (* syntax_base___PExpr___is_typed_t)(val_t  self);
val_t syntax_base___PExpr___is_typed(val_t  self);
#define LOCATE_syntax_base___PExpr___is_typed "syntax_base::PExpr::is_typed"
typedef val_t (* syntax_base___PExpr___is_statement_t)(val_t  self);
val_t syntax_base___PExpr___is_statement(val_t  self);
#define LOCATE_syntax_base___PExpr___is_statement "syntax_base::PExpr::is_statement"
typedef val_t (* syntax_base___PExpr___stype_t)(val_t  self);
val_t syntax_base___PExpr___stype(val_t  self);
#define LOCATE_syntax_base___PExpr___stype "syntax_base::PExpr::stype"
val_t NEW_AVardeclExpr_parser_nodes___PNode___init();
val_t NEW_AVardeclExpr_parser_prod___AVardeclExpr___empty_init();
val_t NEW_AVardeclExpr_parser_prod___AVardeclExpr___init_avardeclexpr(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef val_t (* syntax_base___AVardeclExpr___variable_t)(val_t  self);
val_t syntax_base___AVardeclExpr___variable(val_t  self);
#define LOCATE_syntax_base___AVardeclExpr___variable "syntax_base::AVardeclExpr::variable"
typedef void (* syntax_base___AVardeclExpr___variable__eq_t)(val_t  self, val_t  param0);
void syntax_base___AVardeclExpr___variable__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AVardeclExpr___variable__eq "syntax_base::AVardeclExpr::variable="
val_t NEW_AForExpr_parser_nodes___PNode___init();
val_t NEW_AForExpr_parser_prod___AForExpr___empty_init();
val_t NEW_AForExpr_parser_prod___AForExpr___init_aforexpr(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef val_t (* syntax_base___AForExpr___variable_t)(val_t  self);
val_t syntax_base___AForExpr___variable(val_t  self);
#define LOCATE_syntax_base___AForExpr___variable "syntax_base::AForExpr::variable"
typedef void (* syntax_base___AForExpr___variable__eq_t)(val_t  self, val_t  param0);
void syntax_base___AForExpr___variable__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AForExpr___variable__eq "syntax_base::AForExpr::variable="
val_t NEW_ASelfExpr_parser_nodes___PNode___init();
val_t NEW_ASelfExpr_parser_prod___ASelfExpr___empty_init();
val_t NEW_ASelfExpr_parser_prod___ASelfExpr___init_aselfexpr(val_t p0);
typedef val_t (* syntax_base___ASelfExpr___variable_t)(val_t  self);
val_t syntax_base___ASelfExpr___variable(val_t  self);
#define LOCATE_syntax_base___ASelfExpr___variable "syntax_base::ASelfExpr::variable"
typedef void (* syntax_base___ASelfExpr___variable__eq_t)(val_t  self, val_t  param0);
void syntax_base___ASelfExpr___variable__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___ASelfExpr___variable__eq "syntax_base::ASelfExpr::variable="
val_t NEW_AVarFormExpr_parser_nodes___PNode___init();
typedef val_t (* syntax_base___AVarFormExpr___variable_t)(val_t  self);
val_t syntax_base___AVarFormExpr___variable(val_t  self);
#define LOCATE_syntax_base___AVarFormExpr___variable "syntax_base::AVarFormExpr::variable"
typedef void (* syntax_base___AVarFormExpr___variable__eq_t)(val_t  self, val_t  param0);
void syntax_base___AVarFormExpr___variable__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AVarFormExpr___variable__eq "syntax_base::AVarFormExpr::variable="
val_t NEW_AClosureCallExpr_parser_nodes___PNode___init();
val_t NEW_AClosureCallExpr_parser_prod___AClosureCallExpr___empty_init();
val_t NEW_AClosureCallExpr_parser_prod___AClosureCallExpr___init_aclosurecallexpr(val_t p0, val_t p1, val_t p2);
typedef val_t (* syntax_base___AClosureCallExpr___variable_t)(val_t  self);
val_t syntax_base___AClosureCallExpr___variable(val_t  self);
#define LOCATE_syntax_base___AClosureCallExpr___variable "syntax_base::AClosureCallExpr::variable"
typedef void (* syntax_base___AClosureCallExpr___variable__eq_t)(val_t  self, val_t  param0);
void syntax_base___AClosureCallExpr___variable__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___AClosureCallExpr___variable__eq "syntax_base::AClosureCallExpr::variable="
val_t NEW_PClosureDef_parser_nodes___PNode___init();
typedef val_t (* syntax_base___PClosureDef___closure_t)(val_t  self);
val_t syntax_base___PClosureDef___closure(val_t  self);
#define LOCATE_syntax_base___PClosureDef___closure "syntax_base::PClosureDef::closure"
typedef void (* syntax_base___PClosureDef___closure__eq_t)(val_t  self, val_t  param0);
void syntax_base___PClosureDef___closure__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PClosureDef___closure__eq "syntax_base::PClosureDef::closure="
typedef val_t (* syntax_base___PClosureDef___variables_t)(val_t  self);
val_t syntax_base___PClosureDef___variables(val_t  self);
#define LOCATE_syntax_base___PClosureDef___variables "syntax_base::PClosureDef::variables"
typedef void (* syntax_base___PClosureDef___variables__eq_t)(val_t  self, val_t  param0);
void syntax_base___PClosureDef___variables__eq(val_t  self, val_t  param0);
#define LOCATE_syntax_base___PClosureDef___variables__eq "syntax_base::PClosureDef::variables="
#endif
