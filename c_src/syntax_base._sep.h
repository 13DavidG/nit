/* This C header file is generated by NIT to compile modules and programs that requires syntax_base. */
#ifndef syntax_base_sep
#define syntax_base_sep
#include "parser._sep.h"
#include "mmloader._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_MMSrcModule[];

extern const classtable_elt_t VFT_MMSrcLocalClass[];

extern const classtable_elt_t VFT_MMSrcAttribute[];

extern const classtable_elt_t VFT_MMSrcMethod[];

extern const classtable_elt_t VFT_MMAttrImplementationMethod[];

extern const classtable_elt_t VFT_MMReadImplementationMethod[];

extern const classtable_elt_t VFT_MMWriteImplementationMethod[];

extern const classtable_elt_t VFT_MMMethSrcMethod[];

extern const classtable_elt_t VFT_MMSrcTypeProperty[];

extern const classtable_elt_t VFT_MMImplicitInit[];

extern const classtable_elt_t VFT_Variable[];

extern const classtable_elt_t VFT_VarVariable[];

extern const classtable_elt_t VFT_ParamVariable[];

extern const classtable_elt_t VFT_AutoVariable[];

extern const classtable_elt_t VFT_ClosureVariable[];

extern const classtable_elt_t VFT_AbsSyntaxVisitor[];

extern const classtable_elt_t VFT_AAbsAbsSendExpr[];

extern const classtable_elt_t VFT_AAbsSendExpr[];

extern const classtable_elt_t VFT_ASuperInitCall[];

extern const classtable_elt_t VFT_ASendReassignExpr[];
extern const char *LOCATE_syntax_base;
extern const int SFT_syntax_base[];
#define ID_MMSrcModule (SFT_syntax_base[0])
#define COLOR_MMSrcModule (SFT_syntax_base[1])
#define ATTR_syntax_base___MMSrcModule____nodes(recv) ATTR(recv, (SFT_syntax_base[2] + 0))
#define ATTR_syntax_base___MMSrcModule____src_local_classes(recv) ATTR(recv, (SFT_syntax_base[2] + 1))
#define INIT_TABLE_POS_MMSrcModule (SFT_syntax_base[3] + 0)
#define CALL_syntax_base___MMSrcModule___clear_ast(recv) ((syntax_base___MMSrcModule___clear_ast_t)CALL((recv), (SFT_syntax_base[3] + 1)))
#define CALL_syntax_base___MMSrcModule___node(recv) ((syntax_base___MMSrcModule___node_t)CALL((recv), (SFT_syntax_base[3] + 2)))
#define CALL_syntax_base___MMSrcModule___src_local_classes(recv) ((syntax_base___MMSrcModule___src_local_classes_t)CALL((recv), (SFT_syntax_base[3] + 3)))
#define CALL_syntax_base___MMSrcModule___init(recv) ((syntax_base___MMSrcModule___init_t)CALL((recv), (SFT_syntax_base[3] + 4)))
#define CALL_syntax_base___MMModule___nodes(recv) ((syntax_base___MMModule___nodes_t)CALL((recv), (SFT_syntax_base[4] + 0)))
#define CALL_syntax_base___MMModule___nodes__eq(recv) ((syntax_base___MMModule___nodes__eq_t)CALL((recv), (SFT_syntax_base[4] + 1)))
#define CALL_syntax_base___MMGlobalClass___check_visibility(recv) ((syntax_base___MMGlobalClass___check_visibility_t)CALL((recv), (SFT_syntax_base[5] + 0)))
#define ID_MMSrcLocalClass (SFT_syntax_base[6])
#define COLOR_MMSrcLocalClass (SFT_syntax_base[7])
#define ATTR_syntax_base___MMSrcLocalClass____formal_dict(recv) ATTR(recv, (SFT_syntax_base[8] + 0))
#define ATTR_syntax_base___MMSrcLocalClass____src_local_properties(recv) ATTR(recv, (SFT_syntax_base[8] + 1))
#define INIT_TABLE_POS_MMSrcLocalClass (SFT_syntax_base[9] + 0)
#define CALL_syntax_base___MMSrcLocalClass___node(recv) ((syntax_base___MMSrcLocalClass___node_t)CALL((recv), (SFT_syntax_base[9] + 1)))
#define CALL_syntax_base___MMSrcLocalClass___formal_dict(recv) ((syntax_base___MMSrcLocalClass___formal_dict_t)CALL((recv), (SFT_syntax_base[9] + 2)))
#define CALL_syntax_base___MMSrcLocalClass___src_local_properties(recv) ((syntax_base___MMSrcLocalClass___src_local_properties_t)CALL((recv), (SFT_syntax_base[9] + 3)))
#define CALL_syntax_base___MMSrcLocalClass___init(recv) ((syntax_base___MMSrcLocalClass___init_t)CALL((recv), (SFT_syntax_base[9] + 4)))
#define CALL_syntax_base___MMGlobalProperty___check_visibility(recv) ((syntax_base___MMGlobalProperty___check_visibility_t)CALL((recv), (SFT_syntax_base[10] + 0)))
#define CALL_syntax_base___MMLocalProperty___node(recv) ((syntax_base___MMLocalProperty___node_t)CALL((recv), (SFT_syntax_base[11] + 0)))
#define CALL_syntax_base___MMLocalProperty___is_init(recv) ((syntax_base___MMLocalProperty___is_init_t)CALL((recv), (SFT_syntax_base[11] + 1)))
#define ID_MMSrcAttribute (SFT_syntax_base[12])
#define COLOR_MMSrcAttribute (SFT_syntax_base[13])
#define INIT_TABLE_POS_MMSrcAttribute (SFT_syntax_base[14] + 0)
#define CALL_syntax_base___MMSrcAttribute___init(recv) ((syntax_base___MMSrcAttribute___init_t)CALL((recv), (SFT_syntax_base[14] + 1)))
#define ID_MMSrcMethod (SFT_syntax_base[15])
#define COLOR_MMSrcMethod (SFT_syntax_base[16])
#define INIT_TABLE_POS_MMSrcMethod (SFT_syntax_base[17] + 0)
#define ID_MMAttrImplementationMethod (SFT_syntax_base[18])
#define COLOR_MMAttrImplementationMethod (SFT_syntax_base[19])
#define INIT_TABLE_POS_MMAttrImplementationMethod (SFT_syntax_base[20] + 0)
#define CALL_syntax_base___MMAttrImplementationMethod___init(recv) ((syntax_base___MMAttrImplementationMethod___init_t)CALL((recv), (SFT_syntax_base[20] + 1)))
#define ID_MMReadImplementationMethod (SFT_syntax_base[21])
#define COLOR_MMReadImplementationMethod (SFT_syntax_base[22])
#define INIT_TABLE_POS_MMReadImplementationMethod (SFT_syntax_base[23] + 0)
#define CALL_syntax_base___MMReadImplementationMethod___init(recv) ((syntax_base___MMReadImplementationMethod___init_t)CALL((recv), (SFT_syntax_base[23] + 1)))
#define ID_MMWriteImplementationMethod (SFT_syntax_base[24])
#define COLOR_MMWriteImplementationMethod (SFT_syntax_base[25])
#define INIT_TABLE_POS_MMWriteImplementationMethod (SFT_syntax_base[26] + 0)
#define CALL_syntax_base___MMWriteImplementationMethod___init(recv) ((syntax_base___MMWriteImplementationMethod___init_t)CALL((recv), (SFT_syntax_base[26] + 1)))
#define ID_MMMethSrcMethod (SFT_syntax_base[27])
#define COLOR_MMMethSrcMethod (SFT_syntax_base[28])
#define ATTR_syntax_base___MMMethSrcMethod____is_init(recv) ATTR(recv, (SFT_syntax_base[29] + 0))
#define ATTR_syntax_base___MMMethSrcMethod____is_intern(recv) ATTR(recv, (SFT_syntax_base[29] + 1))
#define ATTR_syntax_base___MMMethSrcMethod____is_abstract(recv) ATTR(recv, (SFT_syntax_base[29] + 2))
#define ATTR_syntax_base___MMMethSrcMethod____extern_name(recv) ATTR(recv, (SFT_syntax_base[29] + 3))
#define INIT_TABLE_POS_MMMethSrcMethod (SFT_syntax_base[30] + 0)
#define CALL_syntax_base___MMMethSrcMethod___extern_name__eq(recv) ((syntax_base___MMMethSrcMethod___extern_name__eq_t)CALL((recv), (SFT_syntax_base[30] + 1)))
#define CALL_syntax_base___MMMethSrcMethod___init(recv) ((syntax_base___MMMethSrcMethod___init_t)CALL((recv), (SFT_syntax_base[30] + 2)))
#define ID_MMSrcTypeProperty (SFT_syntax_base[31])
#define COLOR_MMSrcTypeProperty (SFT_syntax_base[32])
#define INIT_TABLE_POS_MMSrcTypeProperty (SFT_syntax_base[33] + 0)
#define CALL_syntax_base___MMSrcTypeProperty___init(recv) ((syntax_base___MMSrcTypeProperty___init_t)CALL((recv), (SFT_syntax_base[33] + 1)))
#define ID_MMImplicitInit (SFT_syntax_base[34])
#define COLOR_MMImplicitInit (SFT_syntax_base[35])
#define ATTR_syntax_base___MMImplicitInit____unassigned_attributes(recv) ATTR(recv, (SFT_syntax_base[36] + 0))
#define ATTR_syntax_base___MMImplicitInit____super_inits(recv) ATTR(recv, (SFT_syntax_base[36] + 1))
#define INIT_TABLE_POS_MMImplicitInit (SFT_syntax_base[37] + 0)
#define CALL_syntax_base___MMImplicitInit___super_init(recv) ((syntax_base___MMImplicitInit___super_init_t)CALL((recv), (SFT_syntax_base[37] + 1)))
#define CALL_syntax_base___MMImplicitInit___unassigned_attributes(recv) ((syntax_base___MMImplicitInit___unassigned_attributes_t)CALL((recv), (SFT_syntax_base[37] + 2)))
#define CALL_syntax_base___MMImplicitInit___super_inits(recv) ((syntax_base___MMImplicitInit___super_inits_t)CALL((recv), (SFT_syntax_base[37] + 3)))
#define CALL_syntax_base___MMImplicitInit___init(recv) ((syntax_base___MMImplicitInit___init_t)CALL((recv), (SFT_syntax_base[37] + 4)))
#define ID_Variable (SFT_syntax_base[38])
#define COLOR_Variable (SFT_syntax_base[39])
#define ATTR_syntax_base___Variable____name(recv) ATTR(recv, (SFT_syntax_base[40] + 0))
#define ATTR_syntax_base___Variable____decl(recv) ATTR(recv, (SFT_syntax_base[40] + 1))
#define ATTR_syntax_base___Variable____stype(recv) ATTR(recv, (SFT_syntax_base[40] + 2))
#define INIT_TABLE_POS_Variable (SFT_syntax_base[41] + 0)
#define CALL_syntax_base___Variable___name(recv) ((syntax_base___Variable___name_t)CALL((recv), (SFT_syntax_base[41] + 1)))
#define CALL_syntax_base___Variable___decl(recv) ((syntax_base___Variable___decl_t)CALL((recv), (SFT_syntax_base[41] + 2)))
#define CALL_syntax_base___Variable___stype(recv) ((syntax_base___Variable___stype_t)CALL((recv), (SFT_syntax_base[41] + 3)))
#define CALL_syntax_base___Variable___stype__eq(recv) ((syntax_base___Variable___stype__eq_t)CALL((recv), (SFT_syntax_base[41] + 4)))
#define CALL_syntax_base___Variable___kind(recv) ((syntax_base___Variable___kind_t)CALL((recv), (SFT_syntax_base[41] + 5)))
#define CALL_syntax_base___Variable___init(recv) ((syntax_base___Variable___init_t)CALL((recv), (SFT_syntax_base[41] + 6)))
#define ID_VarVariable (SFT_syntax_base[42])
#define COLOR_VarVariable (SFT_syntax_base[43])
#define INIT_TABLE_POS_VarVariable (SFT_syntax_base[44] + 0)
#define CALL_syntax_base___VarVariable___init(recv) ((syntax_base___VarVariable___init_t)CALL((recv), (SFT_syntax_base[44] + 1)))
#define ID_ParamVariable (SFT_syntax_base[45])
#define COLOR_ParamVariable (SFT_syntax_base[46])
#define INIT_TABLE_POS_ParamVariable (SFT_syntax_base[47] + 0)
#define CALL_syntax_base___ParamVariable___init(recv) ((syntax_base___ParamVariable___init_t)CALL((recv), (SFT_syntax_base[47] + 1)))
#define ID_AutoVariable (SFT_syntax_base[48])
#define COLOR_AutoVariable (SFT_syntax_base[49])
#define INIT_TABLE_POS_AutoVariable (SFT_syntax_base[50] + 0)
#define CALL_syntax_base___AutoVariable___init(recv) ((syntax_base___AutoVariable___init_t)CALL((recv), (SFT_syntax_base[50] + 1)))
#define ID_ClosureVariable (SFT_syntax_base[51])
#define COLOR_ClosureVariable (SFT_syntax_base[52])
#define ATTR_syntax_base___ClosureVariable____closure(recv) ATTR(recv, (SFT_syntax_base[53] + 0))
#define INIT_TABLE_POS_ClosureVariable (SFT_syntax_base[54] + 0)
#define CALL_syntax_base___ClosureVariable___closure(recv) ((syntax_base___ClosureVariable___closure_t)CALL((recv), (SFT_syntax_base[54] + 1)))
#define CALL_syntax_base___ClosureVariable___init(recv) ((syntax_base___ClosureVariable___init_t)CALL((recv), (SFT_syntax_base[54] + 2)))
#define ID_AbsSyntaxVisitor (SFT_syntax_base[55])
#define COLOR_AbsSyntaxVisitor (SFT_syntax_base[56])
#define ATTR_syntax_base___AbsSyntaxVisitor____mmmodule(recv) ATTR(recv, (SFT_syntax_base[57] + 0))
#define ATTR_syntax_base___AbsSyntaxVisitor____local_class(recv) ATTR(recv, (SFT_syntax_base[57] + 1))
#define ATTR_syntax_base___AbsSyntaxVisitor____local_property(recv) ATTR(recv, (SFT_syntax_base[57] + 2))
#define ATTR_syntax_base___AbsSyntaxVisitor____tc(recv) ATTR(recv, (SFT_syntax_base[57] + 3))
#define INIT_TABLE_POS_AbsSyntaxVisitor (SFT_syntax_base[58] + 0)
#define CALL_syntax_base___AbsSyntaxVisitor___get_type_by_name(recv) ((syntax_base___AbsSyntaxVisitor___get_type_by_name_t)CALL((recv), (SFT_syntax_base[58] + 1)))
#define CALL_syntax_base___AbsSyntaxVisitor___get_instantiated_type_by_name(recv) ((syntax_base___AbsSyntaxVisitor___get_instantiated_type_by_name_t)CALL((recv), (SFT_syntax_base[58] + 2)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_object(recv) ((syntax_base___AbsSyntaxVisitor___type_object_t)CALL((recv), (SFT_syntax_base[58] + 3)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_bool(recv) ((syntax_base___AbsSyntaxVisitor___type_bool_t)CALL((recv), (SFT_syntax_base[58] + 4)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_int(recv) ((syntax_base___AbsSyntaxVisitor___type_int_t)CALL((recv), (SFT_syntax_base[58] + 5)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_float(recv) ((syntax_base___AbsSyntaxVisitor___type_float_t)CALL((recv), (SFT_syntax_base[58] + 6)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_char(recv) ((syntax_base___AbsSyntaxVisitor___type_char_t)CALL((recv), (SFT_syntax_base[58] + 7)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_string(recv) ((syntax_base___AbsSyntaxVisitor___type_string_t)CALL((recv), (SFT_syntax_base[58] + 8)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_collection(recv) ((syntax_base___AbsSyntaxVisitor___type_collection_t)CALL((recv), (SFT_syntax_base[58] + 9)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_nativestring(recv) ((syntax_base___AbsSyntaxVisitor___type_nativestring_t)CALL((recv), (SFT_syntax_base[58] + 10)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_array(recv) ((syntax_base___AbsSyntaxVisitor___type_array_t)CALL((recv), (SFT_syntax_base[58] + 11)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_discrete(recv) ((syntax_base___AbsSyntaxVisitor___type_discrete_t)CALL((recv), (SFT_syntax_base[58] + 12)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_range(recv) ((syntax_base___AbsSyntaxVisitor___type_range_t)CALL((recv), (SFT_syntax_base[58] + 13)))
#define CALL_syntax_base___AbsSyntaxVisitor___type_none(recv) ((syntax_base___AbsSyntaxVisitor___type_none_t)CALL((recv), (SFT_syntax_base[58] + 14)))
#define CALL_syntax_base___AbsSyntaxVisitor___get_method(recv) ((syntax_base___AbsSyntaxVisitor___get_method_t)CALL((recv), (SFT_syntax_base[58] + 15)))
#define CALL_syntax_base___AbsSyntaxVisitor___mmmodule(recv) ((syntax_base___AbsSyntaxVisitor___mmmodule_t)CALL((recv), (SFT_syntax_base[58] + 16)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_class(recv) ((syntax_base___AbsSyntaxVisitor___local_class_t)CALL((recv), (SFT_syntax_base[58] + 17)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_class__eq(recv) ((syntax_base___AbsSyntaxVisitor___local_class__eq_t)CALL((recv), (SFT_syntax_base[58] + 18)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_property(recv) ((syntax_base___AbsSyntaxVisitor___local_property_t)CALL((recv), (SFT_syntax_base[58] + 19)))
#define CALL_syntax_base___AbsSyntaxVisitor___local_property__eq(recv) ((syntax_base___AbsSyntaxVisitor___local_property__eq_t)CALL((recv), (SFT_syntax_base[58] + 20)))
#define CALL_syntax_base___AbsSyntaxVisitor___tc(recv) ((syntax_base___AbsSyntaxVisitor___tc_t)CALL((recv), (SFT_syntax_base[58] + 21)))
#define CALL_syntax_base___AbsSyntaxVisitor___error(recv) ((syntax_base___AbsSyntaxVisitor___error_t)CALL((recv), (SFT_syntax_base[58] + 22)))
#define CALL_syntax_base___AbsSyntaxVisitor___fatal_error(recv) ((syntax_base___AbsSyntaxVisitor___fatal_error_t)CALL((recv), (SFT_syntax_base[58] + 23)))
#define CALL_syntax_base___AbsSyntaxVisitor___warning(recv) ((syntax_base___AbsSyntaxVisitor___warning_t)CALL((recv), (SFT_syntax_base[58] + 24)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_conform(recv) ((syntax_base___AbsSyntaxVisitor___check_conform_t)CALL((recv), (SFT_syntax_base[58] + 25)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_expr(recv) ((syntax_base___AbsSyntaxVisitor___check_expr_t)CALL((recv), (SFT_syntax_base[58] + 26)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_conform_expr(recv) ((syntax_base___AbsSyntaxVisitor___check_conform_expr_t)CALL((recv), (SFT_syntax_base[58] + 27)))
#define CALL_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr(recv) ((syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_t)CALL((recv), (SFT_syntax_base[58] + 28)))
#define CALL_syntax_base___AbsSyntaxVisitor___init(recv) ((syntax_base___AbsSyntaxVisitor___init_t)CALL((recv), (SFT_syntax_base[58] + 29)))
#define CALL_syntax_base___ANode___accept_abs_syntax_visitor(recv) ((syntax_base___ANode___accept_abs_syntax_visitor_t)CALL((recv), (SFT_syntax_base[59] + 0)))
#define ATTR_syntax_base___Token____symbol_cache(recv) ATTR(recv, (SFT_syntax_base[60] + 0))
#define CALL_syntax_base___Token___to_symbol(recv) ((syntax_base___Token___to_symbol_t)CALL((recv), (SFT_syntax_base[61] + 0)))
#define ATTR_syntax_base___AClassdef____next_node(recv) ATTR(recv, (SFT_syntax_base[62] + 0))
#define CALL_syntax_base___AClassdef___local_class(recv) ((syntax_base___AClassdef___local_class_t)CALL((recv), (SFT_syntax_base[63] + 0)))
#define CALL_syntax_base___AClassdef___next_node(recv) ((syntax_base___AClassdef___next_node_t)CALL((recv), (SFT_syntax_base[63] + 1)))
#define CALL_syntax_base___AClassdef___next_node__eq(recv) ((syntax_base___AClassdef___next_node__eq_t)CALL((recv), (SFT_syntax_base[63] + 2)))
#define CALL_syntax_base___APropdef___self_var(recv) ((syntax_base___APropdef___self_var_t)CALL((recv), (SFT_syntax_base[64] + 0)))
#define CALL_syntax_base___AAttrPropdef___prop(recv) ((syntax_base___AAttrPropdef___prop_t)CALL((recv), (SFT_syntax_base[65] + 0)))
#define CALL_syntax_base___AAttrPropdef___readmethod(recv) ((syntax_base___AAttrPropdef___readmethod_t)CALL((recv), (SFT_syntax_base[65] + 1)))
#define CALL_syntax_base___AAttrPropdef___writemethod(recv) ((syntax_base___AAttrPropdef___writemethod_t)CALL((recv), (SFT_syntax_base[65] + 2)))
#define ATTR_syntax_base___AConcreteInitPropdef____super_init_calls(recv) ATTR(recv, (SFT_syntax_base[66] + 0))
#define ATTR_syntax_base___AConcreteInitPropdef____explicit_super_init_calls(recv) ATTR(recv, (SFT_syntax_base[66] + 1))
#define CALL_syntax_base___AConcreteInitPropdef___super_init_calls(recv) ((syntax_base___AConcreteInitPropdef___super_init_calls_t)CALL((recv), (SFT_syntax_base[67] + 0)))
#define CALL_syntax_base___AConcreteInitPropdef___explicit_super_init_calls(recv) ((syntax_base___AConcreteInitPropdef___explicit_super_init_calls_t)CALL((recv), (SFT_syntax_base[67] + 1)))
#define CALL_syntax_base___AMethPropdef___method(recv) ((syntax_base___AMethPropdef___method_t)CALL((recv), (SFT_syntax_base[68] + 0)))
#define CALL_syntax_base___ATypePropdef___prop(recv) ((syntax_base___ATypePropdef___prop_t)CALL((recv), (SFT_syntax_base[69] + 0)))
#define CALL_syntax_base___AParam___position(recv) ((syntax_base___AParam___position_t)CALL((recv), (SFT_syntax_base[70] + 0)))
#define CALL_syntax_base___AParam___variable(recv) ((syntax_base___AParam___variable_t)CALL((recv), (SFT_syntax_base[70] + 1)))
#define CALL_syntax_base___AClosureDecl___position(recv) ((syntax_base___AClosureDecl___position_t)CALL((recv), (SFT_syntax_base[71] + 0)))
#define CALL_syntax_base___AClosureDecl___variable(recv) ((syntax_base___AClosureDecl___variable_t)CALL((recv), (SFT_syntax_base[71] + 1)))
#define ATTR_syntax_base___AType____stype_cache(recv) ATTR(recv, (SFT_syntax_base[72] + 0))
#define ATTR_syntax_base___AType____stype_cached(recv) ATTR(recv, (SFT_syntax_base[72] + 1))
#define CALL_syntax_base___AType___is_typed(recv) ((syntax_base___AType___is_typed_t)CALL((recv), (SFT_syntax_base[73] + 0)))
#define CALL_syntax_base___AType___stype(recv) ((syntax_base___AType___stype_t)CALL((recv), (SFT_syntax_base[73] + 1)))
#define CALL_syntax_base___AType___get_local_class(recv) ((syntax_base___AType___get_local_class_t)CALL((recv), (SFT_syntax_base[73] + 2)))
#define CALL_syntax_base___AType___get_unchecked_stype(recv) ((syntax_base___AType___get_unchecked_stype_t)CALL((recv), (SFT_syntax_base[73] + 3)))
#define CALL_syntax_base___AType___get_stype(recv) ((syntax_base___AType___get_stype_t)CALL((recv), (SFT_syntax_base[73] + 4)))
#define CALL_syntax_base___AType___check_conform(recv) ((syntax_base___AType___check_conform_t)CALL((recv), (SFT_syntax_base[73] + 5)))
#define CALL_syntax_base___AExpr___is_typed(recv) ((syntax_base___AExpr___is_typed_t)CALL((recv), (SFT_syntax_base[74] + 0)))
#define CALL_syntax_base___AExpr___is_statement(recv) ((syntax_base___AExpr___is_statement_t)CALL((recv), (SFT_syntax_base[74] + 1)))
#define CALL_syntax_base___AExpr___stype(recv) ((syntax_base___AExpr___stype_t)CALL((recv), (SFT_syntax_base[74] + 2)))
#define ID_AAbsAbsSendExpr (SFT_syntax_base[75])
#define COLOR_AAbsAbsSendExpr (SFT_syntax_base[76])
#define INIT_TABLE_POS_AAbsAbsSendExpr (SFT_syntax_base[77] + 0)
#define CALL_syntax_base___AAbsAbsSendExpr___prop_signature(recv) ((syntax_base___AAbsAbsSendExpr___prop_signature_t)CALL((recv), (SFT_syntax_base[77] + 1)))
#define CALL_syntax_base___AAbsAbsSendExpr___raw_arguments(recv) ((syntax_base___AAbsAbsSendExpr___raw_arguments_t)CALL((recv), (SFT_syntax_base[77] + 2)))
#define ID_AAbsSendExpr (SFT_syntax_base[78])
#define COLOR_AAbsSendExpr (SFT_syntax_base[79])
#define INIT_TABLE_POS_AAbsSendExpr (SFT_syntax_base[80] + 0)
#define CALL_syntax_base___AAbsSendExpr___prop(recv) ((syntax_base___AAbsSendExpr___prop_t)CALL((recv), (SFT_syntax_base[80] + 1)))
#define CALL_syntax_base___AAbsSendExpr___return_type(recv) ((syntax_base___AAbsSendExpr___return_type_t)CALL((recv), (SFT_syntax_base[80] + 2)))
#define ID_ASuperInitCall (SFT_syntax_base[81])
#define COLOR_ASuperInitCall (SFT_syntax_base[82])
#define INIT_TABLE_POS_ASuperInitCall (SFT_syntax_base[83] + 0)
#define CALL_syntax_base___ASuperExpr___init_in_superclass(recv) ((syntax_base___ASuperExpr___init_in_superclass_t)CALL((recv), (SFT_syntax_base[84] + 0)))
#define CALL_syntax_base___ASendExpr___closure_defs(recv) ((syntax_base___ASendExpr___closure_defs_t)CALL((recv), (SFT_syntax_base[85] + 0)))
#define CALL_syntax_base___AReassignFormExpr___assign_method(recv) ((syntax_base___AReassignFormExpr___assign_method_t)CALL((recv), (SFT_syntax_base[86] + 0)))
#define ID_ASendReassignExpr (SFT_syntax_base[87])
#define COLOR_ASendReassignExpr (SFT_syntax_base[88])
#define INIT_TABLE_POS_ASendReassignExpr (SFT_syntax_base[89] + 0)
#define CALL_syntax_base___ASendReassignExpr___read_prop(recv) ((syntax_base___ASendReassignExpr___read_prop_t)CALL((recv), (SFT_syntax_base[89] + 1)))
#define CALL_syntax_base___AAttrFormExpr___prop(recv) ((syntax_base___AAttrFormExpr___prop_t)CALL((recv), (SFT_syntax_base[90] + 0)))
#define CALL_syntax_base___AAttrFormExpr___attr_type(recv) ((syntax_base___AAttrFormExpr___attr_type_t)CALL((recv), (SFT_syntax_base[90] + 1)))
#define CALL_syntax_base___ASuperstringExpr___atype(recv) ((syntax_base___ASuperstringExpr___atype_t)CALL((recv), (SFT_syntax_base[91] + 0)))
#define CALL_syntax_base___AVardeclExpr___variable(recv) ((syntax_base___AVardeclExpr___variable_t)CALL((recv), (SFT_syntax_base[92] + 0)))
#define CALL_syntax_base___AForExpr___variable(recv) ((syntax_base___AForExpr___variable_t)CALL((recv), (SFT_syntax_base[93] + 0)))
#define CALL_syntax_base___ASelfExpr___variable(recv) ((syntax_base___ASelfExpr___variable_t)CALL((recv), (SFT_syntax_base[94] + 0)))
#define CALL_syntax_base___AVarFormExpr___variable(recv) ((syntax_base___AVarFormExpr___variable_t)CALL((recv), (SFT_syntax_base[95] + 0)))
#define CALL_syntax_base___AClosureCallExpr___variable(recv) ((syntax_base___AClosureCallExpr___variable_t)CALL((recv), (SFT_syntax_base[96] + 0)))
#define ATTR_syntax_base___AClosureDef____variables(recv) ATTR(recv, (SFT_syntax_base[97] + 0))
#define CALL_syntax_base___AClosureDef___closure(recv) ((syntax_base___AClosureDef___closure_t)CALL((recv), (SFT_syntax_base[98] + 0)))
#define CALL_syntax_base___AClosureDef___variables(recv) ((syntax_base___AClosureDef___variables_t)CALL((recv), (SFT_syntax_base[98] + 1)))
#define CALL_syntax_base___AClosureDef___variables__eq(recv) ((syntax_base___AClosureDef___variables__eq_t)CALL((recv), (SFT_syntax_base[98] + 2)))
static const char * const LOCATE_syntax_base___MMSrcModule___clear_ast = "syntax_base::MMSrcModule::clear_ast";
void syntax_base___MMSrcModule___clear_ast(val_t p0);
typedef void (*syntax_base___MMSrcModule___clear_ast_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcModule___node = "syntax_base::MMSrcModule::node";
val_t syntax_base___MMSrcModule___node(val_t p0);
typedef val_t (*syntax_base___MMSrcModule___node_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcModule___src_local_classes = "syntax_base::MMSrcModule::src_local_classes";
val_t syntax_base___MMSrcModule___src_local_classes(val_t p0);
typedef val_t (*syntax_base___MMSrcModule___src_local_classes_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcModule___init = "syntax_base::MMSrcModule::init";
void syntax_base___MMSrcModule___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, int* init_table);
typedef void (*syntax_base___MMSrcModule___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, int* init_table);
val_t NEW_MMSrcModule_syntax_base___MMSrcModule___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
static const char * const LOCATE_syntax_base___MMSrcModule___nodes = "syntax_base::MMSrcModule::(syntax_base::MMModule::nodes)";
val_t syntax_base___MMSrcModule___nodes(val_t p0, val_t p1);
typedef val_t (*syntax_base___MMSrcModule___nodes_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___MMSrcModule___nodes__eq = "syntax_base::MMSrcModule::(syntax_base::MMModule::nodes=)";
void syntax_base___MMSrcModule___nodes__eq(val_t p0, val_t p1, val_t p2);
typedef void (*syntax_base___MMSrcModule___nodes__eq_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMModule___nodes = "syntax_base::MMModule::nodes";
val_t syntax_base___MMModule___nodes(val_t p0, val_t p1);
typedef val_t (*syntax_base___MMModule___nodes_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___MMModule___nodes__eq = "syntax_base::MMModule::nodes=";
void syntax_base___MMModule___nodes__eq(val_t p0, val_t p1, val_t p2);
typedef void (*syntax_base___MMModule___nodes__eq_t)(val_t p0, val_t p1, val_t p2);
val_t NEW_MMModule_abstractmetamodel___MMModule___init(val_t p0, val_t p1, val_t p2, val_t p3);
static const char * const LOCATE_syntax_base___MMGlobalClass___check_visibility = "syntax_base::MMGlobalClass::check_visibility";
val_t syntax_base___MMGlobalClass___check_visibility(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*syntax_base___MMGlobalClass___check_visibility_t)(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_MMGlobalClass_abstractmetamodel___MMGlobalClass___init(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcLocalClass___node = "syntax_base::MMSrcLocalClass::node";
val_t syntax_base___MMSrcLocalClass___node(val_t p0);
typedef val_t (*syntax_base___MMSrcLocalClass___node_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcLocalClass___formal_dict = "syntax_base::MMSrcLocalClass::formal_dict";
val_t syntax_base___MMSrcLocalClass___formal_dict(val_t p0);
typedef val_t (*syntax_base___MMSrcLocalClass___formal_dict_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcLocalClass___src_local_properties = "syntax_base::MMSrcLocalClass::src_local_properties";
val_t syntax_base___MMSrcLocalClass___src_local_properties(val_t p0);
typedef val_t (*syntax_base___MMSrcLocalClass___src_local_properties_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcLocalClass___init = "syntax_base::MMSrcLocalClass::init";
void syntax_base___MMSrcLocalClass___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, int* init_table);
typedef void (*syntax_base___MMSrcLocalClass___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, int* init_table);
val_t NEW_MMSrcLocalClass_syntax_base___MMSrcLocalClass___init(val_t p0, val_t p1, val_t p2, val_t p3);
static const char * const LOCATE_syntax_base___MMGlobalProperty___check_visibility = "syntax_base::MMGlobalProperty::check_visibility";
val_t syntax_base___MMGlobalProperty___check_visibility(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
typedef val_t (*syntax_base___MMGlobalProperty___check_visibility_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_MMGlobalProperty_abstractmetamodel___MMGlobalProperty___init(val_t p0);
static const char * const LOCATE_syntax_base___MMLocalProperty___node = "syntax_base::MMLocalProperty::node";
val_t syntax_base___MMLocalProperty___node(val_t p0);
typedef val_t (*syntax_base___MMLocalProperty___node_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMLocalProperty___is_init = "syntax_base::MMLocalProperty::is_init";
val_t syntax_base___MMLocalProperty___is_init(val_t p0);
typedef val_t (*syntax_base___MMLocalProperty___is_init_t)(val_t p0);
val_t NEW_MMLocalProperty_abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___MMSrcAttribute___node = "syntax_base::MMSrcAttribute::(syntax_base::MMLocalProperty::node)";
val_t syntax_base___MMSrcAttribute___node(val_t p0);
typedef val_t (*syntax_base___MMSrcAttribute___node_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcAttribute___init = "syntax_base::MMSrcAttribute::init";
void syntax_base___MMSrcAttribute___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMSrcAttribute___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMSrcAttribute_syntax_base___MMSrcAttribute___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMSrcMethod___is_intern = "syntax_base::MMSrcMethod::(abstractmetamodel::MMMethod::is_intern)";
val_t syntax_base___MMSrcMethod___is_intern(val_t p0);
typedef val_t (*syntax_base___MMSrcMethod___is_intern_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcMethod___is_abstract = "syntax_base::MMSrcMethod::(abstractmetamodel::MMMethod::is_abstract)";
val_t syntax_base___MMSrcMethod___is_abstract(val_t p0);
typedef val_t (*syntax_base___MMSrcMethod___is_abstract_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMSrcMethod___extern_name = "syntax_base::MMSrcMethod::(abstractmetamodel::MMMethod::extern_name)";
val_t syntax_base___MMSrcMethod___extern_name(val_t p0);
typedef val_t (*syntax_base___MMSrcMethod___extern_name_t)(val_t p0);
val_t NEW_MMSrcMethod_abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___MMAttrImplementationMethod___node = "syntax_base::MMAttrImplementationMethod::(syntax_base::MMLocalProperty::node)";
val_t syntax_base___MMAttrImplementationMethod___node(val_t p0);
typedef val_t (*syntax_base___MMAttrImplementationMethod___node_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMAttrImplementationMethod___init = "syntax_base::MMAttrImplementationMethod::init";
void syntax_base___MMAttrImplementationMethod___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMAttrImplementationMethod___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMAttrImplementationMethod_syntax_base___MMAttrImplementationMethod___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMReadImplementationMethod___init = "syntax_base::MMReadImplementationMethod::init";
void syntax_base___MMReadImplementationMethod___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMReadImplementationMethod___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMReadImplementationMethod_syntax_base___MMReadImplementationMethod___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMWriteImplementationMethod___init = "syntax_base::MMWriteImplementationMethod::init";
void syntax_base___MMWriteImplementationMethod___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMWriteImplementationMethod___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMWriteImplementationMethod_syntax_base___MMWriteImplementationMethod___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___is_init = "syntax_base::MMMethSrcMethod::(syntax_base::MMLocalProperty::is_init)";
val_t syntax_base___MMMethSrcMethod___is_init(val_t p0);
typedef val_t (*syntax_base___MMMethSrcMethod___is_init_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___is_intern = "syntax_base::MMMethSrcMethod::(abstractmetamodel::MMMethod::is_intern)";
val_t syntax_base___MMMethSrcMethod___is_intern(val_t p0);
typedef val_t (*syntax_base___MMMethSrcMethod___is_intern_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___is_abstract = "syntax_base::MMMethSrcMethod::(abstractmetamodel::MMMethod::is_abstract)";
val_t syntax_base___MMMethSrcMethod___is_abstract(val_t p0);
typedef val_t (*syntax_base___MMMethSrcMethod___is_abstract_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___extern_name = "syntax_base::MMMethSrcMethod::(abstractmetamodel::MMMethod::extern_name)";
val_t syntax_base___MMMethSrcMethod___extern_name(val_t p0);
typedef val_t (*syntax_base___MMMethSrcMethod___extern_name_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___extern_name__eq = "syntax_base::MMMethSrcMethod::extern_name=";
void syntax_base___MMMethSrcMethod___extern_name__eq(val_t p0, val_t p1);
typedef void (*syntax_base___MMMethSrcMethod___extern_name__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___node = "syntax_base::MMMethSrcMethod::(syntax_base::MMLocalProperty::node)";
val_t syntax_base___MMMethSrcMethod___node(val_t p0);
typedef val_t (*syntax_base___MMMethSrcMethod___node_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMMethSrcMethod___init = "syntax_base::MMMethSrcMethod::init";
void syntax_base___MMMethSrcMethod___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMMethSrcMethod___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMMethSrcMethod_syntax_base___MMMethSrcMethod___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMSrcTypeProperty___init = "syntax_base::MMSrcTypeProperty::init";
void syntax_base___MMSrcTypeProperty___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMSrcTypeProperty___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMSrcTypeProperty_syntax_base___MMSrcTypeProperty___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___MMImplicitInit___super_init = "syntax_base::MMImplicitInit::super_init";
val_t syntax_base___MMImplicitInit___super_init(val_t p0);
typedef val_t (*syntax_base___MMImplicitInit___super_init_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMImplicitInit___is_init = "syntax_base::MMImplicitInit::(syntax_base::MMLocalProperty::is_init)";
val_t syntax_base___MMImplicitInit___is_init(val_t p0);
typedef val_t (*syntax_base___MMImplicitInit___is_init_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMImplicitInit___unassigned_attributes = "syntax_base::MMImplicitInit::unassigned_attributes";
val_t syntax_base___MMImplicitInit___unassigned_attributes(val_t p0);
typedef val_t (*syntax_base___MMImplicitInit___unassigned_attributes_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMImplicitInit___super_inits = "syntax_base::MMImplicitInit::super_inits";
val_t syntax_base___MMImplicitInit___super_inits(val_t p0);
typedef val_t (*syntax_base___MMImplicitInit___super_inits_t)(val_t p0);
static const char * const LOCATE_syntax_base___MMImplicitInit___init = "syntax_base::MMImplicitInit::init";
void syntax_base___MMImplicitInit___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___MMImplicitInit___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMImplicitInit_syntax_base___MMImplicitInit___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___Variable___name = "syntax_base::Variable::name";
val_t syntax_base___Variable___name(val_t p0);
typedef val_t (*syntax_base___Variable___name_t)(val_t p0);
static const char * const LOCATE_syntax_base___Variable___decl = "syntax_base::Variable::decl";
val_t syntax_base___Variable___decl(val_t p0);
typedef val_t (*syntax_base___Variable___decl_t)(val_t p0);
static const char * const LOCATE_syntax_base___Variable___stype = "syntax_base::Variable::stype";
val_t syntax_base___Variable___stype(val_t p0);
typedef val_t (*syntax_base___Variable___stype_t)(val_t p0);
static const char * const LOCATE_syntax_base___Variable___stype__eq = "syntax_base::Variable::stype=";
void syntax_base___Variable___stype__eq(val_t p0, val_t p1);
typedef void (*syntax_base___Variable___stype__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___Variable___to_s = "syntax_base::Variable::(string::Object::to_s)";
val_t syntax_base___Variable___to_s(val_t p0);
typedef val_t (*syntax_base___Variable___to_s_t)(val_t p0);
static const char * const LOCATE_syntax_base___Variable___kind = "syntax_base::Variable::kind";
val_t syntax_base___Variable___kind(val_t p0);
typedef val_t (*syntax_base___Variable___kind_t)(val_t p0);
static const char * const LOCATE_syntax_base___Variable___init = "syntax_base::Variable::init";
void syntax_base___Variable___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax_base___Variable___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_Variable_syntax_base___Variable___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___VarVariable___kind = "syntax_base::VarVariable::(syntax_base::Variable::kind)";
val_t syntax_base___VarVariable___kind(val_t p0);
typedef val_t (*syntax_base___VarVariable___kind_t)(val_t p0);
static const char * const LOCATE_syntax_base___VarVariable___init = "syntax_base::VarVariable::init";
void syntax_base___VarVariable___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax_base___VarVariable___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_VarVariable_syntax_base___VarVariable___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___ParamVariable___kind = "syntax_base::ParamVariable::(syntax_base::Variable::kind)";
val_t syntax_base___ParamVariable___kind(val_t p0);
typedef val_t (*syntax_base___ParamVariable___kind_t)(val_t p0);
static const char * const LOCATE_syntax_base___ParamVariable___init = "syntax_base::ParamVariable::init";
void syntax_base___ParamVariable___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax_base___ParamVariable___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_ParamVariable_syntax_base___ParamVariable___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AutoVariable___kind = "syntax_base::AutoVariable::(syntax_base::Variable::kind)";
val_t syntax_base___AutoVariable___kind(val_t p0);
typedef val_t (*syntax_base___AutoVariable___kind_t)(val_t p0);
static const char * const LOCATE_syntax_base___AutoVariable___init = "syntax_base::AutoVariable::init";
void syntax_base___AutoVariable___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax_base___AutoVariable___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_AutoVariable_syntax_base___AutoVariable___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___ClosureVariable___kind = "syntax_base::ClosureVariable::(syntax_base::Variable::kind)";
val_t syntax_base___ClosureVariable___kind(val_t p0);
typedef val_t (*syntax_base___ClosureVariable___kind_t)(val_t p0);
static const char * const LOCATE_syntax_base___ClosureVariable___closure = "syntax_base::ClosureVariable::closure";
val_t syntax_base___ClosureVariable___closure(val_t p0);
typedef val_t (*syntax_base___ClosureVariable___closure_t)(val_t p0);
static const char * const LOCATE_syntax_base___ClosureVariable___init = "syntax_base::ClosureVariable::init";
void syntax_base___ClosureVariable___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax_base___ClosureVariable___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_ClosureVariable_syntax_base___ClosureVariable___init(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___get_type_by_name = "syntax_base::AbsSyntaxVisitor::get_type_by_name";
val_t syntax_base___AbsSyntaxVisitor___get_type_by_name(val_t p0, val_t p1);
typedef val_t (*syntax_base___AbsSyntaxVisitor___get_type_by_name_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___get_instantiated_type_by_name = "syntax_base::AbsSyntaxVisitor::get_instantiated_type_by_name";
val_t syntax_base___AbsSyntaxVisitor___get_instantiated_type_by_name(val_t p0, val_t p1, val_t p2);
typedef val_t (*syntax_base___AbsSyntaxVisitor___get_instantiated_type_by_name_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_object = "syntax_base::AbsSyntaxVisitor::type_object";
val_t syntax_base___AbsSyntaxVisitor___type_object(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_object_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_bool = "syntax_base::AbsSyntaxVisitor::type_bool";
val_t syntax_base___AbsSyntaxVisitor___type_bool(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_bool_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_int = "syntax_base::AbsSyntaxVisitor::type_int";
val_t syntax_base___AbsSyntaxVisitor___type_int(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_int_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_float = "syntax_base::AbsSyntaxVisitor::type_float";
val_t syntax_base___AbsSyntaxVisitor___type_float(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_float_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_char = "syntax_base::AbsSyntaxVisitor::type_char";
val_t syntax_base___AbsSyntaxVisitor___type_char(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_char_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_string = "syntax_base::AbsSyntaxVisitor::type_string";
val_t syntax_base___AbsSyntaxVisitor___type_string(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_string_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_collection = "syntax_base::AbsSyntaxVisitor::type_collection";
val_t syntax_base___AbsSyntaxVisitor___type_collection(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_collection_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_nativestring = "syntax_base::AbsSyntaxVisitor::type_nativestring";
val_t syntax_base___AbsSyntaxVisitor___type_nativestring(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_nativestring_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_array = "syntax_base::AbsSyntaxVisitor::type_array";
val_t syntax_base___AbsSyntaxVisitor___type_array(val_t p0, val_t p1);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_array_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_discrete = "syntax_base::AbsSyntaxVisitor::type_discrete";
val_t syntax_base___AbsSyntaxVisitor___type_discrete(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_discrete_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_range = "syntax_base::AbsSyntaxVisitor::type_range";
val_t syntax_base___AbsSyntaxVisitor___type_range(val_t p0, val_t p1);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_range_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___type_none = "syntax_base::AbsSyntaxVisitor::type_none";
val_t syntax_base___AbsSyntaxVisitor___type_none(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___type_none_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___get_method = "syntax_base::AbsSyntaxVisitor::get_method";
val_t syntax_base___AbsSyntaxVisitor___get_method(val_t p0, val_t p1, val_t p2);
typedef val_t (*syntax_base___AbsSyntaxVisitor___get_method_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___mmmodule = "syntax_base::AbsSyntaxVisitor::mmmodule";
val_t syntax_base___AbsSyntaxVisitor___mmmodule(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___mmmodule_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___local_class = "syntax_base::AbsSyntaxVisitor::local_class";
val_t syntax_base___AbsSyntaxVisitor___local_class(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___local_class_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___local_class__eq = "syntax_base::AbsSyntaxVisitor::local_class=";
void syntax_base___AbsSyntaxVisitor___local_class__eq(val_t p0, val_t p1);
typedef void (*syntax_base___AbsSyntaxVisitor___local_class__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___local_property = "syntax_base::AbsSyntaxVisitor::local_property";
val_t syntax_base___AbsSyntaxVisitor___local_property(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___local_property_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___local_property__eq = "syntax_base::AbsSyntaxVisitor::local_property=";
void syntax_base___AbsSyntaxVisitor___local_property__eq(val_t p0, val_t p1);
typedef void (*syntax_base___AbsSyntaxVisitor___local_property__eq_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___tc = "syntax_base::AbsSyntaxVisitor::tc";
val_t syntax_base___AbsSyntaxVisitor___tc(val_t p0);
typedef val_t (*syntax_base___AbsSyntaxVisitor___tc_t)(val_t p0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___error = "syntax_base::AbsSyntaxVisitor::error";
void syntax_base___AbsSyntaxVisitor___error(val_t p0, val_t p1, val_t p2);
typedef void (*syntax_base___AbsSyntaxVisitor___error_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___fatal_error = "syntax_base::AbsSyntaxVisitor::fatal_error";
void syntax_base___AbsSyntaxVisitor___fatal_error(val_t p0, val_t p1, val_t p2);
typedef void (*syntax_base___AbsSyntaxVisitor___fatal_error_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___warning = "syntax_base::AbsSyntaxVisitor::warning";
void syntax_base___AbsSyntaxVisitor___warning(val_t p0, val_t p1, val_t p2);
typedef void (*syntax_base___AbsSyntaxVisitor___warning_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___check_conform = "syntax_base::AbsSyntaxVisitor::check_conform";
val_t syntax_base___AbsSyntaxVisitor___check_conform(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*syntax_base___AbsSyntaxVisitor___check_conform_t)(val_t p0, val_t p1, val_t p2, val_t p3);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___check_expr = "syntax_base::AbsSyntaxVisitor::check_expr";
val_t syntax_base___AbsSyntaxVisitor___check_expr(val_t p0, val_t p1);
typedef val_t (*syntax_base___AbsSyntaxVisitor___check_expr_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___check_conform_expr = "syntax_base::AbsSyntaxVisitor::check_conform_expr";
val_t syntax_base___AbsSyntaxVisitor___check_conform_expr(val_t p0, val_t p1, val_t p2);
typedef val_t (*syntax_base___AbsSyntaxVisitor___check_conform_expr_t)(val_t p0, val_t p1, val_t p2);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr = "syntax_base::AbsSyntaxVisitor::check_conform_multiexpr";
val_t syntax_base___AbsSyntaxVisitor___check_conform_multiexpr(val_t p0, val_t p1, val_t p2);
typedef val_t (*syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_t)(val_t p0, val_t p1, val_t p2);
  typedef void (*CLOS_OC_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_1_0)(struct stack_frame_t *);
  void OC_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*CLOS_OC_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_4_0)(struct stack_frame_t *);
  void OC_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_4(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax_base___AbsSyntaxVisitor___check_conform_multiexpr_4_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
static const char * const LOCATE_syntax_base___AbsSyntaxVisitor___init = "syntax_base::AbsSyntaxVisitor::init";
void syntax_base___AbsSyntaxVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax_base___AbsSyntaxVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_AbsSyntaxVisitor_syntax_base___AbsSyntaxVisitor___init(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___ANode___accept_abs_syntax_visitor = "syntax_base::ANode::accept_abs_syntax_visitor";
void syntax_base___ANode___accept_abs_syntax_visitor(val_t p0, val_t p1);
typedef void (*syntax_base___ANode___accept_abs_syntax_visitor_t)(val_t p0, val_t p1);
val_t NEW_ANode_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___Token___to_symbol = "syntax_base::Token::to_symbol";
val_t syntax_base___Token___to_symbol(val_t p0);
typedef val_t (*syntax_base___Token___to_symbol_t)(val_t p0);
val_t NEW_Token_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AClassdef___local_class = "syntax_base::AClassdef::local_class";
val_t syntax_base___AClassdef___local_class(val_t p0);
typedef val_t (*syntax_base___AClassdef___local_class_t)(val_t p0);
static const char * const LOCATE_syntax_base___AClassdef___next_node = "syntax_base::AClassdef::next_node";
val_t syntax_base___AClassdef___next_node(val_t p0);
typedef val_t (*syntax_base___AClassdef___next_node_t)(val_t p0);
static const char * const LOCATE_syntax_base___AClassdef___next_node__eq = "syntax_base::AClassdef::next_node=";
void syntax_base___AClassdef___next_node__eq(val_t p0, val_t p1);
typedef void (*syntax_base___AClassdef___next_node__eq_t)(val_t p0, val_t p1);
val_t NEW_AClassdef_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___APropdef___self_var = "syntax_base::APropdef::self_var";
val_t syntax_base___APropdef___self_var(val_t p0);
typedef val_t (*syntax_base___APropdef___self_var_t)(val_t p0);
val_t NEW_APropdef_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AAttrPropdef___prop = "syntax_base::AAttrPropdef::prop";
val_t syntax_base___AAttrPropdef___prop(val_t p0);
typedef val_t (*syntax_base___AAttrPropdef___prop_t)(val_t p0);
static const char * const LOCATE_syntax_base___AAttrPropdef___readmethod = "syntax_base::AAttrPropdef::readmethod";
val_t syntax_base___AAttrPropdef___readmethod(val_t p0);
typedef val_t (*syntax_base___AAttrPropdef___readmethod_t)(val_t p0);
static const char * const LOCATE_syntax_base___AAttrPropdef___writemethod = "syntax_base::AAttrPropdef::writemethod";
val_t syntax_base___AAttrPropdef___writemethod(val_t p0);
typedef val_t (*syntax_base___AAttrPropdef___writemethod_t)(val_t p0);
val_t NEW_AAttrPropdef_parser_prod___AAttrPropdef___empty_init();
val_t NEW_AAttrPropdef_parser_prod___AAttrPropdef___init_aattrpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6, val_t p7, val_t p8, val_t p9);
val_t NEW_AAttrPropdef_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AConcreteInitPropdef___super_init_calls = "syntax_base::AConcreteInitPropdef::super_init_calls";
val_t syntax_base___AConcreteInitPropdef___super_init_calls(val_t p0);
typedef val_t (*syntax_base___AConcreteInitPropdef___super_init_calls_t)(val_t p0);
static const char * const LOCATE_syntax_base___AConcreteInitPropdef___explicit_super_init_calls = "syntax_base::AConcreteInitPropdef::explicit_super_init_calls";
val_t syntax_base___AConcreteInitPropdef___explicit_super_init_calls(val_t p0);
typedef val_t (*syntax_base___AConcreteInitPropdef___explicit_super_init_calls_t)(val_t p0);
val_t NEW_AConcreteInitPropdef_parser_prod___AConcreteMethPropdef___empty_init();
val_t NEW_AConcreteInitPropdef_parser_prod___AConcreteInitPropdef___empty_init();
val_t NEW_AConcreteInitPropdef_parser_prod___AConcreteInitPropdef___init_aconcreteinitpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6);
val_t NEW_AConcreteInitPropdef_parser_nodes___ANode___init(val_t p0);
val_t NEW_AConcreteInitPropdef_parser_prod___AMethPropdef___empty_init();
val_t NEW_AConcreteInitPropdef_parser_prod___AConcreteMethPropdef___init_aconcretemethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6);
val_t NEW_AConcreteInitPropdef_parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
static const char * const LOCATE_syntax_base___AMethPropdef___method = "syntax_base::AMethPropdef::method";
val_t syntax_base___AMethPropdef___method(val_t p0);
typedef val_t (*syntax_base___AMethPropdef___method_t)(val_t p0);
val_t NEW_AMethPropdef_parser_prod___AMethPropdef___empty_init();
val_t NEW_AMethPropdef_parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_AMethPropdef_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___ATypePropdef___prop = "syntax_base::ATypePropdef::prop";
val_t syntax_base___ATypePropdef___prop(val_t p0);
typedef val_t (*syntax_base___ATypePropdef___prop_t)(val_t p0);
val_t NEW_ATypePropdef_parser_prod___ATypePropdef___empty_init();
val_t NEW_ATypePropdef_parser_prod___ATypePropdef___init_atypepropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5);
val_t NEW_ATypePropdef_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AParam___position = "syntax_base::AParam::position";
val_t syntax_base___AParam___position(val_t p0);
typedef val_t (*syntax_base___AParam___position_t)(val_t p0);
static const char * const LOCATE_syntax_base___AParam___variable = "syntax_base::AParam::variable";
val_t syntax_base___AParam___variable(val_t p0);
typedef val_t (*syntax_base___AParam___variable_t)(val_t p0);
val_t NEW_AParam_parser_prod___AParam___empty_init();
val_t NEW_AParam_parser_prod___AParam___init_aparam(val_t p0, val_t p1, val_t p2);
val_t NEW_AParam_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AClosureDecl___position = "syntax_base::AClosureDecl::position";
val_t syntax_base___AClosureDecl___position(val_t p0);
typedef val_t (*syntax_base___AClosureDecl___position_t)(val_t p0);
static const char * const LOCATE_syntax_base___AClosureDecl___variable = "syntax_base::AClosureDecl::variable";
val_t syntax_base___AClosureDecl___variable(val_t p0);
typedef val_t (*syntax_base___AClosureDecl___variable_t)(val_t p0);
val_t NEW_AClosureDecl_parser_prod___AClosureDecl___empty_init();
val_t NEW_AClosureDecl_parser_prod___AClosureDecl___init_aclosuredecl(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_AClosureDecl_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AType___is_typed = "syntax_base::AType::is_typed";
val_t syntax_base___AType___is_typed(val_t p0);
typedef val_t (*syntax_base___AType___is_typed_t)(val_t p0);
static const char * const LOCATE_syntax_base___AType___stype = "syntax_base::AType::stype";
val_t syntax_base___AType___stype(val_t p0);
typedef val_t (*syntax_base___AType___stype_t)(val_t p0);
static const char * const LOCATE_syntax_base___AType___get_local_class = "syntax_base::AType::get_local_class";
val_t syntax_base___AType___get_local_class(val_t p0, val_t p1);
typedef val_t (*syntax_base___AType___get_local_class_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AType___get_unchecked_stype = "syntax_base::AType::get_unchecked_stype";
val_t syntax_base___AType___get_unchecked_stype(val_t p0, val_t p1);
typedef val_t (*syntax_base___AType___get_unchecked_stype_t)(val_t p0, val_t p1);
    typedef void (*CLOS_OC_syntax_base___AType___get_unchecked_stype_16_0)(struct stack_frame_t *);
    void OC_syntax_base___AType___get_unchecked_stype_16(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*OC_syntax_base___AType___get_unchecked_stype_16_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
static const char * const LOCATE_syntax_base___AType___get_stype = "syntax_base::AType::get_stype";
val_t syntax_base___AType___get_stype(val_t p0, val_t p1);
typedef val_t (*syntax_base___AType___get_stype_t)(val_t p0, val_t p1);
static const char * const LOCATE_syntax_base___AType___check_conform = "syntax_base::AType::check_conform";
void syntax_base___AType___check_conform(val_t p0, val_t p1);
typedef void (*syntax_base___AType___check_conform_t)(val_t p0, val_t p1);
val_t NEW_AType_parser_prod___AType___empty_init();
val_t NEW_AType_parser_prod___AType___init_atype(val_t p0, val_t p1, val_t p2);
val_t NEW_AType_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AExpr___is_typed = "syntax_base::AExpr::is_typed";
val_t syntax_base___AExpr___is_typed(val_t p0);
typedef val_t (*syntax_base___AExpr___is_typed_t)(val_t p0);
static const char * const LOCATE_syntax_base___AExpr___is_statement = "syntax_base::AExpr::is_statement";
val_t syntax_base___AExpr___is_statement(val_t p0);
typedef val_t (*syntax_base___AExpr___is_statement_t)(val_t p0);
static const char * const LOCATE_syntax_base___AExpr___stype = "syntax_base::AExpr::stype";
val_t syntax_base___AExpr___stype(val_t p0);
typedef val_t (*syntax_base___AExpr___stype_t)(val_t p0);
val_t NEW_AExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AAbsAbsSendExpr___prop_signature = "syntax_base::AAbsAbsSendExpr::prop_signature";
val_t syntax_base___AAbsAbsSendExpr___prop_signature(val_t p0);
typedef val_t (*syntax_base___AAbsAbsSendExpr___prop_signature_t)(val_t p0);
static const char * const LOCATE_syntax_base___AAbsAbsSendExpr___raw_arguments = "syntax_base::AAbsAbsSendExpr::raw_arguments";
val_t syntax_base___AAbsAbsSendExpr___raw_arguments(val_t p0);
typedef val_t (*syntax_base___AAbsAbsSendExpr___raw_arguments_t)(val_t p0);
val_t NEW_AAbsAbsSendExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AAbsSendExpr___prop = "syntax_base::AAbsSendExpr::prop";
val_t syntax_base___AAbsSendExpr___prop(val_t p0);
typedef val_t (*syntax_base___AAbsSendExpr___prop_t)(val_t p0);
static const char * const LOCATE_syntax_base___AAbsSendExpr___return_type = "syntax_base::AAbsSendExpr::return_type";
val_t syntax_base___AAbsSendExpr___return_type(val_t p0);
typedef val_t (*syntax_base___AAbsSendExpr___return_type_t)(val_t p0);
val_t NEW_AAbsSendExpr_parser_nodes___ANode___init(val_t p0);
val_t NEW_ASuperInitCall_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___ASuperExpr___init_in_superclass = "syntax_base::ASuperExpr::init_in_superclass";
val_t syntax_base___ASuperExpr___init_in_superclass(val_t p0);
typedef val_t (*syntax_base___ASuperExpr___init_in_superclass_t)(val_t p0);
val_t NEW_ASuperExpr_parser_prod___ASuperExpr___empty_init();
val_t NEW_ASuperExpr_parser_prod___ASuperExpr___init_asuperexpr(val_t p0, val_t p1, val_t p2);
val_t NEW_ASuperExpr_parser_nodes___ANode___init(val_t p0);
val_t NEW_ANewExpr_parser_prod___ANewExpr___empty_init();
val_t NEW_ANewExpr_parser_prod___ANewExpr___init_anewexpr(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_ANewExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___ASendExpr___closure_defs = "syntax_base::ASendExpr::closure_defs";
val_t syntax_base___ASendExpr___closure_defs(val_t p0);
typedef val_t (*syntax_base___ASendExpr___closure_defs_t)(val_t p0);
val_t NEW_ASendExpr_parser_prod___ASendExpr___empty_init();
val_t NEW_ASendExpr_parser_prod___ASendExpr___init_asendexpr(val_t p0);
val_t NEW_ASendExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AReassignFormExpr___assign_method = "syntax_base::AReassignFormExpr::assign_method";
val_t syntax_base___AReassignFormExpr___assign_method(val_t p0);
typedef val_t (*syntax_base___AReassignFormExpr___assign_method_t)(val_t p0);
val_t NEW_AReassignFormExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___ASendReassignExpr___read_prop = "syntax_base::ASendReassignExpr::read_prop";
val_t syntax_base___ASendReassignExpr___read_prop(val_t p0);
typedef val_t (*syntax_base___ASendReassignExpr___read_prop_t)(val_t p0);
val_t NEW_ASendReassignExpr_parser_prod___ASendExpr___empty_init();
val_t NEW_ASendReassignExpr_parser_prod___ASendExpr___init_asendexpr(val_t p0);
val_t NEW_ASendReassignExpr_parser_nodes___ANode___init(val_t p0);
val_t NEW_ACallReassignExpr_parser_prod___ASendExpr___empty_init();
val_t NEW_ACallReassignExpr_parser_prod___ACallReassignExpr___empty_init();
val_t NEW_ACallReassignExpr_parser_prod___ACallReassignExpr___init_acallreassignexpr(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_ACallReassignExpr_parser_nodes___ANode___init(val_t p0);
val_t NEW_ACallReassignExpr_parser_prod___ASendExpr___init_asendexpr(val_t p0);
val_t NEW_ABraReassignExpr_parser_prod___ASendExpr___empty_init();
val_t NEW_ABraReassignExpr_parser_prod___ABraReassignExpr___empty_init();
val_t NEW_ABraReassignExpr_parser_prod___ABraReassignExpr___init_abrareassignexpr(val_t p0, val_t p1, val_t p2, val_t p3);
val_t NEW_ABraReassignExpr_parser_nodes___ANode___init(val_t p0);
val_t NEW_ABraReassignExpr_parser_prod___ASendExpr___init_asendexpr(val_t p0);
static const char * const LOCATE_syntax_base___AAttrFormExpr___prop = "syntax_base::AAttrFormExpr::prop";
val_t syntax_base___AAttrFormExpr___prop(val_t p0);
typedef val_t (*syntax_base___AAttrFormExpr___prop_t)(val_t p0);
static const char * const LOCATE_syntax_base___AAttrFormExpr___attr_type = "syntax_base::AAttrFormExpr::attr_type";
val_t syntax_base___AAttrFormExpr___attr_type(val_t p0);
typedef val_t (*syntax_base___AAttrFormExpr___attr_type_t)(val_t p0);
val_t NEW_AAttrFormExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___ASuperstringExpr___atype = "syntax_base::ASuperstringExpr::atype";
val_t syntax_base___ASuperstringExpr___atype(val_t p0);
typedef val_t (*syntax_base___ASuperstringExpr___atype_t)(val_t p0);
val_t NEW_ASuperstringExpr_parser_prod___ASuperstringExpr___empty_init();
val_t NEW_ASuperstringExpr_parser_prod___ASuperstringExpr___init_asuperstringexpr(val_t p0);
val_t NEW_ASuperstringExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AVardeclExpr___variable = "syntax_base::AVardeclExpr::variable";
val_t syntax_base___AVardeclExpr___variable(val_t p0);
typedef val_t (*syntax_base___AVardeclExpr___variable_t)(val_t p0);
val_t NEW_AVardeclExpr_parser_prod___AVardeclExpr___empty_init();
val_t NEW_AVardeclExpr_parser_prod___AVardeclExpr___init_avardeclexpr(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_AVardeclExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AForExpr___variable = "syntax_base::AForExpr::variable";
val_t syntax_base___AForExpr___variable(val_t p0);
typedef val_t (*syntax_base___AForExpr___variable_t)(val_t p0);
val_t NEW_AForExpr_parser_prod___AForExpr___empty_init();
val_t NEW_AForExpr_parser_prod___AForExpr___init_aforexpr(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5);
val_t NEW_AForExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___ASelfExpr___variable = "syntax_base::ASelfExpr::variable";
val_t syntax_base___ASelfExpr___variable(val_t p0);
typedef val_t (*syntax_base___ASelfExpr___variable_t)(val_t p0);
val_t NEW_ASelfExpr_parser_prod___ASelfExpr___empty_init();
val_t NEW_ASelfExpr_parser_prod___ASelfExpr___init_aselfexpr(val_t p0);
val_t NEW_ASelfExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AVarFormExpr___variable = "syntax_base::AVarFormExpr::variable";
val_t syntax_base___AVarFormExpr___variable(val_t p0);
typedef val_t (*syntax_base___AVarFormExpr___variable_t)(val_t p0);
val_t NEW_AVarFormExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AClosureCallExpr___variable = "syntax_base::AClosureCallExpr::variable";
val_t syntax_base___AClosureCallExpr___variable(val_t p0);
typedef val_t (*syntax_base___AClosureCallExpr___variable_t)(val_t p0);
val_t NEW_AClosureCallExpr_parser_prod___AClosureCallExpr___init_aclosurecallexpr(val_t p0, val_t p1, val_t p2);
val_t NEW_AClosureCallExpr_parser_prod___AClosureCallExpr___empty_init();
val_t NEW_AClosureCallExpr_parser_nodes___ANode___init(val_t p0);
static const char * const LOCATE_syntax_base___AClosureDef___closure = "syntax_base::AClosureDef::closure";
val_t syntax_base___AClosureDef___closure(val_t p0);
typedef val_t (*syntax_base___AClosureDef___closure_t)(val_t p0);
static const char * const LOCATE_syntax_base___AClosureDef___variables = "syntax_base::AClosureDef::variables";
val_t syntax_base___AClosureDef___variables(val_t p0);
typedef val_t (*syntax_base___AClosureDef___variables_t)(val_t p0);
static const char * const LOCATE_syntax_base___AClosureDef___variables__eq = "syntax_base::AClosureDef::variables=";
void syntax_base___AClosureDef___variables__eq(val_t p0, val_t p1);
typedef void (*syntax_base___AClosureDef___variables__eq_t)(val_t p0, val_t p1);
val_t NEW_AClosureDef_parser_prod___AClosureDef___empty_init();
val_t NEW_AClosureDef_parser_prod___AClosureDef___init_aclosuredef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5);
val_t NEW_AClosureDef_parser_nodes___ANode___init(val_t p0);
#endif
