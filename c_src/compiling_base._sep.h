/* This C header file is generated by NIT to compile modules and programs that requires compiling_base. */
#ifndef compiling_base_sep
#define compiling_base_sep
#include "syntax._sep.h"
#include "utils._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_CompilerVisitor[];

extern const classtable_elt_t VFT_CContext[];

extern const classtable_elt_t VFT_PrimitiveInfo[];
extern const char *LOCATE_compiling_base;
extern const int SFT_compiling_base[];
#define ATTR_compiling_base___ToolContext____global(recv) ATTR(recv, (SFT_compiling_base[0] + 0))
#define ATTR_compiling_base___ToolContext____compdir(recv) ATTR(recv, (SFT_compiling_base[0] + 1))
#define ATTR_compiling_base___ToolContext____clibdir(recv) ATTR(recv, (SFT_compiling_base[0] + 2))
#define ATTR_compiling_base___ToolContext____bindir(recv) ATTR(recv, (SFT_compiling_base[0] + 3))
#define ATTR_compiling_base___ToolContext____output_file(recv) ATTR(recv, (SFT_compiling_base[0] + 4))
#define ATTR_compiling_base___ToolContext____boost(recv) ATTR(recv, (SFT_compiling_base[0] + 5))
#define ATTR_compiling_base___ToolContext____no_cc(recv) ATTR(recv, (SFT_compiling_base[0] + 6))
#define ATTR_compiling_base___ToolContext____ext_prefix(recv) ATTR(recv, (SFT_compiling_base[0] + 7))
#define CALL_compiling_base___ToolContext___global(recv) ((compiling_base___ToolContext___global_t)CALL((recv), (SFT_compiling_base[1] + 0)))
#define CALL_compiling_base___ToolContext___global__eq(recv) ((compiling_base___ToolContext___global__eq_t)CALL((recv), (SFT_compiling_base[1] + 1)))
#define CALL_compiling_base___ToolContext___compdir(recv) ((compiling_base___ToolContext___compdir_t)CALL((recv), (SFT_compiling_base[1] + 2)))
#define CALL_compiling_base___ToolContext___compdir__eq(recv) ((compiling_base___ToolContext___compdir__eq_t)CALL((recv), (SFT_compiling_base[1] + 3)))
#define CALL_compiling_base___ToolContext___clibdir(recv) ((compiling_base___ToolContext___clibdir_t)CALL((recv), (SFT_compiling_base[1] + 4)))
#define CALL_compiling_base___ToolContext___clibdir__eq(recv) ((compiling_base___ToolContext___clibdir__eq_t)CALL((recv), (SFT_compiling_base[1] + 5)))
#define CALL_compiling_base___ToolContext___bindir(recv) ((compiling_base___ToolContext___bindir_t)CALL((recv), (SFT_compiling_base[1] + 6)))
#define CALL_compiling_base___ToolContext___bindir__eq(recv) ((compiling_base___ToolContext___bindir__eq_t)CALL((recv), (SFT_compiling_base[1] + 7)))
#define CALL_compiling_base___ToolContext___output_file(recv) ((compiling_base___ToolContext___output_file_t)CALL((recv), (SFT_compiling_base[1] + 8)))
#define CALL_compiling_base___ToolContext___output_file__eq(recv) ((compiling_base___ToolContext___output_file__eq_t)CALL((recv), (SFT_compiling_base[1] + 9)))
#define CALL_compiling_base___ToolContext___boost(recv) ((compiling_base___ToolContext___boost_t)CALL((recv), (SFT_compiling_base[1] + 10)))
#define CALL_compiling_base___ToolContext___boost__eq(recv) ((compiling_base___ToolContext___boost__eq_t)CALL((recv), (SFT_compiling_base[1] + 11)))
#define CALL_compiling_base___ToolContext___no_cc(recv) ((compiling_base___ToolContext___no_cc_t)CALL((recv), (SFT_compiling_base[1] + 12)))
#define CALL_compiling_base___ToolContext___no_cc__eq(recv) ((compiling_base___ToolContext___no_cc__eq_t)CALL((recv), (SFT_compiling_base[1] + 13)))
#define CALL_compiling_base___ToolContext___ext_prefix(recv) ((compiling_base___ToolContext___ext_prefix_t)CALL((recv), (SFT_compiling_base[1] + 14)))
#define CALL_compiling_base___ToolContext___ext_prefix__eq(recv) ((compiling_base___ToolContext___ext_prefix__eq_t)CALL((recv), (SFT_compiling_base[1] + 15)))
#define ID_CompilerVisitor (SFT_compiling_base[2])
#define COLOR_CompilerVisitor (SFT_compiling_base[3])
#define ATTR_compiling_base___CompilerVisitor____number_cpt(recv) ATTR(recv, (SFT_compiling_base[4] + 0))
#define ATTR_compiling_base___CompilerVisitor____module(recv) ATTR(recv, (SFT_compiling_base[4] + 1))
#define ATTR_compiling_base___CompilerVisitor____ctx(recv) ATTR(recv, (SFT_compiling_base[4] + 2))
#define ATTR_compiling_base___CompilerVisitor____indent_level(recv) ATTR(recv, (SFT_compiling_base[4] + 3))
#define ATTR_compiling_base___CompilerVisitor____tc(recv) ATTR(recv, (SFT_compiling_base[4] + 4))
#define INIT_TABLE_POS_CompilerVisitor (SFT_compiling_base[5] + 0)
#define CALL_compiling_base___CompilerVisitor___add_decl(recv) ((compiling_base___CompilerVisitor___add_decl_t)CALL((recv), (SFT_compiling_base[5] + 1)))
#define CALL_compiling_base___CompilerVisitor___add_instr(recv) ((compiling_base___CompilerVisitor___add_instr_t)CALL((recv), (SFT_compiling_base[5] + 2)))
#define CALL_compiling_base___CompilerVisitor___new_number(recv) ((compiling_base___CompilerVisitor___new_number_t)CALL((recv), (SFT_compiling_base[5] + 3)))
#define CALL_compiling_base___CompilerVisitor___indent(recv) ((compiling_base___CompilerVisitor___indent_t)CALL((recv), (SFT_compiling_base[5] + 4)))
#define CALL_compiling_base___CompilerVisitor___unindent(recv) ((compiling_base___CompilerVisitor___unindent_t)CALL((recv), (SFT_compiling_base[5] + 5)))
#define CALL_compiling_base___CompilerVisitor___module(recv) ((compiling_base___CompilerVisitor___module_t)CALL((recv), (SFT_compiling_base[5] + 6)))
#define CALL_compiling_base___CompilerVisitor___module__eq(recv) ((compiling_base___CompilerVisitor___module__eq_t)CALL((recv), (SFT_compiling_base[5] + 7)))
#define CALL_compiling_base___CompilerVisitor___ctx(recv) ((compiling_base___CompilerVisitor___ctx_t)CALL((recv), (SFT_compiling_base[5] + 8)))
#define CALL_compiling_base___CompilerVisitor___ctx__eq(recv) ((compiling_base___CompilerVisitor___ctx__eq_t)CALL((recv), (SFT_compiling_base[5] + 9)))
#define CALL_compiling_base___CompilerVisitor___indent_level(recv) ((compiling_base___CompilerVisitor___indent_level_t)CALL((recv), (SFT_compiling_base[5] + 10)))
#define CALL_compiling_base___CompilerVisitor___indent_level__eq(recv) ((compiling_base___CompilerVisitor___indent_level__eq_t)CALL((recv), (SFT_compiling_base[5] + 11)))
#define CALL_compiling_base___CompilerVisitor___tc(recv) ((compiling_base___CompilerVisitor___tc_t)CALL((recv), (SFT_compiling_base[5] + 12)))
#define CALL_compiling_base___CompilerVisitor___tc__eq(recv) ((compiling_base___CompilerVisitor___tc__eq_t)CALL((recv), (SFT_compiling_base[5] + 13)))
#define CALL_compiling_base___CompilerVisitor___init(recv) ((compiling_base___CompilerVisitor___init_t)CALL((recv), (SFT_compiling_base[5] + 14)))
#define ID_CContext (SFT_compiling_base[6])
#define COLOR_CContext (SFT_compiling_base[7])
#define ATTR_compiling_base___CContext____decls(recv) ATTR(recv, (SFT_compiling_base[8] + 0))
#define ATTR_compiling_base___CContext____instrs(recv) ATTR(recv, (SFT_compiling_base[8] + 1))
#define INIT_TABLE_POS_CContext (SFT_compiling_base[9] + 0)
#define CALL_compiling_base___CContext___decls(recv) ((compiling_base___CContext___decls_t)CALL((recv), (SFT_compiling_base[9] + 1)))
#define CALL_compiling_base___CContext___instrs(recv) ((compiling_base___CContext___instrs_t)CALL((recv), (SFT_compiling_base[9] + 2)))
#define CALL_compiling_base___CContext___append(recv) ((compiling_base___CContext___append_t)CALL((recv), (SFT_compiling_base[9] + 3)))
#define CALL_compiling_base___CContext___merge(recv) ((compiling_base___CContext___merge_t)CALL((recv), (SFT_compiling_base[9] + 4)))
#define CALL_compiling_base___CContext___init(recv) ((compiling_base___CContext___init_t)CALL((recv), (SFT_compiling_base[9] + 5)))
#define CALL_compiling_base___MMGlobalProperty___meth_call(recv) ((compiling_base___MMGlobalProperty___meth_call_t)CALL((recv), (SFT_compiling_base[10] + 0)))
#define CALL_compiling_base___MMGlobalProperty___attr_access(recv) ((compiling_base___MMGlobalProperty___attr_access_t)CALL((recv), (SFT_compiling_base[10] + 1)))
#define CALL_compiling_base___MMGlobalClass___id_id(recv) ((compiling_base___MMGlobalClass___id_id_t)CALL((recv), (SFT_compiling_base[11] + 0)))
#define CALL_compiling_base___MMGlobalClass___color_id(recv) ((compiling_base___MMGlobalClass___color_id_t)CALL((recv), (SFT_compiling_base[11] + 1)))
#define CALL_compiling_base___MMGlobalClass___init_table_pos_id(recv) ((compiling_base___MMGlobalClass___init_table_pos_id_t)CALL((recv), (SFT_compiling_base[11] + 2)))
#define ATTR_compiling_base___MMLocalClass____primitive_info_cache(recv) ATTR(recv, (SFT_compiling_base[12] + 0))
#define ATTR_compiling_base___MMLocalClass____primitive_info_b(recv) ATTR(recv, (SFT_compiling_base[12] + 1))
#define CALL_compiling_base___MMLocalClass___primitive_info(recv) ((compiling_base___MMLocalClass___primitive_info_t)CALL((recv), (SFT_compiling_base[13] + 0)))
#define CALL_compiling_base___MMLocalClass___primitive_ctypes(recv) ((compiling_base___MMLocalClass___primitive_ctypes_t)CALL((recv), (SFT_compiling_base[13] + 1)))
#define ID_PrimitiveInfo (SFT_compiling_base[14])
#define COLOR_PrimitiveInfo (SFT_compiling_base[15])
#define ATTR_compiling_base___PrimitiveInfo____name(recv) ATTR(recv, (SFT_compiling_base[16] + 0))
#define ATTR_compiling_base___PrimitiveInfo____tagged(recv) ATTR(recv, (SFT_compiling_base[16] + 1))
#define ATTR_compiling_base___PrimitiveInfo____cname(recv) ATTR(recv, (SFT_compiling_base[16] + 2))
#define INIT_TABLE_POS_PrimitiveInfo (SFT_compiling_base[17] + 0)
#define CALL_compiling_base___PrimitiveInfo___name(recv) ((compiling_base___PrimitiveInfo___name_t)CALL((recv), (SFT_compiling_base[17] + 1)))
#define CALL_compiling_base___PrimitiveInfo___name__eq(recv) ((compiling_base___PrimitiveInfo___name__eq_t)CALL((recv), (SFT_compiling_base[17] + 2)))
#define CALL_compiling_base___PrimitiveInfo___tagged(recv) ((compiling_base___PrimitiveInfo___tagged_t)CALL((recv), (SFT_compiling_base[17] + 3)))
#define CALL_compiling_base___PrimitiveInfo___tagged__eq(recv) ((compiling_base___PrimitiveInfo___tagged__eq_t)CALL((recv), (SFT_compiling_base[17] + 4)))
#define CALL_compiling_base___PrimitiveInfo___cname(recv) ((compiling_base___PrimitiveInfo___cname_t)CALL((recv), (SFT_compiling_base[17] + 5)))
#define CALL_compiling_base___PrimitiveInfo___cname__eq(recv) ((compiling_base___PrimitiveInfo___cname__eq_t)CALL((recv), (SFT_compiling_base[17] + 6)))
#define CALL_compiling_base___PrimitiveInfo___init(recv) ((compiling_base___PrimitiveInfo___init_t)CALL((recv), (SFT_compiling_base[17] + 7)))
#define CALL_compiling_base___MMType___cname(recv) ((compiling_base___MMType___cname_t)CALL((recv), (SFT_compiling_base[18] + 0)))
#define CALL_compiling_base___MMType___default_cvalue(recv) ((compiling_base___MMType___default_cvalue_t)CALL((recv), (SFT_compiling_base[18] + 1)))
#define CALL_compiling_base___MMType___boxtype(recv) ((compiling_base___MMType___boxtype_t)CALL((recv), (SFT_compiling_base[18] + 2)))
#define CALL_compiling_base___MMType___unboxtype(recv) ((compiling_base___MMType___unboxtype_t)CALL((recv), (SFT_compiling_base[18] + 3)))
#define ATTR_compiling_base___MMLocalProperty____cname_cache(recv) ATTR(recv, (SFT_compiling_base[19] + 0))
#define CALL_compiling_base___MMLocalProperty___cname(recv) ((compiling_base___MMLocalProperty___cname_t)CALL((recv), (SFT_compiling_base[20] + 0)))
#define CALL_compiling_base___MMLocalProperty___super_meth_call(recv) ((compiling_base___MMLocalProperty___super_meth_call_t)CALL((recv), (SFT_compiling_base[20] + 1)))
val_t NEW_ToolContext_mmloader___ToolContext___init();
typedef val_t (* compiling_base___ToolContext___global_t)(val_t  self);
val_t compiling_base___ToolContext___global(val_t  self);
#define LOCATE_compiling_base___ToolContext___global "compiling_base::ToolContext::global"
typedef void (* compiling_base___ToolContext___global__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___global__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___global__eq "compiling_base::ToolContext::global="
typedef val_t (* compiling_base___ToolContext___compdir_t)(val_t  self);
val_t compiling_base___ToolContext___compdir(val_t  self);
#define LOCATE_compiling_base___ToolContext___compdir "compiling_base::ToolContext::compdir"
typedef void (* compiling_base___ToolContext___compdir__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___compdir__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___compdir__eq "compiling_base::ToolContext::compdir="
typedef val_t (* compiling_base___ToolContext___clibdir_t)(val_t  self);
val_t compiling_base___ToolContext___clibdir(val_t  self);
#define LOCATE_compiling_base___ToolContext___clibdir "compiling_base::ToolContext::clibdir"
typedef void (* compiling_base___ToolContext___clibdir__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___clibdir__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___clibdir__eq "compiling_base::ToolContext::clibdir="
typedef val_t (* compiling_base___ToolContext___bindir_t)(val_t  self);
val_t compiling_base___ToolContext___bindir(val_t  self);
#define LOCATE_compiling_base___ToolContext___bindir "compiling_base::ToolContext::bindir"
typedef void (* compiling_base___ToolContext___bindir__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___bindir__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___bindir__eq "compiling_base::ToolContext::bindir="
typedef val_t (* compiling_base___ToolContext___output_file_t)(val_t  self);
val_t compiling_base___ToolContext___output_file(val_t  self);
#define LOCATE_compiling_base___ToolContext___output_file "compiling_base::ToolContext::output_file"
typedef void (* compiling_base___ToolContext___output_file__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___output_file__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___output_file__eq "compiling_base::ToolContext::output_file="
typedef val_t (* compiling_base___ToolContext___boost_t)(val_t  self);
val_t compiling_base___ToolContext___boost(val_t  self);
#define LOCATE_compiling_base___ToolContext___boost "compiling_base::ToolContext::boost"
typedef void (* compiling_base___ToolContext___boost__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___boost__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___boost__eq "compiling_base::ToolContext::boost="
typedef val_t (* compiling_base___ToolContext___no_cc_t)(val_t  self);
val_t compiling_base___ToolContext___no_cc(val_t  self);
#define LOCATE_compiling_base___ToolContext___no_cc "compiling_base::ToolContext::no_cc"
typedef void (* compiling_base___ToolContext___no_cc__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___no_cc__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___no_cc__eq "compiling_base::ToolContext::no_cc="
typedef val_t (* compiling_base___ToolContext___ext_prefix_t)(val_t  self);
val_t compiling_base___ToolContext___ext_prefix(val_t  self);
#define LOCATE_compiling_base___ToolContext___ext_prefix "compiling_base::ToolContext::ext_prefix"
typedef void (* compiling_base___ToolContext___ext_prefix__eq_t)(val_t  self, val_t  param0);
void compiling_base___ToolContext___ext_prefix__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___ToolContext___ext_prefix__eq "compiling_base::ToolContext::ext_prefix="
typedef val_t (* compiling_base___CompilerVisitor___to_s_t)(val_t  self);
val_t compiling_base___CompilerVisitor___to_s(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___to_s "compiling_base::CompilerVisitor::(string::Object::to_s)"
typedef void (* compiling_base___CompilerVisitor___add_decl_t)(val_t  self, val_t  param0);
void compiling_base___CompilerVisitor___add_decl(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CompilerVisitor___add_decl "compiling_base::CompilerVisitor::add_decl"
typedef void (* compiling_base___CompilerVisitor___add_instr_t)(val_t  self, val_t  param0);
void compiling_base___CompilerVisitor___add_instr(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CompilerVisitor___add_instr "compiling_base::CompilerVisitor::add_instr"
typedef val_t (* compiling_base___CompilerVisitor___new_number_t)(val_t  self);
val_t compiling_base___CompilerVisitor___new_number(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___new_number "compiling_base::CompilerVisitor::new_number"
typedef void (* compiling_base___CompilerVisitor___indent_t)(val_t  self);
void compiling_base___CompilerVisitor___indent(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___indent "compiling_base::CompilerVisitor::indent"
typedef void (* compiling_base___CompilerVisitor___unindent_t)(val_t  self);
void compiling_base___CompilerVisitor___unindent(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___unindent "compiling_base::CompilerVisitor::unindent"
typedef val_t (* compiling_base___CompilerVisitor___module_t)(val_t  self);
val_t compiling_base___CompilerVisitor___module(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___module "compiling_base::CompilerVisitor::module"
typedef void (* compiling_base___CompilerVisitor___module__eq_t)(val_t  self, val_t  param0);
void compiling_base___CompilerVisitor___module__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CompilerVisitor___module__eq "compiling_base::CompilerVisitor::module="
typedef val_t (* compiling_base___CompilerVisitor___ctx_t)(val_t  self);
val_t compiling_base___CompilerVisitor___ctx(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___ctx "compiling_base::CompilerVisitor::ctx"
typedef void (* compiling_base___CompilerVisitor___ctx__eq_t)(val_t  self, val_t  param0);
void compiling_base___CompilerVisitor___ctx__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CompilerVisitor___ctx__eq "compiling_base::CompilerVisitor::ctx="
typedef val_t (* compiling_base___CompilerVisitor___indent_level_t)(val_t  self);
val_t compiling_base___CompilerVisitor___indent_level(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___indent_level "compiling_base::CompilerVisitor::indent_level"
typedef void (* compiling_base___CompilerVisitor___indent_level__eq_t)(val_t  self, val_t  param0);
void compiling_base___CompilerVisitor___indent_level__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CompilerVisitor___indent_level__eq "compiling_base::CompilerVisitor::indent_level="
typedef val_t (* compiling_base___CompilerVisitor___tc_t)(val_t  self);
val_t compiling_base___CompilerVisitor___tc(val_t  self);
#define LOCATE_compiling_base___CompilerVisitor___tc "compiling_base::CompilerVisitor::tc"
typedef void (* compiling_base___CompilerVisitor___tc__eq_t)(val_t  self, val_t  param0);
void compiling_base___CompilerVisitor___tc__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CompilerVisitor___tc__eq "compiling_base::CompilerVisitor::tc="
typedef void (* compiling_base___CompilerVisitor___init_t)(val_t  self, val_t  param0, int* init_table);
void compiling_base___CompilerVisitor___init(val_t  self, val_t  param0, int* init_table);
#define LOCATE_compiling_base___CompilerVisitor___init "compiling_base::CompilerVisitor::init"
val_t NEW_CompilerVisitor_compiling_base___CompilerVisitor___init(val_t p0);
typedef val_t (* compiling_base___CContext___decls_t)(val_t  self);
val_t compiling_base___CContext___decls(val_t  self);
#define LOCATE_compiling_base___CContext___decls "compiling_base::CContext::decls"
typedef val_t (* compiling_base___CContext___instrs_t)(val_t  self);
val_t compiling_base___CContext___instrs(val_t  self);
#define LOCATE_compiling_base___CContext___instrs "compiling_base::CContext::instrs"
typedef void (* compiling_base___CContext___append_t)(val_t  self, val_t  param0);
void compiling_base___CContext___append(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CContext___append "compiling_base::CContext::append"
typedef void (* compiling_base___CContext___merge_t)(val_t  self, val_t  param0);
void compiling_base___CContext___merge(val_t  self, val_t  param0);
#define LOCATE_compiling_base___CContext___merge "compiling_base::CContext::merge"
typedef void (* compiling_base___CContext___init_t)(val_t  self, int* init_table);
void compiling_base___CContext___init(val_t  self, int* init_table);
#define LOCATE_compiling_base___CContext___init "compiling_base::CContext::init"
val_t NEW_CContext_compiling_base___CContext___init();
val_t NEW_MMGlobalProperty_abstractmetamodel___MMGlobalProperty___init(val_t p0);
typedef val_t (* compiling_base___MMGlobalProperty___meth_call_t)(val_t  self);
val_t compiling_base___MMGlobalProperty___meth_call(val_t  self);
#define LOCATE_compiling_base___MMGlobalProperty___meth_call "compiling_base::MMGlobalProperty::meth_call"
typedef val_t (* compiling_base___MMGlobalProperty___attr_access_t)(val_t  self);
val_t compiling_base___MMGlobalProperty___attr_access(val_t  self);
#define LOCATE_compiling_base___MMGlobalProperty___attr_access "compiling_base::MMGlobalProperty::attr_access"
val_t NEW_MMGlobalClass_abstractmetamodel___MMGlobalClass___init(val_t p0);
typedef val_t (* compiling_base___MMGlobalClass___id_id_t)(val_t  self);
val_t compiling_base___MMGlobalClass___id_id(val_t  self);
#define LOCATE_compiling_base___MMGlobalClass___id_id "compiling_base::MMGlobalClass::id_id"
typedef val_t (* compiling_base___MMGlobalClass___color_id_t)(val_t  self);
val_t compiling_base___MMGlobalClass___color_id(val_t  self);
#define LOCATE_compiling_base___MMGlobalClass___color_id "compiling_base::MMGlobalClass::color_id"
typedef val_t (* compiling_base___MMGlobalClass___init_table_pos_id_t)(val_t  self);
val_t compiling_base___MMGlobalClass___init_table_pos_id(val_t  self);
#define LOCATE_compiling_base___MMGlobalClass___init_table_pos_id "compiling_base::MMGlobalClass::init_table_pos_id"
val_t NEW_MMLocalClass_abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1);
typedef val_t (* compiling_base___MMLocalClass___primitive_info_t)(val_t  self);
val_t compiling_base___MMLocalClass___primitive_info(val_t  self);
#define LOCATE_compiling_base___MMLocalClass___primitive_info "compiling_base::MMLocalClass::primitive_info"
typedef val_t (* compiling_base___MMLocalClass___primitive_ctypes_t)(val_t  self);
val_t compiling_base___MMLocalClass___primitive_ctypes(val_t  self);
#define LOCATE_compiling_base___MMLocalClass___primitive_ctypes "compiling_base::MMLocalClass::primitive_ctypes"
typedef val_t (* compiling_base___PrimitiveInfo___name_t)(val_t  self);
val_t compiling_base___PrimitiveInfo___name(val_t  self);
#define LOCATE_compiling_base___PrimitiveInfo___name "compiling_base::PrimitiveInfo::name"
typedef void (* compiling_base___PrimitiveInfo___name__eq_t)(val_t  self, val_t  param0);
void compiling_base___PrimitiveInfo___name__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___PrimitiveInfo___name__eq "compiling_base::PrimitiveInfo::name="
typedef val_t (* compiling_base___PrimitiveInfo___tagged_t)(val_t  self);
val_t compiling_base___PrimitiveInfo___tagged(val_t  self);
#define LOCATE_compiling_base___PrimitiveInfo___tagged "compiling_base::PrimitiveInfo::tagged"
typedef void (* compiling_base___PrimitiveInfo___tagged__eq_t)(val_t  self, val_t  param0);
void compiling_base___PrimitiveInfo___tagged__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___PrimitiveInfo___tagged__eq "compiling_base::PrimitiveInfo::tagged="
typedef val_t (* compiling_base___PrimitiveInfo___cname_t)(val_t  self);
val_t compiling_base___PrimitiveInfo___cname(val_t  self);
#define LOCATE_compiling_base___PrimitiveInfo___cname "compiling_base::PrimitiveInfo::cname"
typedef void (* compiling_base___PrimitiveInfo___cname__eq_t)(val_t  self, val_t  param0);
void compiling_base___PrimitiveInfo___cname__eq(val_t  self, val_t  param0);
#define LOCATE_compiling_base___PrimitiveInfo___cname__eq "compiling_base::PrimitiveInfo::cname="
typedef void (* compiling_base___PrimitiveInfo___init_t)(val_t  self, int* init_table);
void compiling_base___PrimitiveInfo___init(val_t  self, int* init_table);
#define LOCATE_compiling_base___PrimitiveInfo___init "compiling_base::PrimitiveInfo::init"
val_t NEW_PrimitiveInfo_compiling_base___PrimitiveInfo___init();
val_t NEW_MMType_static_type___MMType___init();
typedef val_t (* compiling_base___MMType___cname_t)(val_t  self);
val_t compiling_base___MMType___cname(val_t  self);
#define LOCATE_compiling_base___MMType___cname "compiling_base::MMType::cname"
typedef val_t (* compiling_base___MMType___default_cvalue_t)(val_t  self);
val_t compiling_base___MMType___default_cvalue(val_t  self);
#define LOCATE_compiling_base___MMType___default_cvalue "compiling_base::MMType::default_cvalue"
typedef val_t (* compiling_base___MMType___boxtype_t)(val_t  self, val_t  param0);
val_t compiling_base___MMType___boxtype(val_t  self, val_t  param0);
#define LOCATE_compiling_base___MMType___boxtype "compiling_base::MMType::boxtype"
typedef val_t (* compiling_base___MMType___unboxtype_t)(val_t  self, val_t  param0);
val_t compiling_base___MMType___unboxtype(val_t  self, val_t  param0);
#define LOCATE_compiling_base___MMType___unboxtype "compiling_base::MMType::unboxtype"
val_t NEW_MMLocalProperty_abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
typedef val_t (* compiling_base___MMLocalProperty___cname_t)(val_t  self);
val_t compiling_base___MMLocalProperty___cname(val_t  self);
#define LOCATE_compiling_base___MMLocalProperty___cname "compiling_base::MMLocalProperty::cname"
typedef val_t (* compiling_base___MMLocalProperty___super_meth_call_t)(val_t  self);
val_t compiling_base___MMLocalProperty___super_meth_call(val_t  self);
#define LOCATE_compiling_base___MMLocalProperty___super_meth_call "compiling_base::MMLocalProperty::super_meth_call"
#endif
