/* This C header file is generated by NIT to compile modules and programs that requires partial_order. */
#ifndef partial_order_sep
#define partial_order_sep
#include "standard._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_PartialOrder[];

extern const classtable_elt_t VFT_PartialOrderElement[];
extern const char *LOCATE_partial_order;
extern const int SFT_partial_order[];
#define ID_PartialOrder (SFT_partial_order[0])
#define COLOR_PartialOrder (SFT_partial_order[1])
#define ATTR_partial_order___PartialOrder____elements(recv) ATTR(recv, (SFT_partial_order[2] + 0))
#define ATTR_partial_order___PartialOrder____elements_list(recv) ATTR(recv, (SFT_partial_order[2] + 1))
#define ATTR_partial_order___PartialOrder____roots(recv) ATTR(recv, (SFT_partial_order[2] + 2))
#define INIT_TABLE_POS_PartialOrder (SFT_partial_order[3] + 0)
#define CALL_partial_order___PartialOrder___roots(recv) ((partial_order___PartialOrder___roots_t)CALL((recv), (SFT_partial_order[3] + 1)))
#define CALL_partial_order___PartialOrder_____bra(recv) ((partial_order___PartialOrder_____bra_t)CALL((recv), (SFT_partial_order[3] + 2)))
#define CALL_partial_order___PartialOrder___to_dot(recv) ((partial_order___PartialOrder___to_dot_t)CALL((recv), (SFT_partial_order[3] + 3)))
#define CALL_partial_order___PartialOrder___to_dot_header(recv) ((partial_order___PartialOrder___to_dot_header_t)CALL((recv), (SFT_partial_order[3] + 4)))
#define CALL_partial_order___PartialOrder___to_dot_node(recv) ((partial_order___PartialOrder___to_dot_node_t)CALL((recv), (SFT_partial_order[3] + 5)))
#define CALL_partial_order___PartialOrder___to_dot_edge(recv) ((partial_order___PartialOrder___to_dot_edge_t)CALL((recv), (SFT_partial_order[3] + 6)))
#define CALL_partial_order___PartialOrder___select_smallests(recv) ((partial_order___PartialOrder___select_smallests_t)CALL((recv), (SFT_partial_order[3] + 7)))
#define CALL_partial_order___PartialOrder___add(recv) ((partial_order___PartialOrder___add_t)CALL((recv), (SFT_partial_order[3] + 8)))
#define CALL_partial_order___PartialOrder___has_all(recv) ((partial_order___PartialOrder___has_all_t)CALL((recv), (SFT_partial_order[3] + 9)))
#define CALL_partial_order___PartialOrder___new_poe(recv) ((partial_order___PartialOrder___new_poe_t)CALL((recv), (SFT_partial_order[3] + 10)))
#define CALL_partial_order___PartialOrder___add_to_smallests(recv) ((partial_order___PartialOrder___add_to_smallests_t)CALL((recv), (SFT_partial_order[3] + 11)))
#define CALL_partial_order___PartialOrder___compute_smallers_for(recv) ((partial_order___PartialOrder___compute_smallers_for_t)CALL((recv), (SFT_partial_order[3] + 12)))
#define CALL_partial_order___PartialOrder___init(recv) ((partial_order___PartialOrder___init_t)CALL((recv), (SFT_partial_order[3] + 13)))
#define ID_PartialOrderElement (SFT_partial_order[4])
#define COLOR_PartialOrderElement (SFT_partial_order[5])
#define ATTR_partial_order___PartialOrderElement____order(recv) ATTR(recv, (SFT_partial_order[6] + 0))
#define ATTR_partial_order___PartialOrderElement____value(recv) ATTR(recv, (SFT_partial_order[6] + 1))
#define ATTR_partial_order___PartialOrderElement____rank(recv) ATTR(recv, (SFT_partial_order[6] + 2))
#define ATTR_partial_order___PartialOrderElement____direct_greaters(recv) ATTR(recv, (SFT_partial_order[6] + 3))
#define ATTR_partial_order___PartialOrderElement____direct_smallers(recv) ATTR(recv, (SFT_partial_order[6] + 4))
#define ATTR_partial_order___PartialOrderElement____greaters(recv) ATTR(recv, (SFT_partial_order[6] + 5))
#define ATTR_partial_order___PartialOrderElement____greaters_and_self_cache(recv) ATTR(recv, (SFT_partial_order[6] + 6))
#define ATTR_partial_order___PartialOrderElement____smallers_last_length(recv) ATTR(recv, (SFT_partial_order[6] + 7))
#define ATTR_partial_order___PartialOrderElement____smallers_cache(recv) ATTR(recv, (SFT_partial_order[6] + 8))
#define ATTR_partial_order___PartialOrderElement____linear_extension_cache(recv) ATTR(recv, (SFT_partial_order[6] + 9))
#define ATTR_partial_order___PartialOrderElement____reverse_linear_extension_cache(recv) ATTR(recv, (SFT_partial_order[6] + 10))
#define INIT_TABLE_POS_PartialOrderElement (SFT_partial_order[7] + 0)
#define CALL_partial_order___PartialOrderElement___order(recv) ((partial_order___PartialOrderElement___order_t)CALL((recv), (SFT_partial_order[7] + 1)))
#define CALL_partial_order___PartialOrderElement___value(recv) ((partial_order___PartialOrderElement___value_t)CALL((recv), (SFT_partial_order[7] + 2)))
#define CALL_partial_order___PartialOrderElement___rank(recv) ((partial_order___PartialOrderElement___rank_t)CALL((recv), (SFT_partial_order[7] + 3)))
#define CALL_partial_order___PartialOrderElement___direct_greaters(recv) ((partial_order___PartialOrderElement___direct_greaters_t)CALL((recv), (SFT_partial_order[7] + 4)))
#define CALL_partial_order___PartialOrderElement___direct_smallers(recv) ((partial_order___PartialOrderElement___direct_smallers_t)CALL((recv), (SFT_partial_order[7] + 5)))
#define CALL_partial_order___PartialOrderElement___greaters(recv) ((partial_order___PartialOrderElement___greaters_t)CALL((recv), (SFT_partial_order[7] + 6)))
#define CALL_partial_order___PartialOrderElement___greaters_and_self(recv) ((partial_order___PartialOrderElement___greaters_and_self_t)CALL((recv), (SFT_partial_order[7] + 7)))
#define CALL_partial_order___PartialOrderElement___smallers(recv) ((partial_order___PartialOrderElement___smallers_t)CALL((recv), (SFT_partial_order[7] + 8)))
#define CALL_partial_order___PartialOrderElement___linear_extension(recv) ((partial_order___PartialOrderElement___linear_extension_t)CALL((recv), (SFT_partial_order[7] + 9)))
#define CALL_partial_order___PartialOrderElement___reverse_linear_extension(recv) ((partial_order___PartialOrderElement___reverse_linear_extension_t)CALL((recv), (SFT_partial_order[7] + 10)))
#define CALL_partial_order___PartialOrderElement_____l(recv) ((partial_order___PartialOrderElement_____l_t)CALL((recv), (SFT_partial_order[7] + 11)))
#define CALL_partial_order___PartialOrderElement_____leq(recv) ((partial_order___PartialOrderElement_____leq_t)CALL((recv), (SFT_partial_order[7] + 12)))
#define CALL_partial_order___PartialOrderElement_____g(recv) ((partial_order___PartialOrderElement_____g_t)CALL((recv), (SFT_partial_order[7] + 13)))
#define CALL_partial_order___PartialOrderElement_____geq(recv) ((partial_order___PartialOrderElement_____geq_t)CALL((recv), (SFT_partial_order[7] + 14)))
#define CALL_partial_order___PartialOrderElement___register_direct_smallers(recv) ((partial_order___PartialOrderElement___register_direct_smallers_t)CALL((recv), (SFT_partial_order[7] + 15)))
#define CALL_partial_order___PartialOrderElement___init(recv) ((partial_order___PartialOrderElement___init_t)CALL((recv), (SFT_partial_order[7] + 16)))
typedef val_t (* partial_order___PartialOrder___iterator_t)(val_t  self);
val_t partial_order___PartialOrder___iterator(val_t  self);
#define LOCATE_partial_order___PartialOrder___iterator "partial_order::PartialOrder::(abstract_collection::Collection::iterator)"
typedef val_t (* partial_order___PartialOrder___is_empty_t)(val_t  self);
val_t partial_order___PartialOrder___is_empty(val_t  self);
#define LOCATE_partial_order___PartialOrder___is_empty "partial_order::PartialOrder::(abstract_collection::Collection::is_empty)"
typedef val_t (* partial_order___PartialOrder___length_t)(val_t  self);
val_t partial_order___PartialOrder___length(val_t  self);
#define LOCATE_partial_order___PartialOrder___length "partial_order::PartialOrder::(abstract_collection::Collection::length)"
typedef val_t (* partial_order___PartialOrder___has_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder___has(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder___has "partial_order::PartialOrder::(abstract_collection::Collection::has)"
typedef val_t (* partial_order___PartialOrder___has_only_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder___has_only(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder___has_only "partial_order::PartialOrder::(abstract_collection::Collection::has_only)"
typedef val_t (* partial_order___PartialOrder___count_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder___count(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder___count "partial_order::PartialOrder::(abstract_collection::Collection::count)"
typedef val_t (* partial_order___PartialOrder___first_t)(val_t  self);
val_t partial_order___PartialOrder___first(val_t  self);
#define LOCATE_partial_order___PartialOrder___first "partial_order::PartialOrder::(abstract_collection::Collection::first)"
typedef val_t (* partial_order___PartialOrder___roots_t)(val_t  self);
val_t partial_order___PartialOrder___roots(val_t  self);
#define LOCATE_partial_order___PartialOrder___roots "partial_order::PartialOrder::roots"
typedef val_t (* partial_order___PartialOrder_____bra_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder_____bra(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder_____bra "partial_order::PartialOrder::[]"
typedef val_t (* partial_order___PartialOrder___to_dot_t)(val_t  self);
val_t partial_order___PartialOrder___to_dot(val_t  self);
#define LOCATE_partial_order___PartialOrder___to_dot "partial_order::PartialOrder::to_dot"
typedef val_t (* partial_order___PartialOrder___to_dot_header_t)(val_t  self);
val_t partial_order___PartialOrder___to_dot_header(val_t  self);
#define LOCATE_partial_order___PartialOrder___to_dot_header "partial_order::PartialOrder::to_dot_header"
typedef val_t (* partial_order___PartialOrder___to_dot_node_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder___to_dot_node(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder___to_dot_node "partial_order::PartialOrder::to_dot_node"
typedef val_t (* partial_order___PartialOrder___to_dot_edge_t)(val_t  self, val_t  param0, val_t  param1);
val_t partial_order___PartialOrder___to_dot_edge(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_partial_order___PartialOrder___to_dot_edge "partial_order::PartialOrder::to_dot_edge"
typedef val_t (* partial_order___PartialOrder___select_smallests_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder___select_smallests(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder___select_smallests "partial_order::PartialOrder::select_smallests"
typedef val_t (* partial_order___PartialOrder___add_t)(val_t  self, val_t  param0, val_t  param1);
val_t partial_order___PartialOrder___add(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_partial_order___PartialOrder___add "partial_order::PartialOrder::add"
typedef val_t (* partial_order___PartialOrder___has_all_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrder___has_all(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrder___has_all "partial_order::PartialOrder::has_all"
typedef val_t (* partial_order___PartialOrder___new_poe_t)(val_t  self, val_t  param0, val_t  param1);
val_t partial_order___PartialOrder___new_poe(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_partial_order___PartialOrder___new_poe "partial_order::PartialOrder::new_poe"
typedef val_t (* partial_order___PartialOrder___add_to_smallests_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2);
val_t partial_order___PartialOrder___add_to_smallests(val_t  self, val_t  param0, val_t  param1, val_t  param2);
#define LOCATE_partial_order___PartialOrder___add_to_smallests "partial_order::PartialOrder::add_to_smallests"
typedef void (* partial_order___PartialOrder___compute_smallers_for_t)(val_t  self, val_t  param0, val_t  param1);
void partial_order___PartialOrder___compute_smallers_for(val_t  self, val_t  param0, val_t  param1);
#define LOCATE_partial_order___PartialOrder___compute_smallers_for "partial_order::PartialOrder::compute_smallers_for"
typedef void (* partial_order___PartialOrder___init_t)(val_t  self, int* init_table);
void partial_order___PartialOrder___init(val_t  self, int* init_table);
#define LOCATE_partial_order___PartialOrder___init "partial_order::PartialOrder::init"
val_t NEW_PartialOrder_partial_order___PartialOrder___init();
typedef val_t (* partial_order___PartialOrderElement___order_t)(val_t  self);
val_t partial_order___PartialOrderElement___order(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___order "partial_order::PartialOrderElement::order"
typedef val_t (* partial_order___PartialOrderElement___value_t)(val_t  self);
val_t partial_order___PartialOrderElement___value(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___value "partial_order::PartialOrderElement::value"
typedef val_t (* partial_order___PartialOrderElement___rank_t)(val_t  self);
val_t partial_order___PartialOrderElement___rank(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___rank "partial_order::PartialOrderElement::rank"
typedef val_t (* partial_order___PartialOrderElement___direct_greaters_t)(val_t  self);
val_t partial_order___PartialOrderElement___direct_greaters(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___direct_greaters "partial_order::PartialOrderElement::direct_greaters"
typedef val_t (* partial_order___PartialOrderElement___direct_smallers_t)(val_t  self);
val_t partial_order___PartialOrderElement___direct_smallers(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___direct_smallers "partial_order::PartialOrderElement::direct_smallers"
typedef val_t (* partial_order___PartialOrderElement___greaters_t)(val_t  self);
val_t partial_order___PartialOrderElement___greaters(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___greaters "partial_order::PartialOrderElement::greaters"
typedef val_t (* partial_order___PartialOrderElement___greaters_and_self_t)(val_t  self);
val_t partial_order___PartialOrderElement___greaters_and_self(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___greaters_and_self "partial_order::PartialOrderElement::greaters_and_self"
typedef val_t (* partial_order___PartialOrderElement___smallers_t)(val_t  self);
val_t partial_order___PartialOrderElement___smallers(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___smallers "partial_order::PartialOrderElement::smallers"
typedef val_t (* partial_order___PartialOrderElement___linear_extension_t)(val_t  self);
val_t partial_order___PartialOrderElement___linear_extension(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___linear_extension "partial_order::PartialOrderElement::linear_extension"
typedef val_t (* partial_order___PartialOrderElement___reverse_linear_extension_t)(val_t  self);
val_t partial_order___PartialOrderElement___reverse_linear_extension(val_t  self);
#define LOCATE_partial_order___PartialOrderElement___reverse_linear_extension "partial_order::PartialOrderElement::reverse_linear_extension"
typedef val_t (* partial_order___PartialOrderElement_____l_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrderElement_____l(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrderElement_____l "partial_order::PartialOrderElement::<"
typedef val_t (* partial_order___PartialOrderElement_____leq_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrderElement_____leq(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrderElement_____leq "partial_order::PartialOrderElement::<="
typedef val_t (* partial_order___PartialOrderElement_____g_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrderElement_____g(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrderElement_____g "partial_order::PartialOrderElement::>"
typedef val_t (* partial_order___PartialOrderElement_____geq_t)(val_t  self, val_t  param0);
val_t partial_order___PartialOrderElement_____geq(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrderElement_____geq "partial_order::PartialOrderElement::>="
typedef void (* partial_order___PartialOrderElement___register_direct_smallers_t)(val_t  self, val_t  param0);
void partial_order___PartialOrderElement___register_direct_smallers(val_t  self, val_t  param0);
#define LOCATE_partial_order___PartialOrderElement___register_direct_smallers "partial_order::PartialOrderElement::register_direct_smallers"
typedef void (* partial_order___PartialOrderElement___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void partial_order___PartialOrderElement___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_partial_order___PartialOrderElement___init "partial_order::PartialOrderElement::init"
val_t NEW_PartialOrderElement_partial_order___PartialOrderElement___init(val_t p0, val_t p1, val_t p2);
#endif
