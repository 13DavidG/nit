/* This C header file is generated by NIT to compile modules and programs that requires genericity. */
#ifndef genericity_sep
#define genericity_sep
#include "type_formal._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_MMTypeGeneric[];

extern const classtable_elt_t VFT_MMTypeFormalParameter[];
extern const char *LOCATE_genericity;
extern const int SFT_genericity[];
#define ATTR_genericity___MMLocalClass____types(recv) ATTR(recv, (SFT_genericity[0] + 0))
#define ATTR_genericity___MMLocalClass____formals_types(recv) ATTR(recv, (SFT_genericity[0] + 1))
#define CALL_genericity___MMLocalClass___get_formal(recv) ((genericity___MMLocalClass___get_formal_t)CALL((recv), (SFT_genericity[1] + 0)))
#define CALL_genericity___MMLocalClass___register_formal(recv) ((genericity___MMLocalClass___register_formal_t)CALL((recv), (SFT_genericity[1] + 1)))
#define CALL_genericity___MMLocalClass___get_instantiate_type(recv) ((genericity___MMLocalClass___get_instantiate_type_t)CALL((recv), (SFT_genericity[1] + 2)))
#define CALL_genericity___MMLocalClass___formals_types(recv) ((genericity___MMLocalClass___formals_types_t)CALL((recv), (SFT_genericity[1] + 3)))
#define CALL_SUPER_genericity___MMLocalClass___get_type(recv) ((genericity___MMLocalClass___get_type_t)CALL((recv), (SFT_genericity[1] + 4)))
#define CALL_genericity___MMLocalClass___is_generic(recv) ((genericity___MMLocalClass___is_generic_t)CALL((recv), (SFT_genericity[1] + 5)))
#define CALL_genericity___MMType___is_generic(recv) ((genericity___MMType___is_generic_t)CALL((recv), (SFT_genericity[2] + 0)))
#define ID_MMTypeGeneric (SFT_genericity[3])
#define COLOR_MMTypeGeneric (SFT_genericity[4])
#define ATTR_genericity___MMTypeGeneric____params(recv) ATTR(recv, (SFT_genericity[5] + 0))
#define INIT_TABLE_POS_MMTypeGeneric (SFT_genericity[6] + 0)
#define CALL_genericity___MMTypeGeneric___params(recv) ((genericity___MMTypeGeneric___params_t)CALL((recv), (SFT_genericity[6] + 1)))
#define CALL_SUPER_genericity___MMTypeGeneric___upcast_for(recv) ((genericity___MMTypeGeneric___upcast_for_t)CALL((recv), (SFT_genericity[6] + 2)))
#define CALL_genericity___MMTypeGeneric___params_equals(recv) ((genericity___MMTypeGeneric___params_equals_t)CALL((recv), (SFT_genericity[6] + 3)))
#define CALL_SUPER_genericity___MMTypeGeneric___to_s(recv) ((genericity___MMTypeGeneric___to_s_t)CALL((recv), (SFT_genericity[6] + 4)))
#define CALL_genericity___MMTypeGeneric___is_subtype(recv) ((genericity___MMTypeGeneric___is_subtype_t)CALL((recv), (SFT_genericity[6] + 5)))
#define CALL_genericity___MMTypeGeneric___init(recv) ((genericity___MMTypeGeneric___init_t)CALL((recv), (SFT_genericity[6] + 6)))
#define ID_MMTypeFormalParameter (SFT_genericity[7])
#define COLOR_MMTypeFormalParameter (SFT_genericity[8])
#define ATTR_genericity___MMTypeFormalParameter____def_class(recv) ATTR(recv, (SFT_genericity[9] + 0))
#define ATTR_genericity___MMTypeFormalParameter____position(recv) ATTR(recv, (SFT_genericity[9] + 1))
#define INIT_TABLE_POS_MMTypeFormalParameter (SFT_genericity[10] + 0)
#define CALL_genericity___MMTypeFormalParameter___def_class(recv) ((genericity___MMTypeFormalParameter___def_class_t)CALL((recv), (SFT_genericity[10] + 1)))
#define CALL_genericity___MMTypeFormalParameter___position(recv) ((genericity___MMTypeFormalParameter___position_t)CALL((recv), (SFT_genericity[10] + 2)))
#define CALL_genericity___MMTypeFormalParameter___bound__eq(recv) ((genericity___MMTypeFormalParameter___bound__eq_t)CALL((recv), (SFT_genericity[10] + 3)))
#define CALL_genericity___MMTypeFormalParameter___with_bound(recv) ((genericity___MMTypeFormalParameter___with_bound_t)CALL((recv), (SFT_genericity[10] + 4)))
#define CALL_genericity___MMTypeFormalParameter___init(recv) ((genericity___MMTypeFormalParameter___init_t)CALL((recv), (SFT_genericity[10] + 5)))
val_t NEW_MMLocalClass_abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1);
typedef val_t (* genericity___MMLocalClass___get_type_t)(val_t  self);
val_t genericity___MMLocalClass___get_type(val_t  self);
#define LOCATE_genericity___MMLocalClass___get_type "genericity::MMLocalClass::(static_type::MMLocalClass::get_type)"
typedef val_t (* genericity___MMLocalClass___get_formal_t)(val_t  self, val_t  param0);
val_t genericity___MMLocalClass___get_formal(val_t  self, val_t  param0);
#define LOCATE_genericity___MMLocalClass___get_formal "genericity::MMLocalClass::get_formal"
typedef void (* genericity___MMLocalClass___register_formal_t)(val_t  self, val_t  param0);
void genericity___MMLocalClass___register_formal(val_t  self, val_t  param0);
#define LOCATE_genericity___MMLocalClass___register_formal "genericity::MMLocalClass::register_formal"
typedef val_t (* genericity___MMLocalClass___get_instantiate_type_t)(val_t  self, val_t  param0);
val_t genericity___MMLocalClass___get_instantiate_type(val_t  self, val_t  param0);
#define LOCATE_genericity___MMLocalClass___get_instantiate_type "genericity::MMLocalClass::get_instantiate_type"
typedef val_t (* genericity___MMLocalClass___formals_types_t)(val_t  self);
val_t genericity___MMLocalClass___formals_types(val_t  self);
#define LOCATE_genericity___MMLocalClass___formals_types "genericity::MMLocalClass::formals_types"
typedef val_t (* genericity___MMLocalClass___is_generic_t)(val_t  self);
val_t genericity___MMLocalClass___is_generic(val_t  self);
#define LOCATE_genericity___MMLocalClass___is_generic "genericity::MMLocalClass::is_generic"
val_t NEW_MMType_static_type___MMType___init();
typedef val_t (* genericity___MMType___is_generic_t)(val_t  self);
val_t genericity___MMType___is_generic(val_t  self);
#define LOCATE_genericity___MMType___is_generic "genericity::MMType::is_generic"
val_t NEW_MMTypeFormal_type_formal___MMTypeFormal___init(val_t p0, val_t p1);
typedef val_t (* genericity___MMTypeFormal___is_generic_t)(val_t  self);
val_t genericity___MMTypeFormal___is_generic(val_t  self);
#define LOCATE_genericity___MMTypeFormal___is_generic "genericity::MMTypeFormal::(genericity::MMType::is_generic)"
val_t NEW_MMTypeSimpleClass_static_type___MMTypeSimpleClass___init(val_t p0);
typedef val_t (* genericity___MMTypeSimpleClass___is_generic_t)(val_t  self);
val_t genericity___MMTypeSimpleClass___is_generic(val_t  self);
#define LOCATE_genericity___MMTypeSimpleClass___is_generic "genericity::MMTypeSimpleClass::(genericity::MMType::is_generic)"
typedef val_t (* genericity___MMTypeGeneric___to_s_t)(val_t  self);
val_t genericity___MMTypeGeneric___to_s(val_t  self);
#define LOCATE_genericity___MMTypeGeneric___to_s "genericity::MMTypeGeneric::(string::Object::to_s)"
typedef val_t (* genericity___MMTypeGeneric___is_supertype_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeGeneric___is_supertype(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeGeneric___is_supertype "genericity::MMTypeGeneric::(static_type::MMType::is_supertype)"
typedef val_t (* genericity___MMTypeGeneric___for_module_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeGeneric___for_module(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeGeneric___for_module "genericity::MMTypeGeneric::(static_type::MMType::for_module)"
typedef val_t (* genericity___MMTypeGeneric___adapt_to_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeGeneric___adapt_to(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeGeneric___adapt_to "genericity::MMTypeGeneric::(static_type::MMType::adapt_to)"
typedef val_t (* genericity___MMTypeGeneric___upcast_for_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeGeneric___upcast_for(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeGeneric___upcast_for "genericity::MMTypeGeneric::(static_type::MMType::upcast_for)"
typedef val_t (* genericity___MMTypeGeneric___is_generic_t)(val_t  self);
val_t genericity___MMTypeGeneric___is_generic(val_t  self);
#define LOCATE_genericity___MMTypeGeneric___is_generic "genericity::MMTypeGeneric::(genericity::MMType::is_generic)"
typedef val_t (* genericity___MMTypeGeneric___params_t)(val_t  self);
val_t genericity___MMTypeGeneric___params(val_t  self);
#define LOCATE_genericity___MMTypeGeneric___params "genericity::MMTypeGeneric::params"
typedef val_t (* genericity___MMTypeGeneric___params_equals_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeGeneric___params_equals(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeGeneric___params_equals "genericity::MMTypeGeneric::params_equals"
typedef val_t (* genericity___MMTypeGeneric___is_subtype_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeGeneric___is_subtype(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeGeneric___is_subtype "genericity::MMTypeGeneric::is_subtype"
typedef void (* genericity___MMTypeGeneric___init_t)(val_t  self, val_t  param0, val_t  param1, int* init_table);
void genericity___MMTypeGeneric___init(val_t  self, val_t  param0, val_t  param1, int* init_table);
#define LOCATE_genericity___MMTypeGeneric___init "genericity::MMTypeGeneric::init"
val_t NEW_MMTypeGeneric_genericity___MMTypeGeneric___init(val_t p0, val_t p1);
typedef val_t (* genericity___MMTypeFormalParameter___module_t)(val_t  self);
val_t genericity___MMTypeFormalParameter___module(val_t  self);
#define LOCATE_genericity___MMTypeFormalParameter___module "genericity::MMTypeFormalParameter::(static_type::MMType::module)"
typedef val_t (* genericity___MMTypeFormalParameter___for_module_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeFormalParameter___for_module(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeFormalParameter___for_module "genericity::MMTypeFormalParameter::(static_type::MMType::for_module)"
typedef val_t (* genericity___MMTypeFormalParameter___adapt_to_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeFormalParameter___adapt_to(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeFormalParameter___adapt_to "genericity::MMTypeFormalParameter::(static_type::MMType::adapt_to)"
typedef val_t (* genericity___MMTypeFormalParameter___upcast_for_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeFormalParameter___upcast_for(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeFormalParameter___upcast_for "genericity::MMTypeFormalParameter::(static_type::MMType::upcast_for)"
typedef val_t (* genericity___MMTypeFormalParameter___def_class_t)(val_t  self);
val_t genericity___MMTypeFormalParameter___def_class(val_t  self);
#define LOCATE_genericity___MMTypeFormalParameter___def_class "genericity::MMTypeFormalParameter::def_class"
typedef val_t (* genericity___MMTypeFormalParameter___position_t)(val_t  self);
val_t genericity___MMTypeFormalParameter___position(val_t  self);
#define LOCATE_genericity___MMTypeFormalParameter___position "genericity::MMTypeFormalParameter::position"
typedef void (* genericity___MMTypeFormalParameter___bound__eq_t)(val_t  self, val_t  param0);
void genericity___MMTypeFormalParameter___bound__eq(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeFormalParameter___bound__eq "genericity::MMTypeFormalParameter::bound="
typedef void (* genericity___MMTypeFormalParameter___with_bound_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
void genericity___MMTypeFormalParameter___with_bound(val_t  self, val_t  param0, val_t  param1, val_t  param2, val_t  param3, int* init_table);
#define LOCATE_genericity___MMTypeFormalParameter___with_bound "genericity::MMTypeFormalParameter::with_bound"
val_t NEW_MMTypeFormalParameter_genericity___MMTypeFormalParameter___with_bound(val_t p0, val_t p1, val_t p2, val_t p3);
typedef void (* genericity___MMTypeFormalParameter___init_t)(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
void genericity___MMTypeFormalParameter___init(val_t  self, val_t  param0, val_t  param1, val_t  param2, int* init_table);
#define LOCATE_genericity___MMTypeFormalParameter___init "genericity::MMTypeFormalParameter::init"
val_t NEW_MMTypeFormalParameter_genericity___MMTypeFormalParameter___init(val_t p0, val_t p1, val_t p2);
typedef val_t (* genericity___MMTypeNone___for_module_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeNone___for_module(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeNone___for_module "genericity::MMTypeNone::(static_type::MMType::for_module)"
typedef val_t (* genericity___MMTypeNone___adapt_to_t)(val_t  self, val_t  param0);
val_t genericity___MMTypeNone___adapt_to(val_t  self, val_t  param0);
#define LOCATE_genericity___MMTypeNone___adapt_to "genericity::MMTypeNone::(static_type::MMType::adapt_to)"
val_t NEW_MMTypeNone_static_type___MMTypeNone___init(val_t p0);
typedef val_t (* genericity___MMTypeNone___is_generic_t)(val_t  self);
val_t genericity___MMTypeNone___is_generic(val_t  self);
#define LOCATE_genericity___MMTypeNone___is_generic "genericity::MMTypeNone::(genericity::MMType::is_generic)"
#endif
