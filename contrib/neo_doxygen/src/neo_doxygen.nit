# This file is part of NIT ( http://www.nitlanguage.org ).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Doxygen XML to Neo4j
#
# ## Synopsis
#
#     neo_doxygen project_name xml_output_dir [neo4j_url]
#
# ## Description
#
# Convert a Doxygen XML output into a model in Neo4j that is readable by the
# `nx` tool.
#
# ## Arguments
#
# * project_name: The internal name of the project. Must the same name as the
# one specified to the `nx` tool.
#
# * xml_output_dir: The directory where the XML documents generated by Doxygen
# are located.
#
# * neo4j_url: The URL of the instance of Neo4j to use.
# `http://localhost:7474` by default.
module neo_doxygen

import model
import doxml

# An importation task.
class NeoDoxygen
	var client: Neo4jClient
	var model: ProjectGraph is noinit

	# How many operation can be executed in one batch?
	private var batch_max_size = 1000

	# Generate a graph from the specified project model.
	#
	# Parameters:
	#
	# * `name`: project name.
	# * `dir`: Doxygen XML output directory path.
	fun put_project(name: String, dir: String) do
		model = new ProjectGraph(name)
		#Â TODO Let the user select the language.
		var reader = new CompoundFileReader(model, new JavaSource)
		# Queue for sub-directories.
		var directories = new Array[String]

		if dir.length > 1 and dir.chars.last == "/" then
			dir = dir.substring(0, dir.length - 1)
		end
		loop
			for f in dir.files do
				var path = dir/f
				if path.file_stat.is_dir then
					directories.push(path)
				else if f.has_suffix(".xml") and f != "index.xml" then
					print "Processing {path}..."
					reader.read(path)
				end
			end
			if directories.length <= 0 then break
			dir = directories.pop
		end
	end

	# Save the graph.
	fun save do
		model.put_edges
		var nodes = model.all_nodes
		print("Saving {nodes.length} nodes...")
		push_all(nodes)
		var edges = model.all_edges
		print("Saving {edges.length} edges...")
		push_all(edges)
	end

	# Save `neo_entities` in the database using batch mode.
	private fun push_all(neo_entities: Collection[NeoEntity]) do
		var batch = new NeoBatch(client)
		var len = neo_entities.length
		var sum = 0
		var i = 1

		for nentity in neo_entities do
			batch.save_entity(nentity)
			if i == batch_max_size then
				do_batch(batch)
				sum += batch_max_size
				print("\t{sum * 100 / len}% done.")
				batch = new NeoBatch(client)
				i = 1
			else
				i += 1
			end
		end
		do_batch(batch)
	end

	# Execute `batch` and check for errors.
	#
	# Abort if `batch.execute` returns errors.
	private fun do_batch(batch: NeoBatch) do
		var errors = batch.execute
		if not errors.is_empty then
			for e in errors do sys.stderr.write("{sys.program_name}: {e}\n")
			exit(1)
		end
	end
end

if args.length != 2 and args.length != 3 then
	stderr.write("Usage: {sys.program_name} project_name xml_output_dir [neo4j_url]\n")
	exit(1)
end
var url = "http://localhost:7474"
if args.length >= 3 then
	url = args[2]
end

var neo = new NeoDoxygen(new Neo4jClient(url))
neo.put_project(args[0], args[1])
neo.save
