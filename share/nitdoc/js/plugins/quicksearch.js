/* This file is part of NIT ( http://www.nitlanguage.org ).

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Documentation generator for the nit language.
   Generate API documentation in HTML format from nit source code.
*/

/*
 * Nitdoc QuickSearch module
 */
define([
	"jquery",
	"plugins/utils",
	"quicksearchList",
], function($, utils) {

	var QuickSearch = {
		rawList: this.nitdocQuickSearchRawList, // List of raw resulsts generated by nitdoc tool
		searchField: null, // <input:text> search field
		currentTable: null, // current search results <table>
		currentIndex: -1, // current cursor position into search results table

		// Enable QuickSearch plugin
		enableQuickSearch: function(containerSelector) {
			this.searchField = $(document.createElement("input"))
			.attr({
				id: "nitdoc-qs-field",
				type: "text",
				autocomplete: "off",
				value: "quick search..."
			})
			.addClass("nitdoc-qs-field-notused")
			.keydown(function(event) {
				return QuickSearch.doKeyDownAction(event.keyCode);
			})
			.keyup(function(event) {
				QuickSearch.doKeyUpAction(event.keyCode);
			})
			.focusout(function() {
				if($(this).val() == "") {
					$(this).addClass("nitdoc-qs-field-notused");
					$(this).val("quick search...");
				}
			})
			.focusin(function() {
				if($(this).val() == "quick search...") {
					$(this).removeClass("nitdoc-qs-field-notused");
					$(this).val("");
				}
			});

			$(containerSelector).append(
				$(document.createElement("li"))
				.attr("id", "nitdoc-qs-li")
				.append(this.searchField)
			);

			// Close quicksearch list on click
			$(document).click(function(e) {
				QuickSearch.closeResultsTable();
			});
		},

		doKeyDownAction: function(key) {
			switch(key) {
				case 38: // Up
					this.selectPrevResult();
					return false;
				case 40: // Down
					this.selectNextResult();
					return false;
				default:
					return true;
			 }
		},

		doKeyUpAction: function(key) {
			switch(key) {
				case 38: // Up
				case 40: // Down
				break;

				case 13: // Enter
					this.goToResult();
					return false;
				break;

				case 27: // Escape
					$(this).blur();
					this.closeResultsTable();
				break;

				default: // Other keys
					var query = this.searchField.val();
					if(!query) {
						return false;
					}
					var results = QuickSearch.getResults(query);
					this.displayResultsTable(query, results);
				break;
			}
		},

		// Get results corresponding to search query
		getResults: function(query) {
			var results = {};
			results.matches = new Array();
			for(var entry in this.rawList) {
				if(!entry.startsWith(query, true)) {
					continue;
				}
				var cat = new Object();
				cat.name = entry;
				cat.entries = this.rawList[entry];
				results.matches[results.matches.length] = cat;

				if(entry == query) {
					cat.rank = 3;
				} else if(entry.toUpperCase() == query.toUpperCase()) {
					cat.rank = 2;
				} else {
					cat.rank = 1 + query.dice(entry);
				}
			}
			results.matches.sort(this.rankSorter);
			results.partials = new Array();
			if(results.matches.length == 0) {
				for(var entry in this.rawList) {
					var cat = new Object();
					cat.name = entry;
					cat.entries = this.rawList[entry];
					cat.rank = query.dice(entry);
					if(cat.rank > 0) {
						results.partials[results.partials.length] = cat;
					}
				}
				results.partials.sort(this.rankSorter);
			}
			return results;
		},

		// Sort an array of results by rank
		rankSorter: function(a, b){
			if(a.rank < b.rank) {
				return 1;
			} else if(a.rank > b.rank) {
				return -1;
			}
			return 0;
		},

		// Display results in a popup table
		displayResultsTable: function(query, results) {
			// Clear results table
			if(this.currentTable) this.currentTable.remove();

			// Build results table
			this.currentIndex = -1;
			this.currentTable = $(document.createElement("table"));
			this.currentTable.attr("id", "nitdoc-qs-table");
			this.currentTable.css("position", "absolute");
			this.currentTable.width(this.searchField.outerWidth());

			var maxSize = 10;
			var count = 0;
			var resultSet;
			if(results.matches.length == 0) {
				resultSet = results.partials
			} else {
				resultSet = results.matches
			}
			for(var i in resultSet) {
				var cat = resultSet[i];
				var result = cat.entries[0];

				this.addResultRow(count, cat.name, result.txt, result.url, "nitdoc-qs-cat")
				if(count >= maxSize) {
					this.currentTable.find("tbody").children().last().hide();
				}
				count++;

				for(var j = 1; j < cat.entries.length; j++) {
					var result = cat.entries[j];
					this.addResultRow(count, cat.name, result.txt, result.url, "nitdoc-qs-sub")
					if(count >= maxSize) {
						this.currentTable.find("tr.nitdoc-qs-row").last().hide();
					}
					count++;
				}
			}
			if(count >= maxSize) {
				this.currentTable.prepend(
					$(document.createElement("tr"))
					.addClass("nitdoc-qs-overflow-up")
					.addClass("nitdoc-qs-overflow-inactive")
					.append(
						$(document.createElement("td"))
						.attr("colspan", 2)
						.html("&#x25B2;")
					)
					.click( function(e) {
						e.stopPropagation();
						QuickSearch.selectPrevResult();
					})
				);
				this.currentTable.append(
					$(document.createElement("tr"))
					.addClass("nitdoc-qs-overflow-down")
					.addClass(count >= maxSize ? "nitdoc-qs-overflow-active" : "nitdoc-qs-overflow-inactive")
					.append(
						$(document.createElement("td"))
						.attr("colspan", 2)
						.html("&#x25BC;")
					)
					.click( function(e) {
						e.stopPropagation();
						console.log("nest");
						QuickSearch.selectNextResult();
					})
				);
			}
			if(results.matches.length == 0) {
				this.currentTable.prepend(
					$("<tr class='nitdoc-qs-noresult'>")
					.append(
						$("<td colspan='2'>")
						.html("Sorry, there is no match, best results are:")
					)
				);
			}

			// Initialize table
			$("body").append(this.currentTable);
			this.resizeResultsTable();
			if(this.currentTable.find("tr").length > 0) {
				this.setIndex(0);
			}
		},

		// adds a result row to the current result table
		addResultRow: function(index, name, txt, url, cls) {
			this.currentTable.append(
				$(document.createElement("tr"))
				.addClass("nitdoc-qs-row")
				.data("searchDetails", {name: name, url: url})
				.data("index", index)
				.append(
					$(document.createElement("td")).html(name)
					.addClass(cls)
				)
				.append(
					$(document.createElement("td"))
						.addClass("nitdoc-qs-info")
						.html(txt + "&nbsp;&raquo;")
				)
				.mouseover( function() {
					QuickSearch.setIndex($(this).data("index"));
				})
				.mouseout( function() {
					$(this).removeClass("nitdoc-qs-active");
				 })
				.click( function() {
					window.location = $(this).data("searchDetails")["url"];
				})
			);
		},

		// adapts result table to content
		resizeResultsTable: function() {
			this.currentTable.offset({
				left: this.searchField.offset().left + (this.searchField.outerWidth() - this.currentTable.outerWidth()),
				top: this.searchField.offset().top + this.searchField.outerHeight()
			});
		},

		// select row at index
		setIndex: function(index) {
			$(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]).removeClass("nitdoc-qs-active");
			this.currentIndex = index;
			var currentRow = $(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]);
			currentRow.addClass("nitdoc-qs-active");
			//searchField.val(currentRow.data("searchDetails").name);
		},

		hasPrev: function(index) {
			return index - 1 >= 0;
		},

		hasNext: function(index) {
			return index + 1 < this.currentTable.find("tr.nitdoc-qs-row").length;
		},

		selectPrevResult: function() {
			if(this.hasPrev(this.currentIndex)) {
				this.setIndex(this.currentIndex - 1);
				if(!$(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]).is(":visible")) {
					this.currentTable.find("tr.nitdoc-qs-row:visible").last().hide();
					this.currentTable.find("tr.nitdoc-qs-overflow-down").addClass("nitdoc-qs-overflow-active");
					$(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]).show();
					if(!this.hasPrev(this.currentIndex)) {
						this.currentTable.find("tr.nitdoc-qs-overflow-up").removeClass("nitdoc-qs-overflow-active");
					}
					this.resizeResultsTable();
				}
			}
		},

		selectNextResult: function() {
			if(this.hasNext(this.currentIndex)) {
				this.setIndex(this.currentIndex + 1);
				if(!$(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]).is(":visible")) {
					this.currentTable.find("tr.nitdoc-qs-row:visible").first().hide();
					this.currentTable.find("tr.nitdoc-qs-overflow-up").addClass("nitdoc-qs-overflow-active");
					$(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]).show();
					if(!this.hasNext(this.currentIndex)) {
						this.currentTable.find("tr.nitdoc-qs-overflow-down").removeClass("nitdoc-qs-overflow-active");
					}
					this.resizeResultsTable();
				}
			}
		},

		// Load selected search result page
		goToResult: function() {
			if(this.currentIndex > -1) {
				window.location = $(this.currentTable.find("tr.nitdoc-qs-row")[this.currentIndex]).data("searchDetails").url;
				return;
			}

			if(this.searchField.val().length == 0) { return; }

			window.location = "search.html#q=" + this.searchField.val();
			if(window.location.href.indexOf("search.html") > -1) {
				location.reload();
			}
		},

		// Close the results table
		closeResultsTable: function(target) {
			if(target != this.searchField && target != this.currentTable) {
				if(this.currentTable != null) {
					this.currentTable.remove();
					this.currentTable = null;
				}
			}
		}
	};

	QuickSearch.enableQuickSearch("nav.main ul");
});
