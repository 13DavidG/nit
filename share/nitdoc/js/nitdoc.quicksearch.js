/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Nitdoc QuickSearch widget */

$.widget("nitdoc.quicksearch", {

	options: {
		list: {}, // List of raw results generated by nitdoc tool
		fieldAttrs: {
			autocomplete: "off",
		},
		maxSize: 10
	},

	_create: function() {
		// set widget options
		this.element.attr(this.options.fieldAttrs);
		// event dispatch
		this._on(this.element, {
			"keydown": this._doKeyDown,
			"keyup": this._doKeyUp,
			"input": this._doInput
		});
		// add result table element once
		this._popup = $("<div/>")
			.attr("id", "nitdoc-qs-popup")
			.css("position", "absolute")
			.css("z-index", 10000)
			.hide();
		$("body").append(this._popup);
		// make table disappear when a click occurs outside
		$(document).click($.proxy(this.close, this));
		this._autosizeTable();
	},

	/* events */

	_doKeyDown: function(event) {
		switch(event.keyCode) {
			case 38: // Up
				this._selectPrev();
				return false;
			case 40: // Down
				this._selectNext();
				return false;
			default:
				return true;
		 }
	},

	_doKeyUp: function(event) {
		switch(event.keyCode) {
			case 38: // Up
			case 40: // Down
				break;
			case 13: // Enter
				this._loadResult();
				return false;
			case 27: // Escape
				this.element.blur();
				this.close();
				return true;
			default: // Other keys
				return true;
		}
	},

	_doInput: function(event) {
		Utils.delayEvent($.proxy(this.search, this));
	},

	/* Result lookup */

	_getResults: function(query) {
		var results = [];

		// Prefix matches
		var prefix_matches = [];
		for(var entry in this.options.list) {
			if(!entry.startsWith(query, true)) {
				continue;
			}
			var cat = {
				name: entry,
				entries: this.options.list[entry]
			};
			prefix_matches.push(cat);

			if(entry == query) {
				cat.rank = 10;
			} else if(entry.toUpperCase() == query.toUpperCase()) {
				cat.rank = 5;
			} else if(entry[0] == query[0]) {
				cat.rank = 1.1 + query.dice(entry);
			} else {
				cat.rank = 1 + query.dice(entry);
			}
		}
		if(prefix_matches.length > 0) {
			prefix_matches.sort(this._rankSorter);
			for(var i in prefix_matches) {
				var cat = prefix_matches[i];
				for(var j in cat.entries) {
					var entry = cat.entries[j];
					entry.name = cat.name;
					results.push(entry);
				}
			}
			return results;
		}

		// Partial matches
		var partial_matches = [];
		for(var entry in this.options.list) {
			var cat = {
				name: entry,
				entries: this.options.list[entry]
			}
			cat.rank = query.dice(entry);
			if(cat.rank > 0) {
				partial_matches.push(cat);
			}
		}
		if(partial_matches.length > 0) {
			partial_matches.sort(this._rankSorter);
			for(var i in partial_matches) {
				var cat = partial_matches[i];
				for(var j in cat.entries) {
					var entry = cat.entries[j];
					entry.name = cat.name;
					results.push(entry);
				}
			}
		}

		return results;
	},

	_rankSorter: function(a, b){
		if(a.rank < b.rank) {
			return 1;
		} else if(a.rank > b.rank) {
			return -1;
		}
		return 0;
	},

	/* Results table */

	search: function() {
		var query = this.element.val();
		if(query) {
			var results = this._getResults(query);
			this.open(query, results);
		}
	},

	open: function(query, results) {
		this._popup.empty();
		this._cards = [];
		this._index = -1;

		if(results.length == 0) {
			this.addNoResultCard();
		}

		if(results.length >= this.options.maxSize) {
			this.addOverflowUp(false);
		}

		for(var i in results) {
			var result = results[i];
			this.addCard(result.name, result.txt, result.url, this.options.rowCatClass)
		}

		if(results.length >= this.options.maxSize) {
			this.addOverflowDown(true);
		}

		if(results.length > 0) {
			this._setIndex(0);
		}

		this._popup.show();
		this._autosizeTable();
	},

	close: function(target) {
		if(target != this.element && target != this._popup) {
			this._popup.hide();
		}
	},

	addCard: function(name, txt, url, cls) {
		var card = $("<div/>")
			.addClass("qs-card")
			.addClass("qs-result")
			.data("searchDetails", {name: name, url: url})
			.data("index", this._cards.length)
			.append(
				$("<h1/>")
				.html(name)
				.addClass(cls)
			)
			.append(
				$("<span/>")
				.html(txt)
				.addClass("qs-info")
			)
			.mouseover($.proxy(this._mouseOverRow, this))
			.click($.proxy(this._clickRow, this))
		this._cards.push(card);
		if(this._cards.length >= this.options.maxSize) {
			card.hide();
		}
		this._popup.append(card);
	},

	addOverflowUp: function(active) {
		this._popup.append(
			$("<div/>")
			.addClass("qs-overflow")
			.addClass("qs-overflow-up")
			.addClass(active ? "qs-overflow-active": "")
			.html("&#x25B2;")
			.click($.proxy(this._clickPrev, this))
		);
	},

	addOverflowDown: function(active) {
		this._popup.append(
			$("<div/>")
			.addClass("qs-overflow")
			.addClass("qs-overflow-down")
			.addClass(active ? "qs-overflow-active": "")
			.html("&#x25BC;")
			.click($.proxy(this._clickNext, this))
		);
	},

	addNoResultCard: function() {
		var card = $("<div/>")
			.addClass("qs-card qs-noresult")
			.html("Sorry, there is no match...");
		this._popup.append(card);
	},

	_autosizeTable: function() {
		this._popup.position({
			my: "left top",
			at: "left bottom",
			of: this.element
		});
		this._popup
			.css("min-width", this.element.outerWidth())
			.css("max-width", this.element.outerWidth());
	},

	_hasIndex: function(index) {
		return index >= 0 && index < this._cards.length;
	},

	_hasPrev: function(index) {
		return index - 1 >= 0;
	},

	_hasNext: function(index) {
		return index + 1 < this._cards.length;
	},

	_setIndex: function(index) {
		if(this._hasIndex(this._index)) {
			this._cards[this._index].removeClass("qs-active");
		}
		this._index = index;
		if(this._hasIndex(this._index)) {
			this._cards[this._index].addClass("qs-active");
		}
	},

	_selectPrev: function() {
		if(this._hasPrev(this._index)) {
			this._setIndex(this._index - 1);
			if(!this._cards[this._index].is(":visible")) {
				this._popup.find(".qs-result:visible").last().hide();
				this._popup.find(".qs-overflow-down").addClass("qs-overflow-active");
				this._cards[this._index].show();
				if(!this._hasPrev(this._index)) {
					this._popup.find(".qs-overflow-up").removeClass("qs-overflow-active");
				}
			}
		} else {
		}
	},

	_selectNext: function() {
		if(this._hasNext(this._index)) {
			this._setIndex(this._index + 1);
			if(!this._cards[this._index].is(":visible")) {
				this._popup.find(".qs-result:visible").first().hide();
				this._popup.find(".qs-overflow-up").addClass("qs-overflow-active");
				this._cards[this._index].show();
				if(!this._hasNext(this._index)) {
					this._popup.find(".qs-overflow-down").removeClass("qs-overflow-active");
				}
			}
		}
	},

	// Load selected search result page
	_loadResult: function() {
		if(this._index > -1) {
			window.location = this._cards[this._index].data("searchDetails").url;
			return;
		}
		if(this.element.val().length == 0) { return; }

		window.location = this.options.gotoPage + "#q=" + this.element.val();
		if(window.location.href.indexOf(this.options.gotoPage) > -1) {
			location.reload();
		}
	},

	/* table events */

	_clickNext: function(event) {
		event.stopPropagation();
		this._selectNext();
	},

	_clickPrev: function(event) {
		event.stopPropagation();
		this._selectPrev();
	},

	_clickRow: function(event) {
		window.location = $(event.currentTarget).data("searchDetails")["url"];
	},

	_mouseOverRow: function(event) {
		this._setIndex($(event.currentTarget).data("index"));
	}
});

var searchField = $("<input/>")
.addClass("form-control search-input")
.attr({
	id: "nitdoc-qs-field",
	type: "text",
	placeholder: "Search..."
})

$("#search-placeholder").append(
	$("<form>")
	.addClass("navbar-form navbar-right")
	.on("submit", function() { return false; })
	.css("margin-bottom", 0)
	.css("margin-top", 0)
	.append(
		$("<div>")
		.addClass("form-group has-icon")
		.append(searchField)
		.append(
			$("<span>")
			.addClass("glyphicon glyphicon-search form-control-icon text-muted")
		)
	)
);

searchField.quicksearch({
	list: this.nitdocQuickSearchRawList
});
