# Parser.
# This file was generated by SableCC (http://www.sablecc.org/).
module parser is no_warning("missing-doc", "unread-variable")

intrude import parser_prod
intrude import parser_work
private import tables

redef class Parser
	redef fun build_reduce_table
	do
		_reduce_table = new Array[ReduceAction].with_items(
			new ReduceAction0(0),
			new ReduceAction1(0),
			new ReduceAction2(0),
			new ReduceAction3(0),
			new ReduceAction4(0),
			new ReduceAction5(0),
			new ReduceAction6(0),
			new ReduceAction7(0),
			new ReduceAction8(0),
			new ReduceAction9(0),
			new ReduceAction10(0),
			new ReduceAction11(0),
			new ReduceAction12(0),
			new ReduceAction13(0),
			new ReduceAction14(0),
			new ReduceAction15(0),
			new ReduceAction16(1),
			new ReduceAction17(2),
			new ReduceAction18(2),
			new ReduceAction19(3),
			new ReduceAction20(3),
			new ReduceAction21(4),
			new ReduceAction22(4),
			new ReduceAction23(4),
			new ReduceAction24(5),
			new ReduceAction24(5),
			new ReduceAction26(6),
			new ReduceAction27(6),
			new ReduceAction22(7),
			new ReduceAction29(7),
			new ReduceAction30(8),
			new ReduceAction31(8),
			new ReduceAction32(8),
			new ReduceAction33(8),
			new ReduceAction34(8),
			new ReduceAction35(9),
			new ReduceAction36(9),
			new ReduceAction37(9),
			new ReduceAction38(10),
			new ReduceAction39(11),
			new ReduceAction40(11),
			new ReduceAction41(12),
			new ReduceAction42(13),
			new ReduceAction43(13),
			new ReduceAction44(13),
			new ReduceAction45(14),
			new ReduceAction46(15),
			new ReduceAction47(15),
			new ReduceAction48(15),
			new ReduceAction49(15),
			new ReduceAction50(15),
			new ReduceAction51(15),
			new ReduceAction52(15),
			new ReduceAction53(15),
			new ReduceAction54(15),
			new ReduceAction55(15),
			new ReduceAction56(15),
			new ReduceAction57(15),
			new ReduceAction58(15),
			new ReduceAction59(15),
			new ReduceAction60(15),
			new ReduceAction61(15),
			new ReduceAction62(15),
			new ReduceAction63(15),
			new ReduceAction64(15),
			new ReduceAction65(15),
			new ReduceAction66(15),
			new ReduceAction67(15),
			new ReduceAction68(15),
			new ReduceAction69(15),
			new ReduceAction70(15),
			new ReduceAction71(15),
			new ReduceAction72(15),
			new ReduceAction72(15),
			new ReduceAction74(16),
			new ReduceAction75(16),
			new ReduceAction22(16),
			new ReduceAction74(17),
			new ReduceAction78(17),
			new ReduceAction79(18),
			new ReduceAction80(18),
			new ReduceAction81(18),
			new ReduceAction82(18),
			new ReduceAction83(18),
			new ReduceAction84(19),
			new ReduceAction85(19),
			new ReduceAction86(19),
			new ReduceAction87(19),
			new ReduceAction88(19),
			new ReduceAction89(19),
			new ReduceAction90(19),
			new ReduceAction91(19),
			new ReduceAction92(19),
			new ReduceAction93(19),
			new ReduceAction94(19),
			new ReduceAction95(19),
			new ReduceAction96(19),
			new ReduceAction97(19),
			new ReduceAction98(19),
			new ReduceAction99(19),
			new ReduceAction100(19),
			new ReduceAction101(19),
			new ReduceAction102(19),
			new ReduceAction103(20),
			new ReduceAction104(20),
			new ReduceAction105(20),
			new ReduceAction106(20),
			new ReduceAction107(21),
			new ReduceAction108(21),
			new ReduceAction37(21),
			new ReduceAction110(22),
			new ReduceAction111(23),
			new ReduceAction112(23),
			new ReduceAction113(23),
			new ReduceAction114(23),
			new ReduceAction115(23),
			new ReduceAction116(24),
			new ReduceAction117(24),
			new ReduceAction22(24),
			new ReduceAction119(25),
			new ReduceAction120(26),
			new ReduceAction120(26),
			new ReduceAction122(26),
			new ReduceAction123(27),
			new ReduceAction124(27),
			new ReduceAction125(27),
			new ReduceAction126(28),
			new ReduceAction127(28),
			new ReduceAction128(28),
			new ReduceAction129(28),
			new ReduceAction130(28),
			new ReduceAction131(28),
			new ReduceAction22(29),
			new ReduceAction133(29),
			new ReduceAction134(30),
			new ReduceAction135(31),
			new ReduceAction136(31),
			new ReduceAction137(32),
			new ReduceAction22(32),
			new ReduceAction139(33),
			new ReduceAction140(34),
			new ReduceAction141(34),
			new ReduceAction142(34),
			new ReduceAction143(34),
			new ReduceAction144(35),
			new ReduceAction145(35),
			new ReduceAction146(36),
			new ReduceAction146(37),
			new ReduceAction146(38),
			new ReduceAction22(38),
			new ReduceAction150(39),
			new ReduceAction151(39),
			new ReduceAction152(39),
			new ReduceAction153(39),
			new ReduceAction154(40),
			new ReduceAction155(40),
			new ReduceAction156(41),
			new ReduceAction157(41),
			new ReduceAction158(42),
			new ReduceAction159(42),
			new ReduceAction150(43),
			new ReduceAction153(44),
			new ReduceAction153(44),
			new ReduceAction163(44),
			new ReduceAction164(44),
			new ReduceAction165(44),
			new ReduceAction166(44),
			new ReduceAction167(44),
			new ReduceAction168(44),
			new ReduceAction169(44),
			new ReduceAction153(44),
			new ReduceAction153(44),
			new ReduceAction153(44),
			new ReduceAction153(44),
			new ReduceAction153(44),
			new ReduceAction153(44),
			new ReduceAction176(44),
			new ReduceAction177(44),
			new ReduceAction178(44),
			new ReduceAction177(44),
			new ReduceAction180(44),
			new ReduceAction181(44),
			new ReduceAction182(44),
			new ReduceAction181(44),
			new ReduceAction184(44),
			new ReduceAction185(44),
			new ReduceAction186(44),
			new ReduceAction187(44),
			new ReduceAction188(44),
			new ReduceAction187(44),
			new ReduceAction190(44),
			new ReduceAction191(44),
			new ReduceAction190(44),
			new ReduceAction193(44),
			new ReduceAction194(45),
			new ReduceAction195(45),
			new ReduceAction196(46),
			new ReduceAction197(46),
			new ReduceAction198(46),
			new ReduceAction199(46),
			new ReduceAction200(47),
			new ReduceAction201(47),
			new ReduceAction202(47),
			new ReduceAction203(47),
			new ReduceAction204(47),
			new ReduceAction205(47),
			new ReduceAction206(47),
			new ReduceAction207(47),
			new ReduceAction204(47),
			new ReduceAction205(47),
			new ReduceAction210(47),
			new ReduceAction211(47),
			new ReduceAction212(47),
			new ReduceAction213(47),
			new ReduceAction214(47),
			new ReduceAction215(47),
			new ReduceAction212(47),
			new ReduceAction213(47),
			new ReduceAction218(47),
			new ReduceAction219(47),
			new ReduceAction220(47),
			new ReduceAction221(47),
			new ReduceAction222(47),
			new ReduceAction223(47),
			new ReduceAction224(47),
			new ReduceAction225(47),
			new ReduceAction226(47),
			new ReduceAction223(47),
			new ReduceAction224(47),
			new ReduceAction229(47),
			new ReduceAction230(47),
			new ReduceAction231(47),
			new ReduceAction232(47),
			new ReduceAction233(47),
			new ReduceAction234(47),
			new ReduceAction231(47),
			new ReduceAction232(47),
			new ReduceAction237(47),
			new ReduceAction238(48),
			new ReduceAction239(48),
			new ReduceAction240(49),
			new ReduceAction241(49),
			new ReduceAction242(50),
			new ReduceAction243(50),
			new ReduceAction244(50),
			new ReduceAction245(50),
			new ReduceAction246(50),
			new ReduceAction150(51),
			new ReduceAction152(51),
			new ReduceAction249(52),
			new ReduceAction250(52),
			new ReduceAction251(53),
			new ReduceAction252(53),
			new ReduceAction253(54),
			new ReduceAction254(54),
			new ReduceAction255(55),
			new ReduceAction256(55),
			new ReduceAction257(55),
			new ReduceAction258(55),
			new ReduceAction259(56),
			new ReduceAction153(57),
			new ReduceAction261(57),
			new ReduceAction153(58),
			new ReduceAction263(58),
			new ReduceAction264(58),
			new ReduceAction265(58),
			new ReduceAction266(58),
			new ReduceAction153(59),
			new ReduceAction268(59),
			new ReduceAction153(60),
			new ReduceAction270(60),
			new ReduceAction271(60),
			new ReduceAction272(60),
			new ReduceAction273(60),
			new ReduceAction274(60),
			new ReduceAction275(60),
			new ReduceAction276(60),
			new ReduceAction277(60),
			new ReduceAction278(60),
			new ReduceAction279(60),
			new ReduceAction153(61),
			new ReduceAction281(61),
			new ReduceAction282(61),
			new ReduceAction153(62),
			new ReduceAction284(62),
			new ReduceAction285(62),
			new ReduceAction286(62),
			new ReduceAction153(63),
			new ReduceAction288(63),
			new ReduceAction153(64),
			new ReduceAction290(64),
			new ReduceAction291(64),
			new ReduceAction153(65),
			new ReduceAction293(65),
			new ReduceAction294(65),
			new ReduceAction295(65),
			new ReduceAction296(65),
			new ReduceAction153(66),
			new ReduceAction298(66),
			new ReduceAction299(66),
			new ReduceAction176(66),
			new ReduceAction301(66),
			new ReduceAction177(66),
			new ReduceAction303(66),
			new ReduceAction178(66),
			new ReduceAction305(66),
			new ReduceAction177(66),
			new ReduceAction303(66),
			new ReduceAction180(66),
			new ReduceAction309(66),
			new ReduceAction181(66),
			new ReduceAction311(66),
			new ReduceAction182(66),
			new ReduceAction313(66),
			new ReduceAction181(66),
			new ReduceAction311(66),
			new ReduceAction184(66),
			new ReduceAction317(66),
			new ReduceAction185(66),
			new ReduceAction319(66),
			new ReduceAction186(66),
			new ReduceAction321(66),
			new ReduceAction322(66),
			new ReduceAction323(66),
			new ReduceAction324(66),
			new ReduceAction325(66),
			new ReduceAction326(66),
			new ReduceAction327(66),
			new ReduceAction328(66),
			new ReduceAction325(66),
			new ReduceAction326(66),
			new ReduceAction331(66),
			new ReduceAction332(66),
			new ReduceAction333(66),
			new ReduceAction334(66),
			new ReduceAction335(67),
			new ReduceAction336(67),
			new ReduceAction337(67),
			new ReduceAction338(67),
			new ReduceAction339(67),
			new ReduceAction340(67),
			new ReduceAction341(67),
			new ReduceAction342(67),
			new ReduceAction343(67),
			new ReduceAction153(67),
			new ReduceAction153(67),
			new ReduceAction346(67),
			new ReduceAction347(67),
			new ReduceAction348(67),
			new ReduceAction349(68),
			new ReduceAction349(68),
			new ReduceAction351(69),
			new ReduceAction352(70),
			new ReduceAction353(71),
			new ReduceAction354(71),
			new ReduceAction352(72),
			new ReduceAction356(73),
			new ReduceAction254(73),
			new ReduceAction358(73),
			new ReduceAction359(74),
			new ReduceAction360(74),
			new ReduceAction361(75),
			new ReduceAction362(75),
			new ReduceAction363(76),
			new ReduceAction361(77),
			new ReduceAction362(77),
			new ReduceAction366(78),
			new ReduceAction367(79),
			new ReduceAction368(80),
			new ReduceAction369(80),
			new ReduceAction370(81),
			new ReduceAction22(81),
			new ReduceAction372(82),
			new ReduceAction373(82),
			new ReduceAction374(83),
			new ReduceAction375(84),
			new ReduceAction376(84),
			new ReduceAction372(85),
			new ReduceAction373(85),
			new ReduceAction379(85),
			new ReduceAction153(86),
			new ReduceAction381(87),
			new ReduceAction374(88),
			new ReduceAction383(89),
			new ReduceAction384(89),
			new ReduceAction385(89),
			new ReduceAction386(89),
			new ReduceAction387(89),
			new ReduceAction388(90),
			new ReduceAction389(90),
			new ReduceAction390(90),
			new ReduceAction391(90),
			new ReduceAction392(90),
			new ReduceAction353(91),
			new ReduceAction354(91),
			new ReduceAction352(92),
			new ReduceAction396(93),
			new ReduceAction153(93),
			new ReduceAction153(93),
			new ReduceAction399(93),
			new ReduceAction400(93),
			new ReduceAction401(93),
			new ReduceAction402(94),
			new ReduceAction403(94),
			new ReduceAction404(94),
			new ReduceAction405(95),
			new ReduceAction406(95),
			new ReduceAction405(96),
			new ReduceAction408(96),
			new ReduceAction406(96),
			new ReduceAction410(96),
			new ReduceAction411(97),
			new ReduceAction412(98),
			new ReduceAction362(99),
			new ReduceAction414(99),
			new ReduceAction415(100),
			new ReduceAction416(101),
			new ReduceAction417(101),
			new ReduceAction418(102),
			new ReduceAction419(102),
			new ReduceAction420(103),
			new ReduceAction421(103),
			new ReduceAction422(103),
			new ReduceAction423(103),
			new ReduceAction424(104),
			new ReduceAction425(104),
			new ReduceAction426(104),
			new ReduceAction22(104),
			new ReduceAction428(105),
			new ReduceAction429(105),
			new ReduceAction430(105),
			new ReduceAction429(105),
			new ReduceAction432(106),
			new ReduceAction433(106),
			new ReduceAction434(106),
			new ReduceAction433(106),
			new ReduceAction436(107),
			new ReduceAction437(108),
			new ReduceAction22(109),
			new ReduceAction439(109),
			new ReduceAction440(110),
			new ReduceAction440(110),
			new ReduceAction442(111),
			new ReduceAction443(111),
			new ReduceAction23(111),
			new ReduceAction22(112),
			new ReduceAction446(112),
			new ReduceAction447(113),
			new ReduceAction448(113),
			new ReduceAction440(113),
			new ReduceAction46(114),
			new ReduceAction47(114),
			new ReduceAction48(114),
			new ReduceAction55(114),
			new ReduceAction56(114),
			new ReduceAction74(115),
			new ReduceAction75(115),
			new ReduceAction84(116),
			new ReduceAction85(116),
			new ReduceAction86(116),
			new ReduceAction87(116),
			new ReduceAction88(116),
			new ReduceAction89(116),
			new ReduceAction90(116),
			new ReduceAction91(116),
			new ReduceAction92(116),
			new ReduceAction93(116),
			new ReduceAction94(116),
			new ReduceAction95(116),
			new ReduceAction96(116),
			new ReduceAction97(116),
			new ReduceAction98(116),
			new ReduceAction99(116),
			new ReduceAction100(116),
			new ReduceAction101(116),
			new ReduceAction432(117),
			new ReduceAction433(117),
			new ReduceAction434(117),
			new ReduceAction433(117),
			new ReduceAction140(118),
			new ReduceAction141(118),
			new ReduceAction153(119),
			new ReduceAction261(119),
			new ReduceAction153(120),
			new ReduceAction263(120),
			new ReduceAction264(120),
			new ReduceAction265(120),
			new ReduceAction266(120),
			new ReduceAction153(121),
			new ReduceAction268(121),
			new ReduceAction153(122),
			new ReduceAction270(122),
			new ReduceAction271(122),
			new ReduceAction272(122),
			new ReduceAction273(122),
			new ReduceAction274(122),
			new ReduceAction275(122),
			new ReduceAction276(122),
			new ReduceAction277(122),
			new ReduceAction278(122),
			new ReduceAction279(122),
			new ReduceAction153(123),
			new ReduceAction281(123),
			new ReduceAction282(123),
			new ReduceAction153(124),
			new ReduceAction284(124),
			new ReduceAction285(124),
			new ReduceAction286(124),
			new ReduceAction153(125),
			new ReduceAction288(125),
			new ReduceAction153(126),
			new ReduceAction290(126),
			new ReduceAction291(126),
			new ReduceAction153(127),
			new ReduceAction293(127),
			new ReduceAction294(127),
			new ReduceAction295(127),
			new ReduceAction296(127),
			new ReduceAction153(128),
			new ReduceAction298(128),
			new ReduceAction299(128),
			new ReduceAction176(128),
			new ReduceAction180(128),
			new ReduceAction301(128),
			new ReduceAction309(128),
			new ReduceAction177(128),
			new ReduceAction181(128),
			new ReduceAction303(128),
			new ReduceAction311(128),
			new ReduceAction178(128),
			new ReduceAction182(128),
			new ReduceAction305(128),
			new ReduceAction313(128),
			new ReduceAction177(128),
			new ReduceAction181(128),
			new ReduceAction303(128),
			new ReduceAction311(128),
			new ReduceAction184(128),
			new ReduceAction317(128),
			new ReduceAction185(128),
			new ReduceAction186(128),
			new ReduceAction319(128),
			new ReduceAction321(128),
			new ReduceAction323(128),
			new ReduceAction324(128),
			new ReduceAction325(128),
			new ReduceAction326(128),
			new ReduceAction327(128),
			new ReduceAction328(128),
			new ReduceAction325(128),
			new ReduceAction326(128),
			new ReduceAction331(128),
			new ReduceAction332(128),
			new ReduceAction333(128),
			new ReduceAction334(128),
			new ReduceAction335(129),
			new ReduceAction336(129),
			new ReduceAction337(129),
			new ReduceAction338(129),
			new ReduceAction339(129),
			new ReduceAction340(129),
			new ReduceAction341(129),
			new ReduceAction342(129),
			new ReduceAction343(129),
			new ReduceAction153(129),
			new ReduceAction153(129),
			new ReduceAction140(130),
			new ReduceAction141(130),
			new ReduceAction142(130),
			new ReduceAction143(130),
			new ReduceAction153(131),
			new ReduceAction153(131),
			new ReduceAction163(131),
			new ReduceAction164(131),
			new ReduceAction165(131),
			new ReduceAction166(131),
			new ReduceAction167(131),
			new ReduceAction168(131),
			new ReduceAction169(131),
			new ReduceAction153(131),
			new ReduceAction153(131),
			new ReduceAction153(131),
			new ReduceAction153(131),
			new ReduceAction153(131),
			new ReduceAction153(131),
			new ReduceAction176(131),
			new ReduceAction177(131),
			new ReduceAction178(131),
			new ReduceAction177(131),
			new ReduceAction180(131),
			new ReduceAction181(131),
			new ReduceAction182(131),
			new ReduceAction181(131),
			new ReduceAction184(131),
			new ReduceAction185(131),
			new ReduceAction186(131),
			new ReduceAction187(131),
			new ReduceAction188(131),
			new ReduceAction187(131),
			new ReduceAction190(131),
			new ReduceAction191(131),
			new ReduceAction190(131),
			new ReduceAction193(131),
			new ReduceAction200(132),
			new ReduceAction201(132),
			new ReduceAction202(132),
			new ReduceAction203(132),
			new ReduceAction204(132),
			new ReduceAction205(132),
			new ReduceAction206(132),
			new ReduceAction207(132),
			new ReduceAction204(132),
			new ReduceAction205(132),
			new ReduceAction210(132),
			new ReduceAction211(132),
			new ReduceAction212(132),
			new ReduceAction213(132),
			new ReduceAction214(132),
			new ReduceAction215(132),
			new ReduceAction212(132),
			new ReduceAction213(132),
			new ReduceAction218(132),
			new ReduceAction219(132),
			new ReduceAction220(132),
			new ReduceAction221(132),
			new ReduceAction222(132),
			new ReduceAction223(132),
			new ReduceAction224(132),
			new ReduceAction225(132),
			new ReduceAction226(132),
			new ReduceAction223(132),
			new ReduceAction224(132),
			new ReduceAction229(132),
			new ReduceAction230(132),
			new ReduceAction231(132),
			new ReduceAction232(132),
			new ReduceAction233(132),
			new ReduceAction234(132),
			new ReduceAction231(132),
			new ReduceAction232(132),
			new ReduceAction237(132),
			new ReduceAction153(133),
			new ReduceAction261(133),
			new ReduceAction153(134),
			new ReduceAction263(134),
			new ReduceAction264(134),
			new ReduceAction265(134),
			new ReduceAction266(134),
			new ReduceAction153(135),
			new ReduceAction268(135),
			new ReduceAction153(136),
			new ReduceAction270(136),
			new ReduceAction271(136),
			new ReduceAction272(136),
			new ReduceAction273(136),
			new ReduceAction274(136),
			new ReduceAction275(136),
			new ReduceAction276(136),
			new ReduceAction277(136),
			new ReduceAction278(136),
			new ReduceAction279(136),
			new ReduceAction153(137),
			new ReduceAction281(137),
			new ReduceAction282(137),
			new ReduceAction153(138),
			new ReduceAction284(138),
			new ReduceAction285(138),
			new ReduceAction286(138),
			new ReduceAction153(139),
			new ReduceAction288(139),
			new ReduceAction153(140),
			new ReduceAction290(140),
			new ReduceAction291(140),
			new ReduceAction153(141),
			new ReduceAction293(141),
			new ReduceAction294(141),
			new ReduceAction295(141),
			new ReduceAction296(141),
			new ReduceAction153(142),
			new ReduceAction298(142),
			new ReduceAction299(142),
			new ReduceAction176(142),
			new ReduceAction301(142),
			new ReduceAction177(142),
			new ReduceAction303(142),
			new ReduceAction178(142),
			new ReduceAction305(142),
			new ReduceAction177(142),
			new ReduceAction303(142),
			new ReduceAction180(142),
			new ReduceAction309(142),
			new ReduceAction181(142),
			new ReduceAction311(142),
			new ReduceAction182(142),
			new ReduceAction313(142),
			new ReduceAction181(142),
			new ReduceAction311(142),
			new ReduceAction184(142),
			new ReduceAction317(142),
			new ReduceAction185(142),
			new ReduceAction319(142),
			new ReduceAction186(142),
			new ReduceAction321(142),
			new ReduceAction322(142),
			new ReduceAction323(142),
			new ReduceAction324(142),
			new ReduceAction325(142),
			new ReduceAction326(142),
			new ReduceAction327(142),
			new ReduceAction328(142),
			new ReduceAction325(142),
			new ReduceAction326(142),
			new ReduceAction331(142),
			new ReduceAction332(142),
			new ReduceAction333(142),
			new ReduceAction334(142),
			new ReduceAction335(143),
			new ReduceAction336(143),
			new ReduceAction337(143),
			new ReduceAction338(143),
			new ReduceAction339(143),
			new ReduceAction340(143),
			new ReduceAction341(143),
			new ReduceAction342(143),
			new ReduceAction343(143),
			new ReduceAction153(143),
			new ReduceAction368(144),
			new ReduceAction369(144),
			new ReduceAction370(145),
			new ReduceAction22(145),
			new ReduceAction372(146),
			new ReduceAction372(147),
			new ReduceAction353(148),
			new ReduceAction354(148),
			new ReduceAction396(149),
			new ReduceAction153(149),
			new ReduceAction153(149),
			new ReduceAction399(149),
			new ReduceAction400(149),
			new ReduceAction140(150),
			new ReduceAction141(150),
			new ReduceAction153(151),
			new ReduceAction261(151),
			new ReduceAction153(152),
			new ReduceAction263(152),
			new ReduceAction264(152),
			new ReduceAction265(152),
			new ReduceAction266(152),
			new ReduceAction153(153),
			new ReduceAction268(153),
			new ReduceAction153(154),
			new ReduceAction270(154),
			new ReduceAction271(154),
			new ReduceAction272(154),
			new ReduceAction273(154),
			new ReduceAction274(154),
			new ReduceAction275(154),
			new ReduceAction276(154),
			new ReduceAction277(154),
			new ReduceAction278(154),
			new ReduceAction279(154),
			new ReduceAction153(155),
			new ReduceAction281(155),
			new ReduceAction282(155),
			new ReduceAction153(156),
			new ReduceAction284(156),
			new ReduceAction285(156),
			new ReduceAction286(156),
			new ReduceAction153(157),
			new ReduceAction288(157),
			new ReduceAction153(158),
			new ReduceAction290(158),
			new ReduceAction291(158),
			new ReduceAction153(159),
			new ReduceAction293(159),
			new ReduceAction294(159),
			new ReduceAction776(159),
			new ReduceAction153(160),
			new ReduceAction778(160),
			new ReduceAction779(160),
			new ReduceAction780(160),
			new ReduceAction781(160),
			new ReduceAction782(160),
			new ReduceAction176(160),
			new ReduceAction301(160),
			new ReduceAction781(160),
			new ReduceAction782(160),
			new ReduceAction184(160),
			new ReduceAction317(160),
			new ReduceAction789(160),
			new ReduceAction790(160),
			new ReduceAction323(160),
			new ReduceAction324(160),
			new ReduceAction325(160),
			new ReduceAction326(160),
			new ReduceAction327(160),
			new ReduceAction328(160),
			new ReduceAction325(160),
			new ReduceAction326(160),
			new ReduceAction331(160),
			new ReduceAction332(160),
			new ReduceAction333(160),
			new ReduceAction334(160),
			new ReduceAction335(161),
			new ReduceAction336(161),
			new ReduceAction337(161),
			new ReduceAction338(161),
			new ReduceAction339(161),
			new ReduceAction340(161),
			new ReduceAction341(161),
			new ReduceAction342(161),
			new ReduceAction343(161),
			new ReduceAction153(161),
			new ReduceAction813(162),
			new ReduceAction814(162),
			new ReduceAction150(163),
			new ReduceAction151(163),
			new ReduceAction152(163),
			new ReduceAction153(163),
			new ReduceAction153(164),
			new ReduceAction153(164),
			new ReduceAction163(164),
			new ReduceAction164(164),
			new ReduceAction165(164),
			new ReduceAction166(164),
			new ReduceAction167(164),
			new ReduceAction168(164),
			new ReduceAction169(164),
			new ReduceAction153(164),
			new ReduceAction153(164),
			new ReduceAction153(164),
			new ReduceAction153(164),
			new ReduceAction153(164),
			new ReduceAction153(164),
			new ReduceAction176(164),
			new ReduceAction177(164),
			new ReduceAction178(164),
			new ReduceAction177(164),
			new ReduceAction180(164),
			new ReduceAction181(164),
			new ReduceAction182(164),
			new ReduceAction181(164),
			new ReduceAction184(164),
			new ReduceAction185(164),
			new ReduceAction186(164),
			new ReduceAction187(164),
			new ReduceAction188(164),
			new ReduceAction187(164),
			new ReduceAction190(164),
			new ReduceAction191(164),
			new ReduceAction190(164),
			new ReduceAction193(164),
			new ReduceAction240(165),
			new ReduceAction241(165),
			new ReduceAction242(166),
			new ReduceAction249(167),
			new ReduceAction250(167),
			new ReduceAction251(168),
			new ReduceAction252(168),
			new ReduceAction253(169),
			new ReduceAction254(169),
			new ReduceAction255(170),
			new ReduceAction256(170),
			new ReduceAction153(171),
			new ReduceAction153(171),
			new ReduceAction163(171),
			new ReduceAction164(171),
			new ReduceAction165(171),
			new ReduceAction166(171),
			new ReduceAction167(171),
			new ReduceAction168(171),
			new ReduceAction169(171),
			new ReduceAction153(171),
			new ReduceAction153(171),
			new ReduceAction153(171),
			new ReduceAction153(171),
			new ReduceAction153(171),
			new ReduceAction153(171),
			new ReduceAction176(171),
			new ReduceAction177(171),
			new ReduceAction178(171),
			new ReduceAction177(171),
			new ReduceAction180(171),
			new ReduceAction181(171),
			new ReduceAction182(171),
			new ReduceAction181(171),
			new ReduceAction184(171),
			new ReduceAction185(171),
			new ReduceAction186(171),
			new ReduceAction187(171),
			new ReduceAction188(171),
			new ReduceAction187(171),
			new ReduceAction190(171),
			new ReduceAction191(171),
			new ReduceAction190(171),
			new ReduceAction193(171),
			new ReduceAction150(172),
			new ReduceAction151(172),
			new ReduceAction152(172),
			new ReduceAction150(173),
			new ReduceAction151(173),
			new ReduceAction152(173),
			new ReduceAction153(174),
			new ReduceAction153(174),
			new ReduceAction163(174),
			new ReduceAction164(174),
			new ReduceAction165(174),
			new ReduceAction166(174),
			new ReduceAction167(174),
			new ReduceAction168(174),
			new ReduceAction169(174),
			new ReduceAction153(174),
			new ReduceAction153(174),
			new ReduceAction153(174),
			new ReduceAction153(174),
			new ReduceAction153(174),
			new ReduceAction193(174),
			new ReduceAction153(175),
			new ReduceAction153(175),
			new ReduceAction163(175),
			new ReduceAction164(175),
			new ReduceAction165(175),
			new ReduceAction166(175),
			new ReduceAction167(175),
			new ReduceAction168(175),
			new ReduceAction169(175),
			new ReduceAction153(175),
			new ReduceAction153(175),
			new ReduceAction153(175),
			new ReduceAction153(175),
			new ReduceAction153(175),
			new ReduceAction193(175),
			new ReduceAction153(176),
			new ReduceAction153(176),
			new ReduceAction163(176),
			new ReduceAction164(176),
			new ReduceAction165(176),
			new ReduceAction166(176),
			new ReduceAction167(176),
			new ReduceAction168(176),
			new ReduceAction169(176),
			new ReduceAction153(176),
			new ReduceAction153(176),
			new ReduceAction153(176),
			new ReduceAction153(176),
			new ReduceAction153(176),
			new ReduceAction193(176),
			new ReduceAction153(177),
			new ReduceAction153(177),
			new ReduceAction163(177),
			new ReduceAction164(177),
			new ReduceAction165(177),
			new ReduceAction166(177),
			new ReduceAction167(177),
			new ReduceAction168(177),
			new ReduceAction169(177),
			new ReduceAction153(177),
			new ReduceAction153(177),
			new ReduceAction153(177),
			new ReduceAction153(177),
			new ReduceAction153(177),
			new ReduceAction193(177),
			new ReduceAction402(178),
			new ReduceAction404(178),
			new ReduceAction964(179),
			new ReduceAction965(179),
			new ReduceAction966(180),
			new ReduceAction967(180),
			new ReduceAction968(181),
			new ReduceAction969(181),
			new ReduceAction970(182),
			new ReduceAction971(182),
			new ReduceAction43(183),
			new ReduceAction973(183),
			new ReduceAction974(184),
			new ReduceAction975(184),
			new ReduceAction976(185),
			new ReduceAction977(185),
			new ReduceAction144(186),
			new ReduceAction979(186),
			new ReduceAction353(187),
			new ReduceAction981(187),
			new ReduceAction353(188),
			new ReduceAction981(188),
			new ReduceAction353(189),
			new ReduceAction981(189),
			new ReduceAction417(190),
			new ReduceAction987(190),
			new ReduceAction375(191),
			new ReduceAction989(191),
			new ReduceAction375(192),
			new ReduceAction989(192),
			new ReduceAction353(193),
			new ReduceAction981(193),
			new ReduceAction353(194),
			new ReduceAction981(194),
			new ReduceAction418(195),
			new ReduceAction997(195),
			new ReduceAction998(196),
			new ReduceAction999(196),
			new ReduceAction1000(197),
			new ReduceAction1001(197)
		)
	end
end

private class ReduceAction0
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode4 = new Array[Object]
					var listnode6 = new Array[Object]
					var pclassdefnode5 = nodearraylist1
					assert pclassdefnode5 isa nullable AClassdef
					if pclassdefnode5 != null then
						listnode6.add(pclassdefnode5)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode3,
						listnode4,
						listnode6
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction1
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode4 = new Array[Object]
					var listnode6 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var pclassdefnode5 = nodearraylist2
					assert pclassdefnode5 isa nullable AClassdef
					if pclassdefnode5 != null then
						listnode6.add(pclassdefnode5)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode3,
						listnode4,
						listnode6
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction2
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode7 = new Array[Object]
					var listnode3 = nodearraylist1
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var pclassdefnode6 = nodearraylist2
					assert pclassdefnode6 isa nullable AClassdef
					if pclassdefnode6 != null then
						listnode7.add(pclassdefnode6)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode4,
						listnode5,
						listnode7
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction3
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode7 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var pclassdefnode6 = nodearraylist3
					assert pclassdefnode6 isa nullable AClassdef
					if pclassdefnode6 != null then
						listnode7.add(pclassdefnode6)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode4,
						listnode5,
						listnode7
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction4
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode7 = new Array[Object]
					var listnode4 = nodearraylist1
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var pclassdefnode6 = nodearraylist2
					assert pclassdefnode6 isa nullable AClassdef
					if pclassdefnode6 != null then
						listnode7.add(pclassdefnode6)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode3,
						listnode5,
						listnode7
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction5
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode7 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode4 = nodearraylist2
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var pclassdefnode6 = nodearraylist3
					assert pclassdefnode6 isa nullable AClassdef
					if pclassdefnode6 != null then
						listnode7.add(pclassdefnode6)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode3,
						listnode5,
						listnode7
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction6
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode6 = new Array[Object]
					var listnode8 = new Array[Object]
					var listnode3 = nodearraylist1
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var listnode5 = nodearraylist2
					assert listnode5 isa Array[Object]
					listnode6 = concat(listnode6, listnode5)
					var pclassdefnode7 = nodearraylist3
					assert pclassdefnode7 isa nullable AClassdef
					if pclassdefnode7 != null then
						listnode8.add(pclassdefnode7)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode4,
						listnode6,
						listnode8
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction7
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode6 = new Array[Object]
					var listnode8 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var listnode5 = nodearraylist3
					assert listnode5 isa Array[Object]
					listnode6 = concat(listnode6, listnode5)
					var pclassdefnode7 = nodearraylist4
					assert pclassdefnode7 isa nullable AClassdef
					if pclassdefnode7 != null then
						listnode8.add(pclassdefnode7)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode4,
						listnode6,
						listnode8
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction8
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode4 = new Array[Object]
					var listnode7 = new Array[Object]
					var listnode5 = nodearraylist1
					assert listnode5 isa Array[Object]
					var pclassdefnode6 = nodearraylist2
					assert pclassdefnode6 isa nullable AClassdef
					listnode7 = concat(listnode7, listnode5)
					if pclassdefnode6 != null then
						listnode7.add(pclassdefnode6)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode3,
						listnode4,
						listnode7
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction9
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode4 = new Array[Object]
					var listnode7 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode5 = nodearraylist2
					assert listnode5 isa Array[Object]
					var pclassdefnode6 = nodearraylist3
					assert pclassdefnode6 isa nullable AClassdef
					listnode7 = concat(listnode7, listnode5)
					if pclassdefnode6 != null then
						listnode7.add(pclassdefnode6)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode3,
						listnode4,
						listnode7
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction10
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode8 = new Array[Object]
					var listnode3 = nodearraylist1
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var listnode6 = nodearraylist2
					assert listnode6 isa Array[Object]
					var pclassdefnode7 = nodearraylist3
					assert pclassdefnode7 isa nullable AClassdef
					listnode8 = concat(listnode8, listnode6)
					if pclassdefnode7 != null then
						listnode8.add(pclassdefnode7)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode4,
						listnode5,
						listnode8
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction11
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode8 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var listnode6 = nodearraylist3
					assert listnode6 isa Array[Object]
					var pclassdefnode7 = nodearraylist4
					assert pclassdefnode7 isa nullable AClassdef
					listnode8 = concat(listnode8, listnode6)
					if pclassdefnode7 != null then
						listnode8.add(pclassdefnode7)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode4,
						listnode5,
						listnode8
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction12
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode8 = new Array[Object]
					var listnode4 = nodearraylist1
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var listnode6 = nodearraylist2
					assert listnode6 isa Array[Object]
					var pclassdefnode7 = nodearraylist3
					assert pclassdefnode7 isa nullable AClassdef
					listnode8 = concat(listnode8, listnode6)
					if pclassdefnode7 != null then
						listnode8.add(pclassdefnode7)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode3,
						listnode5,
						listnode8
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction13
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode5 = new Array[Object]
					var listnode8 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode4 = nodearraylist2
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var listnode6 = nodearraylist3
					assert listnode6 isa Array[Object]
					var pclassdefnode7 = nodearraylist4
					assert pclassdefnode7 isa nullable AClassdef
					listnode8 = concat(listnode8, listnode6)
					if pclassdefnode7 != null then
						listnode8.add(pclassdefnode7)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode3,
						listnode5,
						listnode8
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction14
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode6 = new Array[Object]
					var listnode9 = new Array[Object]
					var listnode3 = nodearraylist1
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var listnode5 = nodearraylist2
					assert listnode5 isa Array[Object]
					listnode6 = concat(listnode6, listnode5)
					var listnode7 = nodearraylist3
					assert listnode7 isa Array[Object]
					var pclassdefnode8 = nodearraylist4
					assert pclassdefnode8 isa nullable AClassdef
					listnode9 = concat(listnode9, listnode7)
					if pclassdefnode8 != null then
						listnode9.add(pclassdefnode8)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						null,
						listnode4,
						listnode6,
						listnode9
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction15
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode6 = new Array[Object]
					var listnode9 = new Array[Object]
					var pmoduledeclnode2 = nodearraylist1
					assert pmoduledeclnode2 isa nullable AModuledecl
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var listnode5 = nodearraylist3
					assert listnode5 isa Array[Object]
					listnode6 = concat(listnode6, listnode5)
					var listnode7 = nodearraylist4
					assert listnode7 isa Array[Object]
					var pclassdefnode8 = nodearraylist5
					assert pclassdefnode8 isa nullable AClassdef
					listnode9 = concat(listnode9, listnode7)
					if pclassdefnode8 != null then
						listnode9.add(pclassdefnode8)
					end
					var pmodulenode1: nullable AModule = new AModule.init_amodule(
						pmoduledeclnode2,
						listnode4,
						listnode6,
						listnode9
					)
					node_list = pmodulenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction16
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwmodulenode5 = nodearraylist4
					assert tkwmodulenode5 isa nullable TKwmodule
					var pmodulenamenode6 = nodearraylist6
					assert pmodulenamenode6 isa nullable AModuleName
					var pannotationsnode7 = nodearraylist7
					assert pannotationsnode7 isa nullable AAnnotations
					var pmoduledeclnode1: nullable AModuledecl = new AModuledecl.init_amoduledecl(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwmodulenode5,
						pmodulenamenode6,
						pannotationsnode7
					)
					node_list = pmoduledeclnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction17
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pvisibilitynode2 = nodearraylist3
					assert pvisibilitynode2 isa nullable AVisibility
					var tkwimportnode3 = nodearraylist4
					assert tkwimportnode3 isa nullable TKwimport
					var pmodulenamenode4 = nodearraylist6
					assert pmodulenamenode4 isa nullable AModuleName
					var pannotationsnode5 = nodearraylist7
					assert pannotationsnode5 isa nullable AAnnotations
					var pimportnode1: nullable AStdImport = new AStdImport.init_astdimport(
						pvisibilitynode2,
						tkwimportnode3,
						pmodulenamenode4,
						pannotationsnode5
					)
					node_list = pimportnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction18
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pvisibilitynode2 = nodearraylist3
					assert pvisibilitynode2 isa nullable AVisibility
					var tkwimportnode3 = nodearraylist4
					assert tkwimportnode3 isa nullable TKwimport
					var tkwendnode4 = nodearraylist6
					assert tkwendnode4 isa nullable TKwend
					var pimportnode1: nullable ANoImport = new ANoImport.init_anoimport(
						pvisibilitynode2,
						tkwimportnode3,
						tkwendnode4
					)
					node_list = pimportnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction19
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pclassdefnode1 = nodearraylist1
					node_list = pclassdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction20
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var ppropdefnode2 = nodearraylist1
					assert ppropdefnode2 isa nullable APropdef
					if ppropdefnode2 != null then
						listnode3.add(ppropdefnode2)
					end
					var pclassdefnode1: nullable ATopClassdef = new ATopClassdef.init_atopclassdef(
						listnode3
					)
					node_list = pclassdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction21
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var ppropdefnode2 = nodearraylist1
					assert ppropdefnode2 isa nullable APropdef
					if ppropdefnode2 != null then
						listnode3.add(ppropdefnode2)
					end
					var pclassdefnode1: nullable AMainClassdef = new AMainClassdef.init_amainclassdef(
						listnode3
					)
					node_list = pclassdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction22
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					node_list = null
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction23
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					node_list = null
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction24
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var ppropdefnode1: nullable AMainMethPropdef = new AMainMethPropdef.init_amainmethpropdef(
						null,
						pexprnode3
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction26
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var listnode11 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var pclasskindnode5 = nodearraylist4
					assert pclasskindnode5 isa nullable AClasskind
					var tclassidnode6 = nodearraylist6
					assert tclassidnode6 isa nullable TClassid
					var listnode7 = nodearraylist7
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var listnode10 = nodearraylist8
					assert listnode10 isa Array[Object]
					listnode11 = concat(listnode11, listnode10)
					var tkwendnode12 = nodearraylist9
					assert tkwendnode12 isa nullable TKwend
					var pclassdefnode1: nullable AStdClassdef = new AStdClassdef.init_astdclassdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						pclasskindnode5,
						tclassidnode6,
						listnode8,
						null,
						listnode11,
						tkwendnode12
					)
					node_list = pclassdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction27
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var listnode11 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var pclasskindnode5 = nodearraylist4
					assert pclasskindnode5 isa nullable AClasskind
					var tclassidnode6 = nodearraylist6
					assert tclassidnode6 isa nullable TClassid
					var listnode7 = nodearraylist7
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var pexterncodeblocknode9 = nodearraylist8
					assert pexterncodeblocknode9 isa nullable AExternCodeBlock
					var listnode10 = nodearraylist9
					assert listnode10 isa Array[Object]
					listnode11 = concat(listnode11, listnode10)
					var tkwendnode12 = nodearraylist10
					assert tkwendnode12 isa nullable TKwend
					var pclassdefnode1: nullable AStdClassdef = new AStdClassdef.init_astdclassdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						pclasskindnode5,
						tclassidnode6,
						listnode8,
						pexterncodeblocknode9,
						listnode11,
						tkwendnode12
					)
					node_list = pclassdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction29
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwredefnode1 = nodearraylist1
					node_list = tkwredefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction30
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwclassnode2 = nodearraylist1
					assert tkwclassnode2 isa nullable TKwclass
					var pclasskindnode1: nullable AConcreteClasskind = new AConcreteClasskind.init_aconcreteclasskind(
						tkwclassnode2
					)
					node_list = pclasskindnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction31
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwabstractnode2 = nodearraylist1
					assert tkwabstractnode2 isa nullable TKwabstract
					var tkwclassnode3 = nodearraylist2
					assert tkwclassnode3 isa nullable TKwclass
					var pclasskindnode1: nullable AAbstractClasskind = new AAbstractClasskind.init_aabstractclasskind(
						tkwabstractnode2,
						tkwclassnode3
					)
					node_list = pclasskindnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction32
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwinterfacenode2 = nodearraylist1
					assert tkwinterfacenode2 isa nullable TKwinterface
					var pclasskindnode1: nullable AInterfaceClasskind = new AInterfaceClasskind.init_ainterfaceclasskind(
						tkwinterfacenode2
					)
					node_list = pclasskindnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction33
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwenumnode2 = nodearraylist1
					assert tkwenumnode2 isa nullable TKwenum
					var pclasskindnode1: nullable AEnumClasskind = new AEnumClasskind.init_aenumclasskind(
						tkwenumnode2
					)
					node_list = pclasskindnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction34
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwexternnode2 = nodearraylist1
					assert tkwexternnode2 isa nullable TKwextern
					var tkwclassnode3 = nodearraylist2
					assert tkwclassnode3 isa nullable TKwclass
					var pclasskindnode1: nullable AExternClasskind = new AExternClasskind.init_aexternclasskind(
						tkwexternnode2,
						tkwclassnode3
					)
					node_list = pclasskindnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction35
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pformaldefnode1 = nodearraylist3
					if pformaldefnode1 != null then
						listnode2.add(pformaldefnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction36
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pformaldefnode1 = nodearraylist3
					var listnode2 = nodearraylist4
					assert listnode2 isa Array[Object]
					if pformaldefnode1 != null then
						listnode3.add(pformaldefnode1)
					end
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction37
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var listnode1 = new Array[Object]
					node_list = listnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction38
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pformaldefnode1 = nodearraylist3
					node_list = pformaldefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction39
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tclassidnode2 = nodearraylist1
					assert tclassidnode2 isa nullable TClassid
					var ptypenode3 = nodearraylist2
					assert ptypenode3 isa nullable AType
					var pformaldefnode1: nullable AFormaldef = new AFormaldef.init_aformaldef(
						tclassidnode2,
						ptypenode3,
						null
					)
					node_list = pformaldefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction40
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tclassidnode2 = nodearraylist1
					assert tclassidnode2 isa nullable TClassid
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var pannotationsnode4 = nodearraylist2
					assert pannotationsnode4 isa nullable AAnnotations
					var pformaldefnode1: nullable AFormaldef = new AFormaldef.init_aformaldef(
						tclassidnode2,
						ptypenode3,
						pannotationsnode4
					)
					node_list = pformaldefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction41
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwsupernode5 = nodearraylist4
					assert tkwsupernode5 isa nullable TKwsuper
					var ptypenode6 = nodearraylist6
					assert ptypenode6 isa nullable AType
					var pannotationsnode7 = nodearraylist7
					assert pannotationsnode7 isa nullable AAnnotations
					var ppropdefnode1: nullable ASuperPropdef = new ASuperPropdef.init_asuperpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwsupernode5,
						ptypenode6,
						pannotationsnode7
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction42
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					listnode2 = concat(listnode2, listnode1)
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction43
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var ppropdefnode1 = nodearraylist1
					if ppropdefnode1 != null then
						listnode2.add(ppropdefnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction44
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode1 = new Array[Object]
					node_list = listnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction45
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ppropdefnode1 = nodearraylist1
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction46
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwmethnode5 = nodearraylist4
					assert tkwmethnode5 isa nullable TKwmeth
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pexprnode13 = nodearraylist8
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwmethnode5,
						null,
						null,
						pmethidnode8,
						psignaturenode9,
						null,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction47
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwmethnode5 = nodearraylist4
					assert tkwmethnode5 isa nullable TKwmeth
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var pexprnode13 = nodearraylist9
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwmethnode5,
						null,
						null,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction48
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwmethnode5 = nodearraylist4
					assert tkwmethnode5 isa nullable TKwmeth
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwmethnode5,
						null,
						null,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction49
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist6
					assert pannotationsnode10 isa nullable AAnnotations
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						null,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction50
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction51
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pexprnode13 = nodearraylist7
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						null,
						psignaturenode9,
						null,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction52
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pexprnode13 = nodearraylist8
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						pmethidnode8,
						psignaturenode9,
						null,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction53
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist6
					assert pannotationsnode10 isa nullable AAnnotations
					var pexprnode13 = nodearraylist8
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						null,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction54
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var pexprnode13 = nodearraylist9
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction55
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwmethnode5 = nodearraylist4
					assert tkwmethnode5 isa nullable TKwmeth
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pexterncallsnode11 = nodearraylist7
					assert pexterncallsnode11 isa nullable AExternCalls
					var pexterncodeblocknode12 = nodearraylist8
					assert pexterncodeblocknode12 isa nullable AExternCodeBlock
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwmethnode5,
						null,
						null,
						pmethidnode8,
						psignaturenode9,
						null,
						pexterncallsnode11,
						pexterncodeblocknode12,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction56
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwmethnode5 = nodearraylist4
					assert tkwmethnode5 isa nullable TKwmeth
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var pexterncallsnode11 = nodearraylist8
					assert pexterncallsnode11 isa nullable AExternCalls
					var pexterncodeblocknode12 = nodearraylist9
					assert pexterncodeblocknode12 isa nullable AExternCodeBlock
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwmethnode5,
						null,
						null,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						pexterncallsnode11,
						pexterncodeblocknode12,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction57
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwvarnode5 = nodearraylist4
					assert tkwvarnode5 isa nullable TKwvar
					var tidnode6 = nodearraylist5
					assert tidnode6 isa nullable TId
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pannotationsnode9 = nodearraylist7
					assert pannotationsnode9 isa nullable AAnnotations
					var ppropdefnode1: nullable AAttrPropdef = new AAttrPropdef.init_aattrpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwvarnode5,
						tidnode6,
						ptypenode7,
						null,
						pannotationsnode9,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction58
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwvarnode5 = nodearraylist4
					assert tkwvarnode5 isa nullable TKwvar
					var tidnode6 = nodearraylist5
					assert tidnode6 isa nullable TId
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pexprnode8 = nodearraylist9
					assert pexprnode8 isa nullable AExpr
					var pannotationsnode9 = nodearraylist10
					assert pannotationsnode9 isa nullable AAnnotations
					var ppropdefnode1: nullable AAttrPropdef = new AAttrPropdef.init_aattrpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwvarnode5,
						tidnode6,
						ptypenode7,
						pexprnode8,
						pannotationsnode9,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction59
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwvarnode5 = nodearraylist4
					assert tkwvarnode5 isa nullable TKwvar
					var tidnode6 = nodearraylist5
					assert tidnode6 isa nullable TId
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pexprnode10 = nodearraylist8
					assert pexprnode10 isa nullable AExpr
					var ppropdefnode1: nullable AAttrPropdef = new AAttrPropdef.init_aattrpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwvarnode5,
						tidnode6,
						ptypenode7,
						null,
						null,
						pexprnode10
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction60
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwvarnode5 = nodearraylist4
					assert tkwvarnode5 isa nullable TKwvar
					var tidnode6 = nodearraylist5
					assert tidnode6 isa nullable TId
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pannotationsnode9 = nodearraylist7
					assert pannotationsnode9 isa nullable AAnnotations
					var pexprnode10 = nodearraylist9
					assert pexprnode10 isa nullable AExpr
					var ppropdefnode1: nullable AAttrPropdef = new AAttrPropdef.init_aattrpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwvarnode5,
						tidnode6,
						ptypenode7,
						null,
						pannotationsnode9,
						pexprnode10
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction61
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwvarnode5 = nodearraylist4
					assert tkwvarnode5 isa nullable TKwvar
					var tidnode6 = nodearraylist5
					assert tidnode6 isa nullable TId
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pexprnode10 = nodearraylist8
					assert pexprnode10 isa nullable AExpr
					var ppropdefnode1: nullable AAttrPropdef = new AAttrPropdef.init_aattrpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwvarnode5,
						tidnode6,
						ptypenode7,
						null,
						null,
						pexprnode10
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction62
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwvarnode5 = nodearraylist4
					assert tkwvarnode5 isa nullable TKwvar
					var tidnode6 = nodearraylist5
					assert tidnode6 isa nullable TId
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pannotationsnode9 = nodearraylist7
					assert pannotationsnode9 isa nullable AAnnotations
					var pexprnode10 = nodearraylist9
					assert pexprnode10 isa nullable AExpr
					var ppropdefnode1: nullable AAttrPropdef = new AAttrPropdef.init_aattrpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwvarnode5,
						tidnode6,
						ptypenode7,
						null,
						pannotationsnode9,
						pexprnode10
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction63
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwinitnode6 = nodearraylist4
					assert tkwinitnode6 isa nullable TKwinit
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pexprnode13 = nodearraylist7
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						tkwinitnode6,
						null,
						null,
						psignaturenode9,
						null,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction64
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwinitnode6 = nodearraylist4
					assert tkwinitnode6 isa nullable TKwinit
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pexprnode13 = nodearraylist8
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						tkwinitnode6,
						null,
						pmethidnode8,
						psignaturenode9,
						null,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction65
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwinitnode6 = nodearraylist4
					assert tkwinitnode6 isa nullable TKwinit
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist6
					assert pannotationsnode10 isa nullable AAnnotations
					var pexprnode13 = nodearraylist8
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						tkwinitnode6,
						null,
						null,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction66
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwinitnode6 = nodearraylist4
					assert tkwinitnode6 isa nullable TKwinit
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var pexprnode13 = nodearraylist9
					assert pexprnode13 isa nullable AExpr
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						tkwinitnode6,
						null,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						null,
						null,
						pexprnode13
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction67
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwtypenode5 = nodearraylist4
					assert tkwtypenode5 isa nullable TKwtype
					var tclassidnode6 = nodearraylist5
					assert tclassidnode6 isa nullable TClassid
					var ptypenode7 = nodearraylist6
					assert ptypenode7 isa nullable AType
					var pannotationsnode8 = nodearraylist7
					assert pannotationsnode8 isa nullable AAnnotations
					var ppropdefnode1: nullable ATypePropdef = new ATypePropdef.init_atypepropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						tkwtypenode5,
						tclassidnode6,
						ptypenode7,
						pannotationsnode8
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction68
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pexterncallsnode11 = nodearraylist6
					assert pexterncallsnode11 isa nullable AExternCalls
					var pexterncodeblocknode12 = nodearraylist7
					assert pexterncodeblocknode12 isa nullable AExternCodeBlock
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						null,
						psignaturenode9,
						null,
						pexterncallsnode11,
						pexterncodeblocknode12,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction69
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pexterncallsnode11 = nodearraylist7
					assert pexterncallsnode11 isa nullable AExternCalls
					var pexterncodeblocknode12 = nodearraylist8
					assert pexterncodeblocknode12 isa nullable AExternCodeBlock
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						pmethidnode8,
						psignaturenode9,
						null,
						pexterncallsnode11,
						pexterncodeblocknode12,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction70
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var psignaturenode9 = nodearraylist5
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist6
					assert pannotationsnode10 isa nullable AAnnotations
					var pexterncallsnode11 = nodearraylist7
					assert pexterncallsnode11 isa nullable AExternCalls
					var pexterncodeblocknode12 = nodearraylist8
					assert pexterncodeblocknode12 isa nullable AExternCodeBlock
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						null,
						psignaturenode9,
						pannotationsnode10,
						pexterncallsnode11,
						pexterncodeblocknode12,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction71
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var tkwnewnode7 = nodearraylist4
					assert tkwnewnode7 isa nullable TKwnew
					var pmethidnode8 = nodearraylist5
					assert pmethidnode8 isa nullable AMethid
					var psignaturenode9 = nodearraylist6
					assert psignaturenode9 isa nullable ASignature
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var pexterncallsnode11 = nodearraylist8
					assert pexterncallsnode11 isa nullable AExternCalls
					var pexterncodeblocknode12 = nodearraylist9
					assert pexterncodeblocknode12 isa nullable AExternCodeBlock
					var ppropdefnode1: nullable AMethPropdef = new AMethPropdef.init_amethpropdef(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						null,
						null,
						tkwnewnode7,
						pmethidnode8,
						psignaturenode9,
						pannotationsnode10,
						pexterncallsnode11,
						pexterncodeblocknode12,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction72
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var ppropdefnode1 = nodearraylist1
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction74
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pannotationsnode1 = nodearraylist2
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction75
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pannotationsnode1 = nodearraylist3
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction78
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pannotationsnode1 = nodearraylist3
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction79
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var pvisibilitynode1: nullable APublicVisibility = new APublicVisibility.init_apublicvisibility(
						null
					)
					node_list = pvisibilitynode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction80
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwpublicnode2 = nodearraylist1
					assert tkwpublicnode2 isa nullable TKwpublic
					var pvisibilitynode1: nullable APublicVisibility = new APublicVisibility.init_apublicvisibility(
						tkwpublicnode2
					)
					node_list = pvisibilitynode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction81
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwprivatenode2 = nodearraylist1
					assert tkwprivatenode2 isa nullable TKwprivate
					var pvisibilitynode1: nullable APrivateVisibility = new APrivateVisibility.init_aprivatevisibility(
						tkwprivatenode2
					)
					node_list = pvisibilitynode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction82
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwprotectednode2 = nodearraylist1
					assert tkwprotectednode2 isa nullable TKwprotected
					var pvisibilitynode1: nullable AProtectedVisibility = new AProtectedVisibility.init_aprotectedvisibility(
						tkwprotectednode2
					)
					node_list = pvisibilitynode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction83
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwintrudenode2 = nodearraylist1
					assert tkwintrudenode2 isa nullable TKwintrude
					var pvisibilitynode1: nullable AIntrudeVisibility = new AIntrudeVisibility.init_aintrudevisibility(
						tkwintrudenode2
					)
					node_list = pvisibilitynode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction84
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tplusnode2 = nodearraylist1
					assert tplusnode2 isa nullable TPlus
					var pmethidnode1: nullable APlusMethid = new APlusMethid.init_aplusmethid(
						tplusnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction85
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tminusnode2 = nodearraylist1
					assert tminusnode2 isa nullable TMinus
					var pmethidnode1: nullable AMinusMethid = new AMinusMethid.init_aminusmethid(
						tminusnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction86
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tstarnode2 = nodearraylist1
					assert tstarnode2 isa nullable TStar
					var pmethidnode1: nullable AStarMethid = new AStarMethid.init_astarmethid(
						tstarnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction87
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tstarstarnode2 = nodearraylist1
					assert tstarstarnode2 isa nullable TStarstar
					var pmethidnode1: nullable AStarstarMethid = new AStarstarMethid.init_astarstarmethid(
						tstarstarnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction88
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tslashnode2 = nodearraylist1
					assert tslashnode2 isa nullable TSlash
					var pmethidnode1: nullable ASlashMethid = new ASlashMethid.init_aslashmethid(
						tslashnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction89
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tpercentnode2 = nodearraylist1
					assert tpercentnode2 isa nullable TPercent
					var pmethidnode1: nullable APercentMethid = new APercentMethid.init_apercentmethid(
						tpercentnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction90
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var teqnode2 = nodearraylist1
					assert teqnode2 isa nullable TEq
					var pmethidnode1: nullable AEqMethid = new AEqMethid.init_aeqmethid(
						teqnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction91
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tnenode2 = nodearraylist1
					assert tnenode2 isa nullable TNe
					var pmethidnode1: nullable ANeMethid = new ANeMethid.init_anemethid(
						tnenode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction92
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tlenode2 = nodearraylist1
					assert tlenode2 isa nullable TLe
					var pmethidnode1: nullable ALeMethid = new ALeMethid.init_alemethid(
						tlenode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction93
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tgenode2 = nodearraylist1
					assert tgenode2 isa nullable TGe
					var pmethidnode1: nullable AGeMethid = new AGeMethid.init_agemethid(
						tgenode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction94
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tltnode2 = nodearraylist1
					assert tltnode2 isa nullable TLt
					var pmethidnode1: nullable ALtMethid = new ALtMethid.init_altmethid(
						tltnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction95
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tgtnode2 = nodearraylist1
					assert tgtnode2 isa nullable TGt
					var pmethidnode1: nullable AGtMethid = new AGtMethid.init_agtmethid(
						tgtnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction96
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tllnode2 = nodearraylist1
					assert tllnode2 isa nullable TLl
					var pmethidnode1: nullable ALlMethid = new ALlMethid.init_allmethid(
						tllnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction97
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tggnode2 = nodearraylist1
					assert tggnode2 isa nullable TGg
					var pmethidnode1: nullable AGgMethid = new AGgMethid.init_aggmethid(
						tggnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction98
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tobranode2 = nodearraylist1
					assert tobranode2 isa nullable TObra
					var tcbranode3 = nodearraylist2
					assert tcbranode3 isa nullable TCbra
					var pmethidnode1: nullable ABraMethid = new ABraMethid.init_abramethid(
						tobranode2,
						tcbranode3
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction99
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tstarshipnode2 = nodearraylist1
					assert tstarshipnode2 isa nullable TStarship
					var pmethidnode1: nullable AStarshipMethid = new AStarshipMethid.init_astarshipmethid(
						tstarshipnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction100
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var tassignnode3 = nodearraylist2
					assert tassignnode3 isa nullable TAssign
					var pmethidnode1: nullable AAssignMethid = new AAssignMethid.init_aassignmethid(
						tidnode2,
						tassignnode3
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction101
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tobranode2 = nodearraylist1
					assert tobranode2 isa nullable TObra
					var tcbranode3 = nodearraylist2
					assert tcbranode3 isa nullable TCbra
					var tassignnode4 = nodearraylist3
					assert tassignnode4 isa nullable TAssign
					var pmethidnode1: nullable ABraassignMethid = new ABraassignMethid.init_abraassignmethid(
						tobranode2,
						tcbranode3,
						tassignnode4
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction102
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var pmethidnode1: nullable AIdMethid = new AIdMethid.init_aidmethid(
						tidnode2
					)
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction103
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var toparnode2 = nodearraylist1
					assert toparnode2 isa nullable TOpar
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var tcparnode5 = nodearraylist4
					assert tcparnode5 isa nullable TCpar
					var ptypenode6 = nodearraylist5
					assert ptypenode6 isa nullable AType
					var psignaturenode1: nullable ASignature = new ASignature.init_asignature(
						toparnode2,
						listnode4,
						tcparnode5,
						ptypenode6
					)
					node_list = psignaturenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction104
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var toparnode2 = nodearraylist1
					assert toparnode2 isa nullable TOpar
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var tcparnode5 = nodearraylist4
					assert tcparnode5 isa nullable TCpar
					var psignaturenode1: nullable ASignature = new ASignature.init_asignature(
						toparnode2,
						listnode4,
						tcparnode5,
						null
					)
					node_list = psignaturenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction105
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var ptypenode5 = nodearraylist1
					assert ptypenode5 isa nullable AType
					var psignaturenode1: nullable ASignature = new ASignature.init_asignature(
						null,
						listnode3,
						null,
						ptypenode5
					)
					node_list = psignaturenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction106
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var psignaturenode1: nullable ASignature = new ASignature.init_asignature(
						null,
						listnode3,
						null,
						null
					)
					node_list = psignaturenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction107
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pparamnode1 = nodearraylist1
					if pparamnode1 != null then
						listnode2.add(pparamnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction108
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pparamnode1 = nodearraylist1
					var listnode2 = nodearraylist2
					assert listnode2 isa Array[Object]
					if pparamnode1 != null then
						listnode3.add(pparamnode1)
					end
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction110
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pparamnode1 = nodearraylist3
					node_list = pparamnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction111
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var pannotationsnode5 = nodearraylist2
					assert pannotationsnode5 isa nullable AAnnotations
					var pparamnode1: nullable AParam = new AParam.init_aparam(
						tidnode2,
						null,
						null,
						pannotationsnode5
					)
					node_list = pparamnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction112
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var ptypenode3 = nodearraylist2
					assert ptypenode3 isa nullable AType
					var pparamnode1: nullable AParam = new AParam.init_aparam(
						tidnode2,
						ptypenode3,
						null,
						null
					)
					node_list = pparamnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction113
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var pannotationsnode5 = nodearraylist2
					assert pannotationsnode5 isa nullable AAnnotations
					var pparamnode1: nullable AParam = new AParam.init_aparam(
						tidnode2,
						ptypenode3,
						null,
						pannotationsnode5
					)
					node_list = pparamnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction114
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var ptypenode3 = nodearraylist2
					assert ptypenode3 isa nullable AType
					var tdotdotdotnode4 = nodearraylist3
					assert tdotdotdotnode4 isa nullable TDotdotdot
					var pparamnode1: nullable AParam = new AParam.init_aparam(
						tidnode2,
						ptypenode3,
						tdotdotdotnode4,
						null
					)
					node_list = pparamnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction115
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tdotdotdotnode4 = nodearraylist4
					assert tdotdotdotnode4 isa nullable TDotdotdot
					var pannotationsnode5 = nodearraylist2
					assert pannotationsnode5 isa nullable AAnnotations
					var pparamnode1: nullable AParam = new AParam.init_aparam(
						tidnode2,
						ptypenode3,
						tdotdotdotnode4,
						pannotationsnode5
					)
					node_list = pparamnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction116
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tkwimportnode2 = nodearraylist1
					assert tkwimportnode2 isa nullable TKwimport
					var pexterncallnode3 = nodearraylist3
					assert pexterncallnode3 isa nullable AExternCall
					if pexterncallnode3 != null then
						listnode4.add(pexterncallnode3)
					end
					var pexterncallsnode1: nullable AExternCalls = new AExternCalls.init_aexterncalls(
						tkwimportnode2,
						listnode4
					)
					node_list = pexterncallsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction117
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var tkwimportnode2 = nodearraylist1
					assert tkwimportnode2 isa nullable TKwimport
					var pexterncallnode3 = nodearraylist3
					assert pexterncallnode3 isa nullable AExternCall
					var listnode4 = nodearraylist4
					assert listnode4 isa Array[Object]
					if pexterncallnode3 != null then
						listnode5.add(pexterncallnode3)
					end
					listnode5 = concat(listnode5, listnode4)
					var pexterncallsnode1: nullable AExternCalls = new AExternCalls.init_aexterncalls(
						tkwimportnode2,
						listnode5
					)
					node_list = pexterncallsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction119
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexterncallnode1 = nodearraylist3
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction120
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pexterncallnode1 = nodearraylist1
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction122
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwsupernode2 = nodearraylist1
					assert tkwsupernode2 isa nullable TKwsuper
					var pexterncallnode1: nullable ASuperExternCall = new ASuperExternCall.init_asuperexterncall(
						tkwsupernode2
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction123
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pmethidnode2 = nodearraylist1
					assert pmethidnode2 isa nullable AMethid
					var pexterncallnode1: nullable ALocalPropExternCall = new ALocalPropExternCall.init_alocalpropexterncall(
						pmethidnode2
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction124
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tdotnode3 = nodearraylist2
					assert tdotnode3 isa nullable TDot
					var pmethidnode4 = nodearraylist3
					assert pmethidnode4 isa nullable AMethid
					var pexterncallnode1: nullable AFullPropExternCall = new AFullPropExternCall.init_afullpropexterncall(
						ptypenode2,
						tdotnode3,
						pmethidnode4
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction125
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var pexterncallnode1: nullable AInitPropExternCall = new AInitPropExternCall.init_ainitpropexterncall(
						ptypenode2
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction126
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tdotnode3 = nodearraylist2
					assert tdotnode3 isa nullable TDot
					var tkwasnode4 = nodearraylist3
					assert tkwasnode4 isa nullable TKwas
					var ptypenode5 = nodearraylist7
					assert ptypenode5 isa nullable AType
					var pexterncallnode1: nullable ACastAsExternCall = new ACastAsExternCall.init_acastasexterncall(
						ptypenode2,
						tdotnode3,
						tkwasnode4,
						ptypenode5
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction127
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tdotnode3 = nodearraylist2
					assert tdotnode3 isa nullable TDot
					var tkwasnode4 = nodearraylist3
					assert tkwasnode4 isa nullable TKwas
					var ptypenode5 = nodearraylist5
					assert ptypenode5 isa nullable AType
					var pexterncallnode1: nullable ACastAsExternCall = new ACastAsExternCall.init_acastasexterncall(
						ptypenode2,
						tdotnode3,
						tkwasnode4,
						ptypenode5
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction128
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tkwasnode3 = nodearraylist3
					assert tkwasnode3 isa nullable TKwas
					var tkwnullablenode4 = nodearraylist7
					assert tkwnullablenode4 isa nullable TKwnullable
					var pexterncallnode1: nullable AAsNullableExternCall = new AAsNullableExternCall.init_aasnullableexterncall(
						ptypenode2,
						tkwasnode3,
						tkwnullablenode4
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction129
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tkwasnode3 = nodearraylist3
					assert tkwasnode3 isa nullable TKwas
					var tkwnullablenode4 = nodearraylist5
					assert tkwnullablenode4 isa nullable TKwnullable
					var pexterncallnode1: nullable AAsNullableExternCall = new AAsNullableExternCall.init_aasnullableexterncall(
						ptypenode2,
						tkwasnode3,
						tkwnullablenode4
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction130
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist11 = p.pop
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tkwasnode3 = nodearraylist3
					assert tkwasnode3 isa nullable TKwas
					var tkwnotnode4 = nodearraylist7
					assert tkwnotnode4 isa nullable TKwnot
					var tkwnullablenode5 = nodearraylist9
					assert tkwnullablenode5 isa nullable TKwnullable
					var pexterncallnode1: nullable AAsNotNullableExternCall = new AAsNotNullableExternCall.init_aasnotnullableexterncall(
						ptypenode2,
						tkwasnode3,
						tkwnotnode4,
						tkwnullablenode5
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction131
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var tkwasnode3 = nodearraylist3
					assert tkwasnode3 isa nullable TKwas
					var tkwnotnode4 = nodearraylist5
					assert tkwnotnode4 isa nullable TKwnot
					var tkwnullablenode5 = nodearraylist7
					assert tkwnullablenode5 isa nullable TKwnullable
					var pexterncallnode1: nullable AAsNotNullableExternCall = new AAsNotNullableExternCall.init_aasnotnullableexterncall(
						ptypenode2,
						tkwasnode3,
						tkwnotnode4,
						tkwnullablenode5
					)
					node_list = pexterncallnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction133
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tstringnode1 = nodearraylist1
					node_list = tstringnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction134
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwinnode2 = nodearraylist1
					assert tkwinnode2 isa nullable TKwin
					var tstringnode3 = nodearraylist3
					assert tstringnode3 isa nullable TString
					var pinlanguagenode1: nullable AInLanguage = new AInLanguage.init_ainlanguage(
						tkwinnode2,
						tstringnode3
					)
					node_list = pinlanguagenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction135
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var texterncodesegmentnode3 = nodearraylist1
					assert texterncodesegmentnode3 isa nullable TExternCodeSegment
					var pexterncodeblocknode1: nullable AExternCodeBlock = new AExternCodeBlock.init_aexterncodeblock(
						null,
						texterncodesegmentnode3
					)
					node_list = pexterncodeblocknode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction136
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pinlanguagenode2 = nodearraylist1
					assert pinlanguagenode2 isa nullable AInLanguage
					var texterncodesegmentnode3 = nodearraylist2
					assert texterncodesegmentnode3 isa nullable TExternCodeSegment
					var pexterncodeblocknode1: nullable AExternCodeBlock = new AExternCodeBlock.init_aexterncodeblock(
						pinlanguagenode2,
						texterncodesegmentnode3
					)
					node_list = pexterncodeblocknode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction137
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pexterncodeblocknode1 = nodearraylist1
					node_list = pexterncodeblocknode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction139
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexterncodeblocknode1 = nodearraylist2
					node_list = pexterncodeblocknode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction140
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tclassidnode3 = nodearraylist1
					assert tclassidnode3 isa nullable TClassid
					var pannotationsnode5 = nodearraylist2
					assert pannotationsnode5 isa nullable AAnnotations
					var ptypenode1: nullable AType = new AType.init_atype(
						null,
						tclassidnode3,
						listnode4,
						pannotationsnode5
					)
					node_list = ptypenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction141
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tkwnullablenode2 = nodearraylist1
					assert tkwnullablenode2 isa nullable TKwnullable
					var tclassidnode3 = nodearraylist2
					assert tclassidnode3 isa nullable TClassid
					var pannotationsnode5 = nodearraylist3
					assert pannotationsnode5 isa nullable AAnnotations
					var ptypenode1: nullable AType = new AType.init_atype(
						tkwnullablenode2,
						tclassidnode3,
						listnode4,
						pannotationsnode5
					)
					node_list = ptypenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction142
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var tclassidnode3 = nodearraylist1
					assert tclassidnode3 isa nullable TClassid
					var listnode4 = nodearraylist4
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var pannotationsnode6 = nodearraylist7
					assert pannotationsnode6 isa nullable AAnnotations
					var ptypenode1: nullable AType = new AType.init_atype(
						null,
						tclassidnode3,
						listnode5,
						pannotationsnode6
					)
					node_list = ptypenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction143
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var tkwnullablenode2 = nodearraylist1
					assert tkwnullablenode2 isa nullable TKwnullable
					var tclassidnode3 = nodearraylist2
					assert tclassidnode3 isa nullable TClassid
					var listnode4 = nodearraylist5
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var pannotationsnode6 = nodearraylist8
					assert pannotationsnode6 isa nullable AAnnotations
					var ptypenode1: nullable AType = new AType.init_atype(
						tkwnullablenode2,
						tclassidnode3,
						listnode5,
						pannotationsnode6
					)
					node_list = ptypenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction144
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var ptypenode1 = nodearraylist1
					if ptypenode1 != null then
						listnode2.add(ptypenode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction145
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var ptypenode1 = nodearraylist1
					var listnode2 = nodearraylist2
					assert listnode2 isa Array[Object]
					if ptypenode1 != null then
						listnode3.add(ptypenode1)
					end
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction146
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var ptypenode1 = nodearraylist3
					node_list = ptypenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction150
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode1 = nodearraylist2
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction151
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var tkwendnode3 = nodearraylist2
					assert tkwendnode3 isa nullable TKwend
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode2,
						tkwendnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction152
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var tkwendnode3 = nodearraylist1
					assert tkwendnode3 isa nullable TKwend
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode2,
						tkwendnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction153
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pexprnode1 = nodearraylist1
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction154
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					if pexprnode2 != null then
						listnode3.add(pexprnode2)
					end
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode3,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction155
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					if pexprnode2 != null then
						listnode4.add(pexprnode2)
					end
					listnode4 = concat(listnode4, listnode3)
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode4,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction156
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					if pexprnode2 != null then
						listnode3.add(pexprnode2)
					end
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode3,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction157
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					if pexprnode2 != null then
						listnode4.add(pexprnode2)
					end
					listnode4 = concat(listnode4, listnode3)
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode4,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction158
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					if pexprnode2 != null then
						listnode3.add(pexprnode2)
					end
					var tkwendnode4 = nodearraylist3
					assert tkwendnode4 isa nullable TKwend
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode3,
						tkwendnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction159
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					if pexprnode2 != null then
						listnode4.add(pexprnode2)
					end
					listnode4 = concat(listnode4, listnode3)
					var tkwendnode5 = nodearraylist4
					assert tkwendnode5 isa nullable TKwend
					var pexprnode1: nullable ABlockExpr = new ABlockExpr.init_ablockexpr(
						listnode4,
						tkwendnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction163
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwreturnnode2 = nodearraylist1
					assert tkwreturnnode2 isa nullable TKwreturn
					var pexprnode1: nullable AReturnExpr = new AReturnExpr.init_areturnexpr(
						tkwreturnnode2,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction164
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwreturnnode2 = nodearraylist1
					assert tkwreturnnode2 isa nullable TKwreturn
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AReturnExpr = new AReturnExpr.init_areturnexpr(
						tkwreturnnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction165
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwbreaknode2 = nodearraylist1
					assert tkwbreaknode2 isa nullable TKwbreak
					var pexprnode1: nullable ABreakExpr = new ABreakExpr.init_abreakexpr(
						tkwbreaknode2,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction166
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwbreaknode2 = nodearraylist1
					assert tkwbreaknode2 isa nullable TKwbreak
					var plabelnode3 = nodearraylist2
					assert plabelnode3 isa nullable ALabel
					var pexprnode1: nullable ABreakExpr = new ABreakExpr.init_abreakexpr(
						tkwbreaknode2,
						plabelnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction167
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwabortnode2 = nodearraylist1
					assert tkwabortnode2 isa nullable TKwabort
					var pexprnode1: nullable AAbortExpr = new AAbortExpr.init_aabortexpr(
						tkwabortnode2
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction168
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwcontinuenode2 = nodearraylist1
					assert tkwcontinuenode2 isa nullable TKwcontinue
					var pexprnode1: nullable AContinueExpr = new AContinueExpr.init_acontinueexpr(
						tkwcontinuenode2,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction169
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwcontinuenode2 = nodearraylist1
					assert tkwcontinuenode2 isa nullable TKwcontinue
					var plabelnode3 = nodearraylist2
					assert plabelnode3 isa nullable ALabel
					var pexprnode1: nullable AContinueExpr = new AContinueExpr.init_acontinueexpr(
						tkwcontinuenode2,
						plabelnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction176
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist4
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist5
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction177
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist5
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist6
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction178
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist6
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist7
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction180
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist1
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist2
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction181
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction182
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist4
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction184
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pqualifiednode2 = nodearraylist1
					assert pqualifiednode2 isa nullable AQualified
					var tkwsupernode3 = nodearraylist2
					assert tkwsupernode3 isa nullable TKwsuper
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ASuperExpr = new ASuperExpr.init_asuperexpr(
						pqualifiednode2,
						tkwsupernode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction185
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwinitnode3 = nodearraylist4
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist5
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction186
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tkwinitnode3 = nodearraylist1
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist2
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction187
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwinitnode3 = nodearraylist5
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist6
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction188
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwinitnode3 = nodearraylist6
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist7
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction190
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tkwinitnode3 = nodearraylist2
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction191
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tkwinitnode3 = nodearraylist3
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist4
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction193
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwdebugnode2 = nodearraylist1
					assert tkwdebugnode2 isa nullable TKwdebug
					var tkwtypenode3 = nodearraylist2
					assert tkwtypenode3 isa nullable TKwtype
					var pexprnode4 = nodearraylist5
					assert pexprnode4 isa nullable AExpr
					var ptypenode5 = nodearraylist3
					assert ptypenode5 isa nullable AType
					var pexprnode1: nullable ADebugTypeExpr = new ADebugTypeExpr.init_adebugtypeexpr(
						tkwdebugnode2,
						tkwtypenode3,
						pexprnode4,
						ptypenode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction194
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwlabelnode2 = nodearraylist1
					assert tkwlabelnode2 isa nullable TKwlabel
					var plabelnode1: nullable ALabel = new ALabel.init_alabel(
						tkwlabelnode2,
						null
					)
					node_list = plabelnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction195
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwlabelnode2 = nodearraylist1
					assert tkwlabelnode2 isa nullable TKwlabel
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var plabelnode1: nullable ALabel = new ALabel.init_alabel(
						tkwlabelnode2,
						tidnode3
					)
					node_list = plabelnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction196
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwvarnode2 = nodearraylist1
					assert tkwvarnode2 isa nullable TKwvar
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var ptypenode4 = nodearraylist3
					assert ptypenode4 isa nullable AType
					var pexprnode1: nullable AVardeclExpr = new AVardeclExpr.init_avardeclexpr(
						tkwvarnode2,
						tidnode3,
						ptypenode4,
						null,
						null,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction197
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwvarnode2 = nodearraylist1
					assert tkwvarnode2 isa nullable TKwvar
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var ptypenode4 = nodearraylist4
					assert ptypenode4 isa nullable AType
					var pannotationsnode7 = nodearraylist3
					assert pannotationsnode7 isa nullable AAnnotations
					var pexprnode1: nullable AVardeclExpr = new AVardeclExpr.init_avardeclexpr(
						tkwvarnode2,
						tidnode3,
						ptypenode4,
						null,
						null,
						pannotationsnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction198
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwvarnode2 = nodearraylist1
					assert tkwvarnode2 isa nullable TKwvar
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var ptypenode4 = nodearraylist3
					assert ptypenode4 isa nullable AType
					var tassignnode5 = nodearraylist4
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist6
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable AVardeclExpr = new AVardeclExpr.init_avardeclexpr(
						tkwvarnode2,
						tidnode3,
						ptypenode4,
						tassignnode5,
						pexprnode6,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction199
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwvarnode2 = nodearraylist1
					assert tkwvarnode2 isa nullable TKwvar
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var ptypenode4 = nodearraylist4
					assert ptypenode4 isa nullable AType
					var tassignnode5 = nodearraylist5
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist7
					assert pexprnode6 isa nullable AExpr
					var pannotationsnode7 = nodearraylist3
					assert pannotationsnode7 isa nullable AAnnotations
					var pexprnode1: nullable AVardeclExpr = new AVardeclExpr.init_avardeclexpr(
						tkwvarnode2,
						tidnode3,
						ptypenode4,
						tassignnode5,
						pexprnode6,
						pannotationsnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction200
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tattridnode3 = nodearraylist5
					assert tattridnode3 isa nullable TAttrid
					var tassignnode4 = nodearraylist6
					assert tassignnode4 isa nullable TAssign
					var pexprnode5 = nodearraylist7
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AAttrAssignExpr = new AAttrAssignExpr.init_aattrassignexpr(
						pexprnode2,
						tattridnode3,
						tassignnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction201
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tattridnode3 = nodearraylist2
					assert tattridnode3 isa nullable TAttrid
					var tassignnode4 = nodearraylist3
					assert tassignnode4 isa nullable TAssign
					var pexprnode5 = nodearraylist4
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AAttrAssignExpr = new AAttrAssignExpr.init_aattrassignexpr(
						pexprnode2,
						tattridnode3,
						tassignnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction202
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist4
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist5
					assert pexprsnode4 isa nullable AExprs
					var tassignnode5 = nodearraylist6
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist7
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction203
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist4
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var tassignnode6 = nodearraylist5
					assert tassignnode6 isa nullable TAssign
					var pexprnode7 = nodearraylist6
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction204
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist5
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist6
					assert pexprsnode4 isa nullable AExprs
					var tassignnode5 = nodearraylist7
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist8
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction205
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist5
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var tassignnode6 = nodearraylist6
					assert tassignnode6 isa nullable TAssign
					var pexprnode7 = nodearraylist7
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction206
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist6
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist7
					assert pexprsnode4 isa nullable AExprs
					var tassignnode5 = nodearraylist8
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist9
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction207
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist6
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var tassignnode6 = nodearraylist7
					assert tassignnode6 isa nullable TAssign
					var pexprnode7 = nodearraylist8
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction210
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist1
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist2
					assert pexprsnode4 isa nullable AExprs
					var tassignnode5 = nodearraylist3
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist4
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction211
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist1
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var tassignnode6 = nodearraylist2
					assert tassignnode6 isa nullable TAssign
					var pexprnode7 = nodearraylist3
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction212
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var tassignnode5 = nodearraylist4
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist5
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction213
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var tassignnode6 = nodearraylist3
					assert tassignnode6 isa nullable TAssign
					var pexprnode7 = nodearraylist4
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction214
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist4
					assert pexprsnode4 isa nullable AExprs
					var tassignnode5 = nodearraylist5
					assert tassignnode5 isa nullable TAssign
					var pexprnode6 = nodearraylist6
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction215
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var tassignnode6 = nodearraylist4
					assert tassignnode6 isa nullable TAssign
					var pexprnode7 = nodearraylist5
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallAssignExpr = new ACallAssignExpr.init_acallassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						tassignnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction218
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprsnode3 = nodearraylist2
					assert pexprsnode3 isa nullable AExprs
					var tassignnode4 = nodearraylist3
					assert tassignnode4 isa nullable TAssign
					var pexprnode5 = nodearraylist4
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable ABraAssignExpr = new ABraAssignExpr.init_abraassignexpr(
						pexprnode2,
						pexprsnode3,
						tassignnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction219
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tattridnode3 = nodearraylist5
					assert tattridnode3 isa nullable TAttrid
					var passignopnode4 = nodearraylist6
					assert passignopnode4 isa nullable AAssignOp
					var pexprnode5 = nodearraylist7
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AAttrReassignExpr = new AAttrReassignExpr.init_aattrreassignexpr(
						pexprnode2,
						tattridnode3,
						passignopnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction220
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tattridnode3 = nodearraylist2
					assert tattridnode3 isa nullable TAttrid
					var passignopnode4 = nodearraylist3
					assert passignopnode4 isa nullable AAssignOp
					var pexprnode5 = nodearraylist4
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AAttrReassignExpr = new AAttrReassignExpr.init_aattrreassignexpr(
						pexprnode2,
						tattridnode3,
						passignopnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction221
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist4
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist5
					assert pexprsnode4 isa nullable AExprs
					var passignopnode5 = nodearraylist6
					assert passignopnode5 isa nullable AAssignOp
					var pexprnode6 = nodearraylist7
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction222
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist4
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var passignopnode6 = nodearraylist5
					assert passignopnode6 isa nullable AAssignOp
					var pexprnode7 = nodearraylist6
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction223
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist5
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist6
					assert pexprsnode4 isa nullable AExprs
					var passignopnode5 = nodearraylist7
					assert passignopnode5 isa nullable AAssignOp
					var pexprnode6 = nodearraylist8
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction224
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist5
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var passignopnode6 = nodearraylist6
					assert passignopnode6 isa nullable AAssignOp
					var pexprnode7 = nodearraylist7
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction225
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist6
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist7
					assert pexprsnode4 isa nullable AExprs
					var passignopnode5 = nodearraylist8
					assert passignopnode5 isa nullable AAssignOp
					var pexprnode6 = nodearraylist9
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction226
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist6
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var passignopnode6 = nodearraylist7
					assert passignopnode6 isa nullable AAssignOp
					var pexprnode7 = nodearraylist8
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction229
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist1
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist2
					assert pexprsnode4 isa nullable AExprs
					var passignopnode5 = nodearraylist3
					assert passignopnode5 isa nullable AAssignOp
					var pexprnode6 = nodearraylist4
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction230
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist1
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var passignopnode6 = nodearraylist2
					assert passignopnode6 isa nullable AAssignOp
					var pexprnode7 = nodearraylist3
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction231
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var passignopnode5 = nodearraylist4
					assert passignopnode5 isa nullable AAssignOp
					var pexprnode6 = nodearraylist5
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction232
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var passignopnode6 = nodearraylist3
					assert passignopnode6 isa nullable AAssignOp
					var pexprnode7 = nodearraylist4
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction233
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist4
					assert pexprsnode4 isa nullable AExprs
					var passignopnode5 = nodearraylist5
					assert passignopnode5 isa nullable AAssignOp
					var pexprnode6 = nodearraylist6
					assert pexprnode6 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode5,
						pexprnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction234
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var passignopnode6 = nodearraylist4
					assert passignopnode6 isa nullable AAssignOp
					var pexprnode7 = nodearraylist5
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable ACallReassignExpr = new ACallReassignExpr.init_acallreassignexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4,
						passignopnode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction237
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprsnode3 = nodearraylist2
					assert pexprsnode3 isa nullable AExprs
					var passignopnode4 = nodearraylist3
					assert passignopnode4 isa nullable AAssignOp
					var pexprnode5 = nodearraylist4
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable ABraReassignExpr = new ABraReassignExpr.init_abrareassignexpr(
						pexprnode2,
						pexprsnode3,
						passignopnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction238
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tpluseqnode2 = nodearraylist1
					assert tpluseqnode2 isa nullable TPluseq
					var passignopnode1: nullable APlusAssignOp = new APlusAssignOp.init_aplusassignop(
						tpluseqnode2
					)
					node_list = passignopnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction239
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tminuseqnode2 = nodearraylist1
					assert tminuseqnode2 isa nullable TMinuseq
					var passignopnode1: nullable AMinusAssignOp = new AMinusAssignOp.init_aminusassignop(
						tminuseqnode2
					)
					node_list = passignopnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction240
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwdonode2 = nodearraylist1
					assert tkwdonode2 isa nullable TKwdo
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var plabelnode4 = nodearraylist3
					assert plabelnode4 isa nullable ALabel
					var pexprnode1: nullable ADoExpr = new ADoExpr.init_adoexpr(
						tkwdonode2,
						pexprnode3,
						plabelnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction241
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwdonode2 = nodearraylist1
					assert tkwdonode2 isa nullable TKwdo
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ADoExpr = new ADoExpr.init_adoexpr(
						tkwdonode2,
						pexprnode3,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction242
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode4 = nodearraylist6
					assert pexprnode4 isa nullable AExpr
					var pexprnode5 = nodearraylist8
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AIfExpr = new AIfExpr.init_aifexpr(
						tkwifnode2,
						pexprnode3,
						pexprnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction243
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode4 = nodearraylist6
					assert pexprnode4 isa nullable AExpr
					var pexprnode1: nullable AIfExpr = new AIfExpr.init_aifexpr(
						tkwifnode2,
						pexprnode3,
						pexprnode4,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction244
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode4 = nodearraylist7
					assert pexprnode4 isa nullable AExpr
					var pexprnode5 = nodearraylist8
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AIfExpr = new AIfExpr.init_aifexpr(
						tkwifnode2,
						pexprnode3,
						pexprnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction245
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode5 = nodearraylist6
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AIfExpr = new AIfExpr.init_aifexpr(
						tkwifnode2,
						pexprnode3,
						null,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction246
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode5 = nodearraylist7
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AIfExpr = new AIfExpr.init_aifexpr(
						tkwifnode2,
						pexprnode3,
						null,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction249
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwloopnode2 = nodearraylist1
					assert tkwloopnode2 isa nullable TKwloop
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var plabelnode4 = nodearraylist3
					assert plabelnode4 isa nullable ALabel
					var pexprnode1: nullable ALoopExpr = new ALoopExpr.init_aloopexpr(
						tkwloopnode2,
						pexprnode3,
						plabelnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction250
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwloopnode2 = nodearraylist1
					assert tkwloopnode2 isa nullable TKwloop
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ALoopExpr = new ALoopExpr.init_aloopexpr(
						tkwloopnode2,
						pexprnode3,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction251
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwwhilenode2 = nodearraylist1
					assert tkwwhilenode2 isa nullable TKwwhile
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var tkwdonode4 = nodearraylist5
					assert tkwdonode4 isa nullable TKwdo
					var pexprnode5 = nodearraylist6
					assert pexprnode5 isa nullable AExpr
					var plabelnode6 = nodearraylist7
					assert plabelnode6 isa nullable ALabel
					var pexprnode1: nullable AWhileExpr = new AWhileExpr.init_awhileexpr(
						tkwwhilenode2,
						pexprnode3,
						tkwdonode4,
						pexprnode5,
						plabelnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction252
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwwhilenode2 = nodearraylist1
					assert tkwwhilenode2 isa nullable TKwwhile
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var tkwdonode4 = nodearraylist5
					assert tkwdonode4 isa nullable TKwdo
					var pexprnode5 = nodearraylist6
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AWhileExpr = new AWhileExpr.init_awhileexpr(
						tkwwhilenode2,
						pexprnode3,
						tkwdonode4,
						pexprnode5,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction253
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist11 = p.pop
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tkwfornode2 = nodearraylist1
					assert tkwfornode2 isa nullable TKwfor
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var pexprnode5 = nodearraylist7
					assert pexprnode5 isa nullable AExpr
					var tkwdonode6 = nodearraylist9
					assert tkwdonode6 isa nullable TKwdo
					var pexprnode7 = nodearraylist10
					assert pexprnode7 isa nullable AExpr
					var plabelnode8 = nodearraylist11
					assert plabelnode8 isa nullable ALabel
					var pexprnode1: nullable AForExpr = new AForExpr.init_aforexpr(
						tkwfornode2,
						listnode4,
						pexprnode5,
						tkwdonode6,
						pexprnode7,
						plabelnode8
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction254
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tkwfornode2 = nodearraylist1
					assert tkwfornode2 isa nullable TKwfor
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var pexprnode5 = nodearraylist7
					assert pexprnode5 isa nullable AExpr
					var tkwdonode6 = nodearraylist9
					assert tkwdonode6 isa nullable TKwdo
					var pexprnode7 = nodearraylist10
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable AForExpr = new AForExpr.init_aforexpr(
						tkwfornode2,
						listnode4,
						pexprnode5,
						tkwdonode6,
						pexprnode7,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction255
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwassertnode2 = nodearraylist1
					assert tkwassertnode2 isa nullable TKwassert
					var pexprnode4 = nodearraylist2
					assert pexprnode4 isa nullable AExpr
					var pexprnode5 = nodearraylist4
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AAssertExpr = new AAssertExpr.init_aassertexpr(
						tkwassertnode2,
						null,
						pexprnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction256
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwassertnode2 = nodearraylist1
					assert tkwassertnode2 isa nullable TKwassert
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var pexprnode4 = nodearraylist3
					assert pexprnode4 isa nullable AExpr
					var pexprnode5 = nodearraylist5
					assert pexprnode5 isa nullable AExpr
					var pexprnode1: nullable AAssertExpr = new AAssertExpr.init_aassertexpr(
						tkwassertnode2,
						tidnode3,
						pexprnode4,
						pexprnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction257
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwassertnode2 = nodearraylist1
					assert tkwassertnode2 isa nullable TKwassert
					var pexprnode4 = nodearraylist2
					assert pexprnode4 isa nullable AExpr
					var pexprnode1: nullable AAssertExpr = new AAssertExpr.init_aassertexpr(
						tkwassertnode2,
						null,
						pexprnode4,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction258
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwassertnode2 = nodearraylist1
					assert tkwassertnode2 isa nullable TKwassert
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var pexprnode4 = nodearraylist3
					assert pexprnode4 isa nullable AExpr
					var pexprnode1: nullable AAssertExpr = new AAssertExpr.init_aassertexpr(
						tkwassertnode2,
						tidnode3,
						pexprnode4,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction259
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode1 = nodearraylist1
					node_list = tidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction261
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist11 = p.pop
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var tkwthennode4 = nodearraylist5
					assert tkwthennode4 isa nullable TKwthen
					var pexprnode5 = nodearraylist7
					assert pexprnode5 isa nullable AExpr
					var tkwelsenode6 = nodearraylist9
					assert tkwelsenode6 isa nullable TKwelse
					var pexprnode7 = nodearraylist11
					assert pexprnode7 isa nullable AExpr
					var pexprnode1: nullable AIfexprExpr = new AIfexprExpr.init_aifexprexpr(
						tkwifnode2,
						pexprnode3,
						tkwthennode4,
						pexprnode5,
						tkwelsenode6,
						pexprnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction263
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AOrExpr = new AOrExpr.init_aorexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction264
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AAndExpr = new AAndExpr.init_aandexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction265
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist5
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AOrElseExpr = new AOrElseExpr.init_aorelseexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction266
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AImpliesExpr = new AImpliesExpr.init_aimpliesexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction268
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnotnode2 = nodearraylist1
					assert tkwnotnode2 isa nullable TKwnot
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ANotExpr = new ANotExpr.init_anotexpr(
						tkwnotnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction270
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AEqExpr = new AEqExpr.init_aeqexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction271
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ANeExpr = new ANeExpr.init_aneexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction272
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ALtExpr = new ALtExpr.init_altexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction273
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ALeExpr = new ALeExpr.init_aleexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction274
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ALlExpr = new ALlExpr.init_allexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction275
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AGtExpr = new AGtExpr.init_agtexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction276
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AGeExpr = new AGeExpr.init_ageexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction277
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AGgExpr = new AGgExpr.init_aggexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction278
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AStarshipExpr = new AStarshipExpr.init_astarshipexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction279
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var ptypenode3 = nodearraylist4
					assert ptypenode3 isa nullable AType
					var pexprnode1: nullable AIsaExpr = new AIsaExpr.init_aisaexpr(
						pexprnode2,
						ptypenode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction281
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable APlusExpr = new APlusExpr.init_aplusexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction282
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AMinusExpr = new AMinusExpr.init_aminusexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction284
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AStarExpr = new AStarExpr.init_astarexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction285
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable ASlashExpr = new ASlashExpr.init_aslashexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction286
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable APercentExpr = new APercentExpr.init_apercentexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction288
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprnode3 = nodearraylist4
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AStarstarExpr = new AStarstarExpr.init_astarstarexpr(
						pexprnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction290
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tminusnode2 = nodearraylist1
					assert tminusnode2 isa nullable TMinus
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AUminusExpr = new AUminusExpr.init_auminusexpr(
						tminusnode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction291
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwoncenode2 = nodearraylist1
					assert tkwoncenode2 isa nullable TKwonce
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode1: nullable AOnceExpr = new AOnceExpr.init_aonceexpr(
						tkwoncenode2,
						pexprnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction293
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var pexprsnode5 = nodearraylist4
					assert pexprsnode5 isa nullable AExprs
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						null,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction294
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var listnode6 = new Array[Object]
					var pexprsnode5: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode6
					)
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						null,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction295
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwissetnode2 = nodearraylist1
					assert tkwissetnode2 isa nullable TKwisset
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var tattridnode4 = nodearraylist6
					assert tattridnode4 isa nullable TAttrid
					var pexprnode1: nullable AIssetAttrExpr = new AIssetAttrExpr.init_aissetattrexpr(
						tkwissetnode2,
						pexprnode3,
						tattridnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction296
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwissetnode2 = nodearraylist1
					assert tkwissetnode2 isa nullable TKwisset
					var pexprnode3: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tattridnode4 = nodearraylist3
					assert tattridnode4 isa nullable TAttrid
					var pexprnode1: nullable AIssetAttrExpr = new AIssetAttrExpr.init_aissetattrexpr(
						tkwissetnode2,
						pexprnode3,
						tattridnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction298
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tattridnode3 = nodearraylist5
					assert tattridnode3 isa nullable TAttrid
					var pexprnode1: nullable AAttrExpr = new AAttrExpr.init_aattrexpr(
						pexprnode2,
						tattridnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction299
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tattridnode3 = nodearraylist2
					assert tattridnode3 isa nullable TAttrid
					var pexprnode1: nullable AAttrExpr = new AAttrExpr.init_aattrexpr(
						pexprnode2,
						tattridnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction301
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist4
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction303
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist5
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction305
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist6
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction309
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist1
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction311
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction313
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction317
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pqualifiednode2 = nodearraylist1
					assert pqualifiednode2 isa nullable AQualified
					var tkwsupernode3 = nodearraylist2
					assert tkwsupernode3 isa nullable TKwsuper
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ASuperExpr = new ASuperExpr.init_asuperexpr(
						pqualifiednode2,
						tkwsupernode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction319
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwinitnode3 = nodearraylist4
					assert tkwinitnode3 isa nullable TKwinit
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction321
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var tkwinitnode3 = nodearraylist1
					assert tkwinitnode3 isa nullable TKwinit
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction322
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pexprsnode3 = nodearraylist2
					assert pexprsnode3 isa nullable AExprs
					var pexprnode1: nullable ABraExpr = new ABraExpr.init_abraexpr(
						pexprnode2,
						pexprsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction323
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tidnode4 = nodearraylist6
					assert tidnode4 isa nullable TId
					var pexprsnode5 = nodearraylist7
					assert pexprsnode5 isa nullable AExprs
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						tidnode4,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction324
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tidnode4 = nodearraylist6
					assert tidnode4 isa nullable TId
					var listnode6 = new Array[Object]
					var pexprsnode5: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode6
					)
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						tidnode4,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction325
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tidnode4 = nodearraylist7
					assert tidnode4 isa nullable TId
					var pexprsnode5 = nodearraylist8
					assert pexprsnode5 isa nullable AExprs
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						tidnode4,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction326
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tidnode4 = nodearraylist7
					assert tidnode4 isa nullable TId
					var listnode6 = new Array[Object]
					var pexprsnode5: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode6
					)
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						tidnode4,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction327
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tidnode4 = nodearraylist8
					assert tidnode4 isa nullable TId
					var pexprsnode5 = nodearraylist9
					assert pexprsnode5 isa nullable AExprs
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						tidnode4,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction328
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnewnode2 = nodearraylist1
					assert tkwnewnode2 isa nullable TKwnew
					var ptypenode3 = nodearraylist3
					assert ptypenode3 isa nullable AType
					var tidnode4 = nodearraylist8
					assert tidnode4 isa nullable TId
					var listnode6 = new Array[Object]
					var pexprsnode5: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode6
					)
					var pexprnode1: nullable ANewExpr = new ANewExpr.init_anewexpr(
						tkwnewnode2,
						ptypenode3,
						tidnode4,
						pexprsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction331
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwasnode3 = nodearraylist4
					assert tkwasnode3 isa nullable TKwas
					var toparnode4 = nodearraylist6
					assert toparnode4 isa nullable TOpar
					var ptypenode5 = nodearraylist8
					assert ptypenode5 isa nullable AType
					var tcparnode6 = nodearraylist10
					assert tcparnode6 isa nullable TCpar
					var pexprnode1: nullable AAsCastExpr = new AAsCastExpr.init_aascastexpr(
						pexprnode2,
						tkwasnode3,
						toparnode4,
						ptypenode5,
						tcparnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction332
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist12 = p.pop
					var nodearraylist11 = p.pop
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwasnode3 = nodearraylist4
					assert tkwasnode3 isa nullable TKwas
					var toparnode4 = nodearraylist6
					assert toparnode4 isa nullable TOpar
					var tkwnotnode5 = nodearraylist8
					assert tkwnotnode5 isa nullable TKwnot
					var tkwnullnode6 = nodearraylist10
					assert tkwnullnode6 isa nullable TKwnull
					var tcparnode7 = nodearraylist12
					assert tcparnode7 isa nullable TCpar
					var pexprnode1: nullable AAsNotnullExpr = new AAsNotnullExpr.init_aasnotnullexpr(
						pexprnode2,
						tkwasnode3,
						toparnode4,
						tkwnotnode5,
						tkwnullnode6,
						tcparnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction333
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwasnode3 = nodearraylist4
					assert tkwasnode3 isa nullable TKwas
					var tkwnotnode5 = nodearraylist6
					assert tkwnotnode5 isa nullable TKwnot
					var tkwnullnode6 = nodearraylist8
					assert tkwnullnode6 isa nullable TKwnull
					var pexprnode1: nullable AAsNotnullExpr = new AAsNotnullExpr.init_aasnotnullexpr(
						pexprnode2,
						tkwasnode3,
						null,
						tkwnotnode5,
						tkwnullnode6,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction334
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tdotdotdotnode3 = nodearraylist2
					assert tdotdotdotnode3 isa nullable TDotdotdot
					var pexprnode1: nullable AVarargExpr = new AVarargExpr.init_avarargexpr(
						pexprnode2,
						tdotdotdotnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction335
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwselfnode2 = nodearraylist1
					assert tkwselfnode2 isa nullable TKwself
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable ASelfExpr = new ASelfExpr.init_aselfexpr(
						tkwselfnode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction336
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwtruenode2 = nodearraylist1
					assert tkwtruenode2 isa nullable TKwtrue
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable ATrueExpr = new ATrueExpr.init_atrueexpr(
						tkwtruenode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction337
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwfalsenode2 = nodearraylist1
					assert tkwfalsenode2 isa nullable TKwfalse
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable AFalseExpr = new AFalseExpr.init_afalseexpr(
						tkwfalsenode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction338
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwnullnode2 = nodearraylist1
					assert tkwnullnode2 isa nullable TKwnull
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable ANullExpr = new ANullExpr.init_anullexpr(
						tkwnullnode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction339
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tnumbernode2 = nodearraylist1
					assert tnumbernode2 isa nullable TNumber
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable ADecIntExpr = new ADecIntExpr.init_adecintexpr(
						tnumbernode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction340
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var thexnumbernode2 = nodearraylist1
					assert thexnumbernode2 isa nullable THexNumber
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable AHexIntExpr = new AHexIntExpr.init_ahexintexpr(
						thexnumbernode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction341
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tfloatnode2 = nodearraylist1
					assert tfloatnode2 isa nullable TFloat
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable AFloatExpr = new AFloatExpr.init_afloatexpr(
						tfloatnode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction342
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tcharnode2 = nodearraylist1
					assert tcharnode2 isa nullable TChar
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable ACharExpr = new ACharExpr.init_acharexpr(
						tcharnode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction343
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tstringnode2 = nodearraylist1
					assert tstringnode2 isa nullable TString
					var pannotationsnode3 = nodearraylist2
					assert pannotationsnode3 isa nullable AAnnotations
					var pexprnode1: nullable AStringExpr = new AStringExpr.init_astringexpr(
						tstringnode2,
						pannotationsnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction346
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tobranode2 = nodearraylist1
					assert tobranode2 isa nullable TObra
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode4 = nodearraylist7
					assert pexprnode4 isa nullable AExpr
					var tcbranode5 = nodearraylist9
					assert tcbranode5 isa nullable TCbra
					var pannotationsnode6 = nodearraylist10
					assert pannotationsnode6 isa nullable AAnnotations
					var pexprnode1: nullable ACrangeExpr = new ACrangeExpr.init_acrangeexpr(
						tobranode2,
						pexprnode3,
						pexprnode4,
						tcbranode5,
						pannotationsnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction347
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tobranode2 = nodearraylist1
					assert tobranode2 isa nullable TObra
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode4 = nodearraylist7
					assert pexprnode4 isa nullable AExpr
					var tobranode5 = nodearraylist9
					assert tobranode5 isa nullable TObra
					var pannotationsnode6 = nodearraylist10
					assert pannotationsnode6 isa nullable AAnnotations
					var pexprnode1: nullable AOrangeExpr = new AOrangeExpr.init_aorangeexpr(
						tobranode2,
						pexprnode3,
						pexprnode4,
						tobranode5,
						pannotationsnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction348
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tobranode2 = nodearraylist1
					assert tobranode2 isa nullable TObra
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var ptypenode5 = nodearraylist4
					assert ptypenode5 isa nullable AType
					var tcbranode6 = nodearraylist5
					assert tcbranode6 isa nullable TCbra
					var pannotationsnode7 = nodearraylist6
					assert pannotationsnode7 isa nullable AAnnotations
					var pexprnode1: nullable AArrayExpr = new AArrayExpr.init_aarrayexpr(
						tobranode2,
						listnode4,
						ptypenode5,
						tcbranode6,
						pannotationsnode7
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction349
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var toparnode2 = nodearraylist1
					assert toparnode2 isa nullable TOpar
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var tcparnode4 = nodearraylist5
					assert tcparnode4 isa nullable TCpar
					var pannotationsnode5 = nodearraylist6
					assert pannotationsnode5 isa nullable AAnnotations
					var pexprnode1: nullable AParExpr = new AParExpr.init_aparexpr(
						toparnode2,
						pexprnode3,
						tcparnode4,
						pannotationsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction351
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					if pexprnode2 != null then
						listnode4.add(pexprnode2)
					end
					listnode4 = concat(listnode4, listnode3)
					var pexprnode1: nullable AManyExpr = new AManyExpr.init_amanyexpr(
						listnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction352
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode1 = nodearraylist3
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction353
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pexprnode1 = nodearraylist1
					if pexprnode1 != null then
						listnode2.add(pexprnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction354
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode1 = nodearraylist1
					var listnode2 = nodearraylist2
					assert listnode2 isa Array[Object]
					if pexprnode1 != null then
						listnode3.add(pexprnode1)
					end
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction356
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode1 = nodearraylist1
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction358
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwifnode2 = nodearraylist1
					assert tkwifnode2 isa nullable TKwif
					var pexprnode3 = nodearraylist3
					assert pexprnode3 isa nullable AExpr
					var pexprnode4 = nodearraylist7
					assert pexprnode4 isa nullable AExpr
					var pexprnode1: nullable AIfExpr = new AIfExpr.init_aifexpr(
						tkwifnode2,
						pexprnode3,
						pexprnode4,
						null
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction359
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode2 = nodearraylist1
					assert listnode2 isa Array[Object]
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					listnode4 = concat(listnode4, listnode2)
					if pexprnode3 != null then
						listnode4.add(pexprnode3)
					end
					var pannotationsnode5 = nodearraylist3
					assert pannotationsnode5 isa nullable AAnnotations
					var pexprnode1: nullable ASuperstringExpr = new ASuperstringExpr.init_asuperstringexpr(
						listnode4,
						pannotationsnode5
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction360
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var listnode2 = nodearraylist1
					assert listnode2 isa Array[Object]
					var listnode3 = nodearraylist2
					assert listnode3 isa Array[Object]
					var pexprnode4 = nodearraylist3
					assert pexprnode4 isa nullable AExpr
					listnode5 = concat(listnode5, listnode2)
					listnode5 = concat(listnode5, listnode3)
					if pexprnode4 != null then
						listnode5.add(pexprnode4)
					end
					var pannotationsnode6 = nodearraylist4
					assert pannotationsnode6 isa nullable AAnnotations
					var pexprnode1: nullable ASuperstringExpr = new ASuperstringExpr.init_asuperstringexpr(
						listnode5,
						pannotationsnode6
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction361
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode1 = nodearraylist1
					var pexprnode2 = nodearraylist3
					if pexprnode1 != null then
						listnode3.add(pexprnode1)
					end
					if pexprnode2 != null then
						listnode3.add(pexprnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction362
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pexprnode1 = nodearraylist1
					if pexprnode1 != null then
						listnode2.add(pexprnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction363
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tstartstringnode2 = nodearraylist1
					assert tstartstringnode2 isa nullable TStartString
					var pexprnode1: nullable AStartStringExpr = new AStartStringExpr.init_astartstringexpr(
						tstartstringnode2
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction366
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tmidstringnode2 = nodearraylist1
					assert tmidstringnode2 isa nullable TMidString
					var pexprnode1: nullable AMidStringExpr = new AMidStringExpr.init_amidstringexpr(
						tmidstringnode2
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction367
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tendstringnode2 = nodearraylist1
					assert tendstringnode2 isa nullable TEndString
					var pexprnode1: nullable AEndStringExpr = new AEndStringExpr.init_aendstringexpr(
						tendstringnode2
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction368
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var tatnode2 = nodearraylist1
					assert tatnode2 isa nullable TAt
					var pannotationnode4 = nodearraylist2
					assert pannotationnode4 isa nullable AAnnotation
					if pannotationnode4 != null then
						listnode5.add(pannotationnode4)
					end
					var pannotationsnode1: nullable AAnnotations = new AAnnotations.init_aannotations(
						tatnode2,
						null,
						listnode5,
						null
					)
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction369
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var tatnode2 = nodearraylist1
					assert tatnode2 isa nullable TAt
					var toparnode3 = nodearraylist2
					assert toparnode3 isa nullable TOpar
					var listnode4 = nodearraylist4
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var tcparnode6 = nodearraylist6
					assert tcparnode6 isa nullable TCpar
					var pannotationsnode1: nullable AAnnotations = new AAnnotations.init_aannotations(
						tatnode2,
						toparnode3,
						listnode5,
						tcparnode6
					)
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction370
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pannotationsnode1 = nodearraylist1
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction372
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode7 = new Array[Object]
					var tkwredefnode3 = nodearraylist1
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist2
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist3
					assert patidnode5 isa nullable AAtid
					var pannotationsnode9 = nodearraylist4
					assert pannotationsnode9 isa nullable AAnnotations
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						null,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						null,
						listnode7,
						null,
						pannotationsnode9
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction373
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var tkwredefnode3 = nodearraylist1
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist2
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist3
					assert patidnode5 isa nullable AAtid
					var toparnode6 = nodearraylist4
					assert toparnode6 isa nullable TOpar
					var listnode7 = nodearraylist6
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var tcparnode9 = nodearraylist8
					assert tcparnode9 isa nullable TCpar
					var pannotationsnode10 = nodearraylist9
					assert pannotationsnode10 isa nullable AAnnotations
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						null,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						toparnode6,
						listnode8,
						tcparnode9,
						pannotationsnode10
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction374
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode5 = new Array[Object]
					var listnode4 = nodearraylist1
					assert listnode4 isa Array[Object]
					listnode5 = concat(listnode5, listnode4)
					var pannotationsnode1: nullable AAnnotations = new AAnnotations.init_aannotations(
						null,
						null,
						listnode5,
						null
					)
					node_list = pannotationsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction375
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pannotationnode1 = nodearraylist1
					if pannotationnode1 != null then
						listnode2.add(pannotationnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction376
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pannotationnode1 = nodearraylist1
					var listnode2 = nodearraylist2
					assert listnode2 isa Array[Object]
					if pannotationnode1 != null then
						listnode3.add(pannotationnode1)
					end
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction379
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var tkwredefnode3 = nodearraylist1
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist2
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist3
					assert patidnode5 isa nullable AAtid
					var pexprnode7 = nodearraylist4
					assert pexprnode7 isa nullable AExpr
					if pexprnode7 != null then
						listnode8.add(pexprnode7)
					end
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						null,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						null,
						listnode8,
						null,
						null
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction381
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pannotationnode1 = nodearraylist3
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction383
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode7 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist4
					assert patidnode5 isa nullable AAtid
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						null,
						listnode7,
						null,
						null
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction384
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode7 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist4
					assert patidnode5 isa nullable AAtid
					var pannotationsnode9 = nodearraylist5
					assert pannotationsnode9 isa nullable AAnnotations
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						null,
						listnode7,
						null,
						pannotationsnode9
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction385
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist4
					assert patidnode5 isa nullable AAtid
					var toparnode6 = nodearraylist5
					assert toparnode6 isa nullable TOpar
					var listnode7 = nodearraylist7
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var tcparnode9 = nodearraylist8
					assert tcparnode9 isa nullable TCpar
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						toparnode6,
						listnode8,
						tcparnode9,
						null
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction386
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist10 = p.pop
					var nodearraylist9 = p.pop
					var nodearraylist8 = p.pop
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist4
					assert patidnode5 isa nullable AAtid
					var toparnode6 = nodearraylist5
					assert toparnode6 isa nullable TOpar
					var listnode7 = nodearraylist7
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var tcparnode9 = nodearraylist8
					assert tcparnode9 isa nullable TCpar
					var pannotationsnode10 = nodearraylist9
					assert pannotationsnode10 isa nullable AAnnotations
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						toparnode6,
						listnode8,
						tcparnode9,
						pannotationsnode10
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction387
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var tkwredefnode3 = nodearraylist2
					assert tkwredefnode3 isa nullable TKwredef
					var pvisibilitynode4 = nodearraylist3
					assert pvisibilitynode4 isa nullable AVisibility
					var patidnode5 = nodearraylist4
					assert patidnode5 isa nullable AAtid
					var listnode7 = nodearraylist5
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var pannotationnode1: nullable AAnnotation = new AAnnotation.init_aannotation(
						pdocnode2,
						tkwredefnode3,
						pvisibilitynode4,
						patidnode5,
						null,
						listnode8,
						null,
						null
					)
					node_list = pannotationnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction388
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode7 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var patidnode5 = nodearraylist2
					assert patidnode5 isa nullable AAtid
					var ppropdefnode1: nullable AAnnotPropdef = new AAnnotPropdef.init_aannotpropdef(
						pdocnode2,
						null,
						null,
						patidnode5,
						null,
						listnode7,
						null,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction389
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode7 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var patidnode5 = nodearraylist2
					assert patidnode5 isa nullable AAtid
					var pannotationsnode9 = nodearraylist3
					assert pannotationsnode9 isa nullable AAnnotations
					var ppropdefnode1: nullable AAnnotPropdef = new AAnnotPropdef.init_aannotpropdef(
						pdocnode2,
						null,
						null,
						patidnode5,
						null,
						listnode7,
						null,
						pannotationsnode9
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction390
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var patidnode5 = nodearraylist2
					assert patidnode5 isa nullable AAtid
					var toparnode6 = nodearraylist3
					assert toparnode6 isa nullable TOpar
					var listnode7 = nodearraylist5
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var tcparnode9 = nodearraylist6
					assert tcparnode9 isa nullable TCpar
					var ppropdefnode1: nullable AAnnotPropdef = new AAnnotPropdef.init_aannotpropdef(
						pdocnode2,
						null,
						null,
						patidnode5,
						toparnode6,
						listnode8,
						tcparnode9,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction391
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist7 = p.pop
					var nodearraylist6 = p.pop
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var patidnode5 = nodearraylist2
					assert patidnode5 isa nullable AAtid
					var toparnode6 = nodearraylist3
					assert toparnode6 isa nullable TOpar
					var listnode7 = nodearraylist5
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var tcparnode9 = nodearraylist6
					assert tcparnode9 isa nullable TCpar
					var pannotationsnode10 = nodearraylist7
					assert pannotationsnode10 isa nullable AAnnotations
					var ppropdefnode1: nullable AAnnotPropdef = new AAnnotPropdef.init_aannotpropdef(
						pdocnode2,
						null,
						null,
						patidnode5,
						toparnode6,
						listnode8,
						tcparnode9,
						pannotationsnode10
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction392
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode8 = new Array[Object]
					var pdocnode2 = nodearraylist1
					assert pdocnode2 isa nullable ADoc
					var patidnode5 = nodearraylist2
					assert patidnode5 isa nullable AAtid
					var listnode7 = nodearraylist3
					assert listnode7 isa Array[Object]
					listnode8 = concat(listnode8, listnode7)
					var ppropdefnode1: nullable AAnnotPropdef = new AAnnotPropdef.init_aannotpropdef(
						pdocnode2,
						null,
						null,
						patidnode5,
						null,
						listnode8,
						null,
						null
					)
					node_list = ppropdefnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction396
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var ptypenode2 = nodearraylist1
					assert ptypenode2 isa nullable AType
					var pexprnode1: nullable ATypeExpr = new ATypeExpr.init_atypeexpr(
						ptypenode2
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction399
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var pmethidnode3 = nodearraylist4
					assert pmethidnode3 isa nullable AMethid
					var pexprnode1: nullable AMethidExpr = new AMethidExpr.init_amethidexpr(
						pexprnode2,
						pmethidnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction400
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pexprnode2: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					var pmethidnode3 = nodearraylist1
					assert pmethidnode3 isa nullable AMethid
					var pexprnode1: nullable AMethidExpr = new AMethidExpr.init_amethidexpr(
						pexprnode2,
						pmethidnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction401
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pannotationsnode2 = nodearraylist1
					assert pannotationsnode2 isa nullable AAnnotations
					var pexprnode1: nullable AAtExpr = new AAtExpr.init_aatexpr(
						pannotationsnode2
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction402
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tidnode2 = nodearraylist1
					assert tidnode2 isa nullable TId
					var patidnode1: nullable AIdAtid = new AIdAtid.init_aidatid(
						tidnode2
					)
					node_list = patidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction403
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwexternnode2 = nodearraylist1
					assert tkwexternnode2 isa nullable TKwextern
					var patidnode1: nullable AKwexternAtid = new AKwexternAtid.init_akwexternatid(
						tkwexternnode2
					)
					node_list = patidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction404
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwabstractnode2 = nodearraylist1
					assert tkwabstractnode2 isa nullable TKwabstract
					var patidnode1: nullable AKwabstractAtid = new AKwabstractAtid.init_akwabstractatid(
						tkwabstractnode2
					)
					node_list = patidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction405
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var toparnode2 = nodearraylist1
					assert toparnode2 isa nullable TOpar
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var tcparnode5 = nodearraylist4
					assert tcparnode5 isa nullable TCpar
					var pexprsnode1: nullable AParExprs = new AParExprs.init_aparexprs(
						toparnode2,
						listnode4,
						tcparnode5
					)
					node_list = pexprsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction406
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var toparnode2 = nodearraylist1
					assert toparnode2 isa nullable TOpar
					var tcparnode4 = nodearraylist3
					assert tcparnode4 isa nullable TCpar
					var pexprsnode1: nullable AParExprs = new AParExprs.init_aparexprs(
						toparnode2,
						listnode3,
						tcparnode4
					)
					node_list = pexprsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction408
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					if pexprnode2 != null then
						listnode3.add(pexprnode2)
					end
					var pexprsnode1: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode3
					)
					node_list = pexprsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction410
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var listnode2 = new Array[Object]
					var pexprsnode1: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode2
					)
					node_list = pexprsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction411
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tobranode2 = nodearraylist1
					assert tobranode2 isa nullable TObra
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var tcbranode5 = nodearraylist4
					assert tcbranode5 isa nullable TCbra
					var pexprsnode1: nullable ABraExprs = new ABraExprs.init_abraexprs(
						tobranode2,
						listnode4,
						tcbranode5
					)
					node_list = pexprsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction412
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode2 = nodearraylist1
					assert listnode2 isa Array[Object]
					listnode3 = concat(listnode3, listnode2)
					var pexprsnode1: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode3
					)
					node_list = pexprsnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction414
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var pexprnode1 = nodearraylist1
					var listnode2 = nodearraylist3
					assert listnode2 isa Array[Object]
					if pexprnode1 != null then
						listnode3.add(pexprnode1)
					end
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction415
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode1 = nodearraylist3
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction416
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist5 = p.pop
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var listnode1 = nodearraylist3
					assert listnode1 isa Array[Object]
					listnode2 = concat(listnode2, listnode1)
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction417
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					listnode2 = concat(listnode2, listnode1)
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction418
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var tidnode1 = nodearraylist1
					if tidnode1 != null then
						listnode2.add(tidnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction419
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var tidnode2 = nodearraylist4
					listnode3 = concat(listnode3, listnode1)
					if tidnode2 != null then
						listnode3.add(tidnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction420
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var tidnode4 = nodearraylist1
					assert tidnode4 isa nullable TId
					var pmodulenamenode1: nullable AModuleName = new AModuleName.init_amodulename(
						null,
						listnode3,
						tidnode4
					)
					node_list = pmodulenamenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction421
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var listnode3 = nodearraylist1
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var tidnode5 = nodearraylist2
					assert tidnode5 isa nullable TId
					var pmodulenamenode1: nullable AModuleName = new AModuleName.init_amodulename(
						null,
						listnode4,
						tidnode5
					)
					node_list = pmodulenamenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction422
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var tquadnode2 = nodearraylist1
					assert tquadnode2 isa nullable TQuad
					var tidnode4 = nodearraylist3
					assert tidnode4 isa nullable TId
					var pmodulenamenode1: nullable AModuleName = new AModuleName.init_amodulename(
						tquadnode2,
						listnode3,
						tidnode4
					)
					node_list = pmodulenamenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction423
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode4 = new Array[Object]
					var tquadnode2 = nodearraylist1
					assert tquadnode2 isa nullable TQuad
					var listnode3 = nodearraylist3
					assert listnode3 isa Array[Object]
					listnode4 = concat(listnode4, listnode3)
					var tidnode5 = nodearraylist4
					assert tidnode5 isa nullable TId
					var pmodulenamenode1: nullable AModuleName = new AModuleName.init_amodulename(
						tquadnode2,
						listnode4,
						tidnode5
					)
					node_list = pmodulenamenode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction424
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var tclassidnode3 = nodearraylist1
					assert tclassidnode3 isa nullable TClassid
					var pqualifiednode1: nullable AQualified = new AQualified.init_aqualified(
						listnode2,
						tclassidnode3
					)
					node_list = pqualifiednode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction425
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode2 = nodearraylist1
					assert listnode2 isa Array[Object]
					listnode3 = concat(listnode3, listnode2)
					var tclassidnode4 = nodearraylist2
					assert tclassidnode4 isa nullable TClassid
					var pqualifiednode1: nullable AQualified = new AQualified.init_aqualified(
						listnode3,
						tclassidnode4
					)
					node_list = pqualifiednode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction426
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode2 = nodearraylist1
					assert listnode2 isa Array[Object]
					listnode3 = concat(listnode3, listnode2)
					var pqualifiednode1: nullable AQualified = new AQualified.init_aqualified(
						listnode3,
						null
					)
					node_list = pqualifiednode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction428
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tclassidnode1 = nodearraylist1
					node_list = tclassidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction429
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tclassidnode1 = nodearraylist2
					node_list = tclassidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction430
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tclassidnode1 = nodearraylist3
					node_list = tclassidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction432
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pmethidnode1 = nodearraylist1
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction433
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pmethidnode1 = nodearraylist2
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction434
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pmethidnode1 = nodearraylist3
					node_list = pmethidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction436
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tidnode1 = nodearraylist1
					node_list = tidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction437
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tclassidnode1 = nodearraylist1
					node_list = tclassidnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction439
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var tkwendnode1 = nodearraylist1
					node_list = tkwendnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction440
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction442
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode2 = nodearraylist1
					assert listnode2 isa Array[Object]
					listnode3 = concat(listnode3, listnode2)
					var pdocnode1: nullable ADoc = new ADoc.init_adoc(
						listnode3
					)
					node_list = pdocnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction443
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode2 = nodearraylist2
					assert listnode2 isa Array[Object]
					listnode3 = concat(listnode3, listnode2)
					var pdocnode1: nullable ADoc = new ADoc.init_adoc(
						listnode3
					)
					node_list = pdocnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction446
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var pdocnode1 = nodearraylist1
					node_list = pdocnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction447
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction448
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction776
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var tkwissetnode2 = nodearraylist1
					assert tkwissetnode2 isa nullable TKwisset
					var pexprnode3 = nodearraylist2
					assert pexprnode3 isa nullable AExpr
					var tattridnode4 = nodearraylist4
					assert tattridnode4 isa nullable TAttrid
					var pexprnode1: nullable AIssetAttrExpr = new AIssetAttrExpr.init_aissetattrexpr(
						tkwissetnode2,
						pexprnode3,
						tattridnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction778
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tattridnode3 = nodearraylist3
					assert tattridnode3 isa nullable TAttrid
					var pexprnode1: nullable AAttrExpr = new AAttrExpr.init_aattrexpr(
						pexprnode2,
						tattridnode3
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction779
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction780
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist2
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction781
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist4 = p.pop
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var pexprsnode4 = nodearraylist4
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction782
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tidnode3 = nodearraylist3
					assert tidnode3 isa nullable TId
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable ACallExpr = new ACallExpr.init_acallexpr(
						pexprnode2,
						tidnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction789
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwinitnode3 = nodearraylist2
					assert tkwinitnode3 isa nullable TKwinit
					var pexprsnode4 = nodearraylist3
					assert pexprsnode4 isa nullable AExprs
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction790
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode2 = nodearraylist1
					assert pexprnode2 isa nullable AExpr
					var tkwinitnode3 = nodearraylist2
					assert tkwinitnode3 isa nullable TKwinit
					var listnode5 = new Array[Object]
					var pexprsnode4: nullable AListExprs = new AListExprs.init_alistexprs(
						listnode5
					)
					var pexprnode1: nullable AInitExpr = new AInitExpr.init_ainitexpr(
						pexprnode2,
						tkwinitnode3,
						pexprsnode4
					)
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction813
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist3 = p.pop
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var pexprnode1 = nodearraylist1
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction814
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var pexprnode1: nullable AImplicitSelfExpr = new AImplicitSelfExpr.init_aimplicitselfexpr
					node_list = pexprnode1
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction964
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pimportnode1 = nodearraylist1
					if pimportnode1 != null then
						listnode2.add(pimportnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction965
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pimportnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pimportnode2 != null then
						listnode3.add(pimportnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction966
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pexterncodeblocknode1 = nodearraylist1
					if pexterncodeblocknode1 != null then
						listnode2.add(pexterncodeblocknode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction967
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pexterncodeblocknode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pexterncodeblocknode2 != null then
						listnode3.add(pexterncodeblocknode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction968
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pclassdefnode1 = nodearraylist1
					if pclassdefnode1 != null then
						listnode2.add(pclassdefnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction969
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pclassdefnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pclassdefnode2 != null then
						listnode3.add(pclassdefnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction970
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pformaldefnode1 = nodearraylist1
					if pformaldefnode1 != null then
						listnode2.add(pformaldefnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction971
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pformaldefnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pformaldefnode2 != null then
						listnode3.add(pformaldefnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction973
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var ppropdefnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if ppropdefnode2 != null then
						listnode3.add(ppropdefnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction974
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pparamnode1 = nodearraylist1
					if pparamnode1 != null then
						listnode2.add(pparamnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction975
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pparamnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pparamnode2 != null then
						listnode3.add(pparamnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction976
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var pexterncallnode1 = nodearraylist1
					if pexterncallnode1 != null then
						listnode2.add(pexterncallnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction977
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pexterncallnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pexterncallnode2 != null then
						listnode3.add(pexterncallnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction979
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var ptypenode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if ptypenode2 != null then
						listnode3.add(ptypenode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction981
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pexprnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pexprnode2 != null then
						listnode3.add(pexprnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction987
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var listnode2 = nodearraylist2
					assert listnode2 isa Array[Object]
					listnode3 = concat(listnode3, listnode1)
					listnode3 = concat(listnode3, listnode2)
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction989
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var pannotationnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if pannotationnode2 != null then
						listnode3.add(pannotationnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction997
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var tidnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if tidnode2 != null then
						listnode3.add(tidnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction998
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var tcommentnode1 = nodearraylist1
					if tcommentnode1 != null then
						listnode2.add(tcommentnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction999
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var tcommentnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if tcommentnode2 != null then
						listnode3.add(tcommentnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction1000
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist1 = p.pop
					var listnode2 = new Array[Object]
					var teolnode1 = nodearraylist1
					if teolnode1 != null then
						listnode2.add(teolnode1)
					end
					node_list = listnode2
					p.push(p.go_to(_goto), node_list)
	end
end
private class ReduceAction1001
	super ReduceAction
	redef fun action(p: Parser)
	do
					var node_list: nullable Object = null
					var nodearraylist2 = p.pop
					var nodearraylist1 = p.pop
					var listnode3 = new Array[Object]
					var listnode1 = nodearraylist1
					assert listnode1 isa Array[Object]
					var teolnode2 = nodearraylist2
					listnode3 = concat(listnode3, listnode1)
					if teolnode2 != null then
						listnode3.add(teolnode2)
					end
					node_list = listnode3
					p.push(p.go_to(_goto), node_list)
	end
end
